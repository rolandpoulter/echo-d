{"version":3,"file":"192.echo-d.min.js","mappings":"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","sources":["webpack://echoD/./node_modules/.deno/bitecs@0.3.40/node_modules/bitecs/dist/index.mjs"],"sourcesContent":["// src/Constants.js\nvar TYPES_ENUM = {\n  i8: \"i8\",\n  ui8: \"ui8\",\n  ui8c: \"ui8c\",\n  i16: \"i16\",\n  ui16: \"ui16\",\n  i32: \"i32\",\n  ui32: \"ui32\",\n  f32: \"f32\",\n  f64: \"f64\",\n  eid: \"eid\"\n};\nvar TYPES_NAMES = {\n  i8: \"Int8\",\n  ui8: \"Uint8\",\n  ui8c: \"Uint8Clamped\",\n  i16: \"Int16\",\n  ui16: \"Uint16\",\n  i32: \"Int32\",\n  ui32: \"Uint32\",\n  eid: \"Uint32\",\n  f32: \"Float32\",\n  f64: \"Float64\"\n};\nvar TYPES = {\n  i8: Int8Array,\n  ui8: Uint8Array,\n  ui8c: Uint8ClampedArray,\n  i16: Int16Array,\n  ui16: Uint16Array,\n  i32: Int32Array,\n  ui32: Uint32Array,\n  f32: Float32Array,\n  f64: Float64Array,\n  eid: Uint32Array\n};\nvar UNSIGNED_MAX = {\n  uint8: 2 ** 8,\n  uint16: 2 ** 16,\n  uint32: 2 ** 32\n};\n\n// src/Storage.js\nvar roundToMultiple = (mul) => (x) => Math.ceil(x / mul) * mul;\nvar roundToMultiple4 = roundToMultiple(4);\nvar $storeRef = Symbol(\"storeRef\");\nvar $storeSize = Symbol(\"storeSize\");\nvar $storeMaps = Symbol(\"storeMaps\");\nvar $storeFlattened = Symbol(\"storeFlattened\");\nvar $storeBase = Symbol(\"storeBase\");\nvar $storeType = Symbol(\"storeType\");\nvar $storeArrayElementCounts = Symbol(\"storeArrayElementCounts\");\nvar $storeSubarrays = Symbol(\"storeSubarrays\");\nvar $subarrayCursors = Symbol(\"subarrayCursors\");\nvar $subarray = Symbol(\"subarray\");\nvar $subarrayFrom = Symbol(\"subarrayFrom\");\nvar $subarrayTo = Symbol(\"subarrayTo\");\nvar $parentArray = Symbol(\"parentArray\");\nvar $tagStore = Symbol(\"tagStore\");\nvar $queryShadow = Symbol(\"queryShadow\");\nvar $serializeShadow = Symbol(\"serializeShadow\");\nvar $indexType = Symbol(\"indexType\");\nvar $indexBytes = Symbol(\"indexBytes\");\nvar $isEidType = Symbol(\"isEidType\");\nvar stores = {};\nvar resize = (ta, size) => {\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT);\n  const newTa = new ta.constructor(newBuffer);\n  newTa.set(ta, 0);\n  return newTa;\n};\nvar createShadow = (store, key) => {\n  if (!ArrayBuffer.isView(store)) {\n    const shadowStore = store[$parentArray].slice(0);\n    store[key] = store.map((_, eid) => {\n      const { length } = store[eid];\n      const start = length * eid;\n      const end = start + length;\n      return shadowStore.subarray(start, end);\n    });\n  } else {\n    store[key] = store.slice(0);\n  }\n};\nvar resetStoreFor = (store, eid) => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach((ta) => {\n      if (ArrayBuffer.isView(ta))\n        ta[eid] = 0;\n      else\n        ta[eid].fill(0);\n    });\n  }\n};\nvar createTypeStore = (type, length) => {\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT;\n  const buffer = new ArrayBuffer(totalBytes);\n  const store = new TYPES[type](buffer);\n  store[$isEidType] = type === TYPES_ENUM.eid;\n  return store;\n};\nvar parentArray = (store) => store[$parentArray];\nvar createArrayStore = (metadata, type, length) => {\n  const storeSize = metadata[$storeSize];\n  const store = Array(storeSize).fill(0);\n  store[$storeType] = type;\n  store[$isEidType] = type === TYPES_ENUM.eid;\n  const cursors = metadata[$subarrayCursors];\n  const indexType = length <= UNSIGNED_MAX.uint8 ? TYPES_ENUM.ui8 : length <= UNSIGNED_MAX.uint16 ? TYPES_ENUM.ui16 : TYPES_ENUM.ui32;\n  if (!length)\n    throw new Error(\"bitECS - Must define component array length\");\n  if (!TYPES[type])\n    throw new Error(`bitECS - Invalid component array property type ${type}`);\n  if (!metadata[$storeSubarrays][type]) {\n    const arrayElementCount = metadata[$storeArrayElementCounts][type];\n    const array = new TYPES[type](roundToMultiple4(arrayElementCount * storeSize));\n    array[$indexType] = TYPES_NAMES[indexType];\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT;\n    metadata[$storeSubarrays][type] = array;\n  }\n  const start = cursors[type];\n  const end = start + storeSize * length;\n  cursors[type] = end;\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end);\n  for (let eid = 0; eid < storeSize; eid++) {\n    const start2 = length * eid;\n    const end2 = start2 + length;\n    store[eid] = store[$parentArray].subarray(start2, end2);\n    store[eid][$indexType] = TYPES_NAMES[indexType];\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT;\n    store[eid][$subarray] = true;\n  }\n  return store;\n};\nvar isArrayType = (x) => Array.isArray(x) && typeof x[0] === \"string\" && typeof x[1] === \"number\";\nvar createStore = (schema, size) => {\n  const $store = Symbol(\"store\");\n  if (!schema || !Object.keys(schema).length) {\n    stores[$store] = {\n      [$storeSize]: size,\n      [$tagStore]: true,\n      [$storeBase]: () => stores[$store]\n    };\n    return stores[$store];\n  }\n  schema = JSON.parse(JSON.stringify(schema));\n  const arrayElementCounts = {};\n  const collectArrayElementCounts = (s) => {\n    const keys = Object.keys(s);\n    for (const k of keys) {\n      if (isArrayType(s[k])) {\n        if (!arrayElementCounts[s[k][0]])\n          arrayElementCounts[s[k][0]] = 0;\n        arrayElementCounts[s[k][0]] += s[k][1];\n      } else if (s[k] instanceof Object) {\n        collectArrayElementCounts(s[k]);\n      }\n    }\n  };\n  collectArrayElementCounts(schema);\n  const metadata = {\n    [$storeSize]: size,\n    [$storeMaps]: {},\n    [$storeSubarrays]: {},\n    [$storeRef]: $store,\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\n    [$storeFlattened]: [],\n    [$storeArrayElementCounts]: arrayElementCounts\n  };\n  if (schema instanceof Object && Object.keys(schema).length) {\n    const recursiveTransform = (a, k) => {\n      if (typeof a[k] === \"string\") {\n        a[k] = createTypeStore(a[k], size);\n        a[k][$storeBase] = () => stores[$store];\n        metadata[$storeFlattened].push(a[k]);\n      } else if (isArrayType(a[k])) {\n        const [type, length] = a[k];\n        a[k] = createArrayStore(metadata, type, length);\n        a[k][$storeBase] = () => stores[$store];\n        metadata[$storeFlattened].push(a[k]);\n      } else if (a[k] instanceof Object) {\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k]);\n      }\n      return a;\n    };\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata);\n    stores[$store][$storeBase] = () => stores[$store];\n    return stores[$store];\n  }\n};\n\n// src/Util.js\nvar SparseSet = () => {\n  const dense = [];\n  const sparse = [];\n  dense.sort = function(comparator) {\n    const result = Array.prototype.sort.call(this, comparator);\n    for (let i = 0; i < dense.length; i++) {\n      sparse[dense[i]] = i;\n    }\n    return result;\n  };\n  const has = (val) => dense[sparse[val]] === val;\n  const add = (val) => {\n    if (has(val))\n      return;\n    sparse[val] = dense.push(val) - 1;\n  };\n  const remove = (val) => {\n    if (!has(val))\n      return;\n    const index = sparse[val];\n    const swapped = dense.pop();\n    if (swapped !== val) {\n      dense[index] = swapped;\n      sparse[swapped] = index;\n    }\n  };\n  const reset = () => {\n    dense.length = 0;\n    sparse.length = 0;\n  };\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n    reset\n  };\n};\n\n// src/Serialize.js\nvar DESERIALIZE_MODE = {\n  REPLACE: 0,\n  APPEND: 1,\n  MAP: 2\n};\nvar resized = false;\nvar setSerializationResized = (v) => {\n  resized = v;\n};\nvar concat = (a, v) => a.concat(v);\nvar not = (fn) => (v) => !fn(v);\nvar storeFlattened = (c) => c[$storeFlattened];\nvar isFullComponent = storeFlattened;\nvar isProperty = not(isFullComponent);\nvar isModifier = (c) => typeof c === \"function\" && c[$modifier];\nvar isNotModifier = not(isModifier);\nvar isChangedModifier = (c) => isModifier(c) && c()[1] === \"changed\";\nvar isWorld = (w) => Object.getOwnPropertySymbols(w).includes($componentMap);\nvar fromModifierToComponent = (c) => c()[0];\nvar canonicalize = (target) => {\n  if (isWorld(target))\n    return [[], /* @__PURE__ */ new Map()];\n  const fullComponentProps = target.filter(isNotModifier).filter(isFullComponent).map(storeFlattened).reduce(concat, []);\n  const changedComponentProps = target.filter(isChangedModifier).map(fromModifierToComponent).filter(isFullComponent).map(storeFlattened).reduce(concat, []);\n  const props = target.filter(isNotModifier).filter(isProperty);\n  const changedProps = target.filter(isChangedModifier).map(fromModifierToComponent).filter(isProperty);\n  const componentProps = [...fullComponentProps, ...props, ...changedComponentProps, ...changedProps];\n  const allChangedProps = [...changedComponentProps, ...changedProps].reduce((map, prop) => {\n    const $ = Symbol();\n    createShadow(prop, $);\n    map.set(prop, $);\n    return map;\n  }, /* @__PURE__ */ new Map());\n  return [componentProps, allChangedProps];\n};\nvar defineSerializer = (target, maxBytes = 2e7) => {\n  const worldSerializer = isWorld(target);\n  let [componentProps, changedProps] = canonicalize(target);\n  const buffer = new ArrayBuffer(maxBytes);\n  const view = new DataView(buffer);\n  const entityComponentCache = /* @__PURE__ */ new Map();\n  return (ents) => {\n    if (resized) {\n      [componentProps, changedProps] = canonicalize(target);\n      resized = false;\n    }\n    if (worldSerializer) {\n      componentProps = [];\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened]);\n        else\n          componentProps.push(component);\n      });\n    }\n    let world;\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\n      world = ents;\n      ents = ents[$entityArray];\n    } else {\n      world = eidToWorld.get(ents[0]);\n    }\n    let where = 0;\n    if (!ents.length)\n      return buffer.slice(0, where);\n    const cache = /* @__PURE__ */ new Map();\n    for (let pid = 0; pid < componentProps.length; pid++) {\n      const prop = componentProps[pid];\n      const component = prop[$storeBase]();\n      const $diff = changedProps.get(prop);\n      const shadow = $diff ? prop[$diff] : null;\n      if (!cache.has(component))\n        cache.set(component, /* @__PURE__ */ new Map());\n      view.setUint8(where, pid);\n      where += 1;\n      const countWhere = where;\n      where += 4;\n      let writeCount = 0;\n      for (let i = 0; i < ents.length; i++) {\n        const eid = ents[i];\n        let componentCache = entityComponentCache.get(eid);\n        if (!componentCache)\n          componentCache = entityComponentCache.set(eid, /* @__PURE__ */ new Set()).get(eid);\n        componentCache.add(eid);\n        const newlyAddedComponent = shadow && cache.get(component).get(eid) || !componentCache.has(component) && hasComponent(world, component, eid);\n        cache.get(component).set(eid, newlyAddedComponent);\n        if (newlyAddedComponent) {\n          componentCache.add(component);\n        } else if (!hasComponent(world, component, eid)) {\n          componentCache.delete(component);\n          continue;\n        }\n        const rewindWhere = where;\n        view.setUint32(where, eid);\n        where += 4;\n        if (prop[$tagStore]) {\n          writeCount++;\n          continue;\n        }\n        if (ArrayBuffer.isView(prop[eid])) {\n          const type = prop[eid].constructor.name.replace(\"Array\", \"\");\n          const indexType = prop[eid][$indexType];\n          const indexBytes = prop[eid][$indexBytes];\n          const countWhere2 = where;\n          where += indexBytes;\n          let arrayWriteCount = 0;\n          for (let i2 = 0; i2 < prop[eid].length; i2++) {\n            if (shadow) {\n              const changed = shadow[eid][i2] !== prop[eid][i2];\n              shadow[eid][i2] = prop[eid][i2];\n              if (!changed && !newlyAddedComponent) {\n                continue;\n              }\n            }\n            view[`set${indexType}`](where, i2);\n            where += indexBytes;\n            const value = prop[eid][i2];\n            view[`set${type}`](where, value);\n            where += prop[eid].BYTES_PER_ELEMENT;\n            arrayWriteCount++;\n          }\n          if (arrayWriteCount > 0) {\n            view[`set${indexType}`](countWhere2, arrayWriteCount);\n            writeCount++;\n          } else {\n            where = rewindWhere;\n            continue;\n          }\n        } else {\n          if (shadow) {\n            const changed = shadow[eid] !== prop[eid];\n            shadow[eid] = prop[eid];\n            if (!changed && !newlyAddedComponent) {\n              where = rewindWhere;\n              continue;\n            }\n          }\n          const type = prop.constructor.name.replace(\"Array\", \"\");\n          view[`set${type}`](where, prop[eid]);\n          where += prop.BYTES_PER_ELEMENT;\n          writeCount++;\n        }\n      }\n      if (writeCount > 0) {\n        view.setUint32(countWhere, writeCount);\n      } else {\n        where -= 5;\n      }\n    }\n    return buffer.slice(0, where);\n  };\n};\nvar newEntities = /* @__PURE__ */ new Map();\nvar defineDeserializer = (target) => {\n  const isWorld2 = Object.getOwnPropertySymbols(target).includes($componentMap);\n  let [componentProps] = canonicalize(target);\n  const deserializedEntities = /* @__PURE__ */ new Set();\n  return (world, packet, mode = 0) => {\n    newEntities.clear();\n    if (resized) {\n      [componentProps] = canonicalize(target);\n      resized = false;\n    }\n    if (isWorld2) {\n      componentProps = [];\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened]);\n        else\n          componentProps.push(component);\n      });\n    }\n    const localEntities = world[$localEntities];\n    const localEntityLookup = world[$localEntityLookup];\n    const view = new DataView(packet);\n    let where = 0;\n    while (where < packet.byteLength) {\n      const pid = view.getUint8(where);\n      where += 1;\n      const entityCount = view.getUint32(where);\n      where += 4;\n      const prop = componentProps[pid];\n      for (let i = 0; i < entityCount; i++) {\n        let eid = view.getUint32(where);\n        where += 4;\n        if (mode === DESERIALIZE_MODE.MAP) {\n          if (localEntities.has(eid)) {\n            eid = localEntities.get(eid);\n          } else if (newEntities.has(eid)) {\n            eid = newEntities.get(eid);\n          } else {\n            const newEid = addEntity(world);\n            localEntities.set(eid, newEid);\n            localEntityLookup.set(newEid, eid);\n            newEntities.set(eid, newEid);\n            eid = newEid;\n          }\n        }\n        if (mode === DESERIALIZE_MODE.APPEND || mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)) {\n          const newEid = newEntities.get(eid) || addEntity(world);\n          newEntities.set(eid, newEid);\n          eid = newEid;\n        }\n        const component = prop[$storeBase]();\n        if (!hasComponent(world, component, eid)) {\n          addComponent(world, component, eid);\n        }\n        deserializedEntities.add(eid);\n        if (component[$tagStore]) {\n          continue;\n        }\n        if (ArrayBuffer.isView(prop[eid])) {\n          const array = prop[eid];\n          const count = view[`get${array[$indexType]}`](where);\n          where += array[$indexBytes];\n          for (let i2 = 0; i2 < count; i2++) {\n            const index = view[`get${array[$indexType]}`](where);\n            where += array[$indexBytes];\n            const value = view[`get${array.constructor.name.replace(\"Array\", \"\")}`](where);\n            where += array.BYTES_PER_ELEMENT;\n            if (prop[$isEidType]) {\n              let localEid;\n              if (localEntities.has(value)) {\n                localEid = localEntities.get(value);\n              } else if (newEntities.has(value)) {\n                localEid = newEntities.get(value);\n              } else {\n                const newEid = addEntity(world);\n                localEntities.set(value, newEid);\n                localEntityLookup.set(newEid, value);\n                newEntities.set(value, newEid);\n                localEid = newEid;\n              }\n              prop[eid][index] = localEid;\n            } else\n              prop[eid][index] = value;\n          }\n        } else {\n          const value = view[`get${prop.constructor.name.replace(\"Array\", \"\")}`](where);\n          where += prop.BYTES_PER_ELEMENT;\n          if (prop[$isEidType]) {\n            let localEid;\n            if (localEntities.has(value)) {\n              localEid = localEntities.get(value);\n            } else if (newEntities.has(value)) {\n              localEid = newEntities.get(value);\n            } else {\n              const newEid = addEntity(world);\n              localEntities.set(value, newEid);\n              localEntityLookup.set(newEid, value);\n              newEntities.set(value, newEid);\n              localEid = newEid;\n            }\n            prop[eid] = localEid;\n          } else\n            prop[eid] = value;\n        }\n      }\n    }\n    const ents = Array.from(deserializedEntities);\n    deserializedEntities.clear();\n    return ents;\n  };\n};\n\n// src/Entity.js\nvar $entityMasks = Symbol(\"entityMasks\");\nvar $entityComponents = Symbol(\"entityComponents\");\nvar $entitySparseSet = Symbol(\"entitySparseSet\");\nvar $entityArray = Symbol(\"entityArray\");\nvar $entityIndices = Symbol(\"entityIndices\");\nvar $removedEntities = Symbol(\"removedEntities\");\nvar defaultSize = 1e5;\nvar globalEntityCursor = 0;\nvar globalSize = defaultSize;\nvar getGlobalSize = () => globalSize;\nvar removed = [];\nvar recycled = [];\nvar defaultRemovedReuseThreshold = 0.01;\nvar removedReuseThreshold = defaultRemovedReuseThreshold;\nvar resetGlobals = () => {\n  globalSize = defaultSize;\n  globalEntityCursor = 0;\n  removedReuseThreshold = defaultRemovedReuseThreshold;\n  removed.length = 0;\n  recycled.length = 0;\n};\nvar setDefaultSize = (newSize) => {\n  const oldSize = globalSize;\n  defaultSize = newSize;\n  resetGlobals();\n  globalSize = newSize;\n  resizeWorlds(newSize);\n  setSerializationResized(true);\n};\nvar setRemovedRecycleThreshold = (newThreshold) => {\n  removedReuseThreshold = newThreshold;\n};\nvar getEntityCursor = () => globalEntityCursor;\nvar eidToWorld = /* @__PURE__ */ new Map();\nvar flushRemovedEntities = (world) => {\n  if (!world[$manualEntityRecycling]) {\n    throw new Error(\"bitECS - cannot flush removed entities, enable feature with the enableManualEntityRecycling function\");\n  }\n  removed.push(...recycled);\n  recycled.length = 0;\n};\nvar addEntity = (world) => {\n  const eid = world[$manualEntityRecycling] ? removed.length ? removed.shift() : globalEntityCursor++ : removed.length > Math.round(globalSize * removedReuseThreshold) ? removed.shift() : globalEntityCursor++;\n  if (eid > world[$size])\n    throw new Error(\"bitECS - max entities reached\");\n  world[$entitySparseSet].add(eid);\n  eidToWorld.set(eid, world);\n  world[$notQueries].forEach((q) => {\n    const match = queryCheckEntity(world, q, eid);\n    if (match)\n      queryAddEntity(q, eid);\n  });\n  world[$entityComponents].set(eid, /* @__PURE__ */ new Set());\n  return eid;\n};\nvar removeEntity = (world, eid) => {\n  if (!world[$entitySparseSet].has(eid))\n    return;\n  world[$queries].forEach((q) => {\n    queryRemoveEntity(world, q, eid);\n  });\n  if (world[$manualEntityRecycling])\n    recycled.push(eid);\n  else\n    removed.push(eid);\n  world[$entitySparseSet].remove(eid);\n  world[$entityComponents].delete(eid);\n  world[$localEntities].delete(world[$localEntityLookup].get(eid));\n  world[$localEntityLookup].delete(eid);\n  for (let i = 0; i < world[$entityMasks].length; i++)\n    world[$entityMasks][i][eid] = 0;\n};\nvar getEntityComponents = (world, eid) => {\n  if (eid === void 0)\n    throw new Error(\"bitECS - entity is undefined.\");\n  if (!world[$entitySparseSet].has(eid))\n    throw new Error(\"bitECS - entity does not exist in the world.\");\n  return Array.from(world[$entityComponents].get(eid));\n};\nvar entityExists = (world, eid) => world[$entitySparseSet].has(eid);\n\n// src/Query.js\nvar $modifier = Symbol(\"$modifier\");\nfunction modifier(c, mod) {\n  const inner = () => [c, mod];\n  inner[$modifier] = true;\n  return inner;\n}\nvar Not = (c) => modifier(c, \"not\");\nvar Changed = (c) => modifier(c, \"changed\");\nfunction Any(...comps) {\n  return function QueryAny() {\n    return comps;\n  };\n}\nfunction All(...comps) {\n  return function QueryAll() {\n    return comps;\n  };\n}\nfunction None(...comps) {\n  return function QueryNone() {\n    return comps;\n  };\n}\nvar $queries = Symbol(\"queries\");\nvar $notQueries = Symbol(\"notQueries\");\nvar $queryAny = Symbol(\"queryAny\");\nvar $queryAll = Symbol(\"queryAll\");\nvar $queryNone = Symbol(\"queryNone\");\nvar $queryMap = Symbol(\"queryMap\");\nvar $dirtyQueries = Symbol(\"$dirtyQueries\");\nvar $queryComponents = Symbol(\"queryComponents\");\nvar $enterQuery = Symbol(\"enterQuery\");\nvar $exitQuery = Symbol(\"exitQuery\");\nvar empty = Object.freeze([]);\nvar enterQuery = (query) => (world) => {\n  if (!world[$queryMap].has(query))\n    registerQuery(world, query);\n  const q = world[$queryMap].get(query);\n  if (q.entered.dense.length === 0) {\n    return empty;\n  } else {\n    const results = q.entered.dense.slice();\n    q.entered.reset();\n    return results;\n  }\n};\nvar exitQuery = (query) => (world) => {\n  if (!world[$queryMap].has(query))\n    registerQuery(world, query);\n  const q = world[$queryMap].get(query);\n  if (q.exited.dense.length === 0) {\n    return empty;\n  } else {\n    const results = q.exited.dense.slice();\n    q.exited.reset();\n    return results;\n  }\n};\nvar registerQuery = (world, query) => {\n  const components2 = [];\n  const notComponents = [];\n  const changedComponents = [];\n  query[$queryComponents].forEach((c) => {\n    if (typeof c === \"function\" && c[$modifier]) {\n      const [comp, mod] = c();\n      if (!world[$componentMap].has(comp))\n        registerComponent(world, comp);\n      if (mod === \"not\") {\n        notComponents.push(comp);\n      }\n      if (mod === \"changed\") {\n        changedComponents.push(comp);\n        components2.push(comp);\n      }\n    } else {\n      if (!world[$componentMap].has(c))\n        registerComponent(world, c);\n      components2.push(c);\n    }\n  });\n  const mapComponents = (c) => world[$componentMap].get(c);\n  const allComponents = components2.concat(notComponents).map(mapComponents);\n  const sparseSet = SparseSet();\n  const archetypes = [];\n  const changed = [];\n  const toRemove = SparseSet();\n  const entered = SparseSet();\n  const exited = SparseSet();\n  const generations = allComponents.map((c) => c.generationId).reduce((a, v) => {\n    if (a.includes(v))\n      return a;\n    a.push(v);\n    return a;\n  }, []);\n  const reduceBitflags = (a, c) => {\n    if (!a[c.generationId])\n      a[c.generationId] = 0;\n    a[c.generationId] |= c.bitflag;\n    return a;\n  };\n  const masks = components2.map(mapComponents).reduce(reduceBitflags, {});\n  const notMasks = notComponents.map(mapComponents).reduce(reduceBitflags, {});\n  const hasMasks = allComponents.reduce(reduceBitflags, {});\n  const flatProps = components2.filter((c) => !c[$tagStore]).map((c) => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c]).reduce((a, v) => a.concat(v), []);\n  const shadows = [];\n  const q = Object.assign(sparseSet, {\n    archetypes,\n    changed,\n    components: components2,\n    notComponents,\n    changedComponents,\n    allComponents,\n    masks,\n    notMasks,\n    hasMasks,\n    generations,\n    flatProps,\n    toRemove,\n    entered,\n    exited,\n    shadows\n  });\n  world[$queryMap].set(query, q);\n  world[$queries].add(q);\n  allComponents.forEach((c) => {\n    c.queries.add(q);\n  });\n  if (notComponents.length)\n    world[$notQueries].add(q);\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\n    if (!world[$entitySparseSet].has(eid))\n      continue;\n    const match = queryCheckEntity(world, q, eid);\n    if (match)\n      queryAddEntity(q, eid);\n  }\n};\nvar generateShadow = (q, pid) => {\n  const $ = Symbol();\n  const prop = q.flatProps[pid];\n  createShadow(prop, $);\n  q.shadows[pid] = prop[$];\n  return prop[$];\n};\nvar diff = (q, clearDiff) => {\n  if (clearDiff)\n    q.changed = [];\n  const { flatProps, shadows } = q;\n  for (let i = 0; i < q.dense.length; i++) {\n    const eid = q.dense[i];\n    let dirty = false;\n    for (let pid = 0; pid < flatProps.length; pid++) {\n      const prop = flatProps[pid];\n      const shadow = shadows[pid] || generateShadow(q, pid);\n      if (ArrayBuffer.isView(prop[eid])) {\n        for (let i2 = 0; i2 < prop[eid].length; i2++) {\n          if (prop[eid][i2] !== shadow[eid][i2]) {\n            dirty = true;\n            break;\n          }\n        }\n        shadow[eid].set(prop[eid]);\n      } else {\n        if (prop[eid] !== shadow[eid]) {\n          dirty = true;\n          shadow[eid] = prop[eid];\n        }\n      }\n    }\n    if (dirty)\n      q.changed.push(eid);\n  }\n  return q.changed;\n};\nvar flatten = (a, v) => a.concat(v);\nvar aggregateComponentsFor = (mod) => (x) => x.filter((f) => f.name === mod().constructor.name).reduce(flatten);\nvar getAnyComponents = aggregateComponentsFor(Any);\nvar getAllComponents = aggregateComponentsFor(All);\nvar getNoneComponents = aggregateComponentsFor(None);\nvar defineQuery = (...args) => {\n  let components2;\n  let any, all, none;\n  if (Array.isArray(args[0])) {\n    components2 = args[0];\n  } else {\n  }\n  if (components2 === void 0 || components2[$componentMap] !== void 0) {\n    return (world) => world ? world[$entityArray] : components2[$entityArray];\n  }\n  const query = function(world, clearDiff = true) {\n    if (!world[$queryMap].has(query))\n      registerQuery(world, query);\n    const q = world[$queryMap].get(query);\n    commitRemovals(world);\n    if (q.changedComponents.length)\n      return diff(q, clearDiff);\n    return q.dense;\n  };\n  query[$queryComponents] = components2;\n  query[$queryAny] = any;\n  query[$queryAll] = all;\n  query[$queryNone] = none;\n  return query;\n};\nvar queryCheckEntity = (world, q, eid) => {\n  const { masks, notMasks, generations } = q;\n  let or = 0;\n  for (let i = 0; i < generations.length; i++) {\n    const generationId = generations[i];\n    const qMask = masks[generationId];\n    const qNotMask = notMasks[generationId];\n    const eMask = world[$entityMasks][generationId][eid];\n    if (qNotMask && (eMask & qNotMask) !== 0) {\n      return false;\n    }\n    if (qMask && (eMask & qMask) !== qMask) {\n      return false;\n    }\n  }\n  return true;\n};\nvar queryAddEntity = (q, eid) => {\n  q.toRemove.remove(eid);\n  q.entered.add(eid);\n  q.add(eid);\n};\nvar queryCommitRemovals = (q) => {\n  for (let i = q.toRemove.dense.length - 1; i >= 0; i--) {\n    const eid = q.toRemove.dense[i];\n    q.toRemove.remove(eid);\n    q.remove(eid);\n  }\n};\nvar commitRemovals = (world) => {\n  if (!world[$dirtyQueries].size)\n    return;\n  world[$dirtyQueries].forEach(queryCommitRemovals);\n  world[$dirtyQueries].clear();\n};\nvar queryRemoveEntity = (world, q, eid) => {\n  if (!q.has(eid) || q.toRemove.has(eid))\n    return;\n  q.toRemove.add(eid);\n  world[$dirtyQueries].add(q);\n  q.exited.add(eid);\n};\nvar resetChangedQuery = (world, query) => {\n  const q = world[$queryMap].get(query);\n  q.changed = [];\n};\nvar removeQuery = (world, query) => {\n  const q = world[$queryMap].get(query);\n  world[$queries].delete(q);\n  world[$queryMap].delete(query);\n};\n\n// src/Component.js\nvar $componentMap = Symbol(\"componentMap\");\nvar components = [];\nvar defineComponent = (schema, size) => {\n  const component = createStore(schema, size || getGlobalSize());\n  if (schema && Object.keys(schema).length)\n    components.push(component);\n  return component;\n};\nvar incrementBitflag = (world) => {\n  world[$bitflag] *= 2;\n  if (world[$bitflag] >= 2 ** 31) {\n    world[$bitflag] = 1;\n    world[$entityMasks].push(new Uint32Array(world[$size]));\n  }\n};\nvar registerComponent = (world, component) => {\n  if (!component)\n    throw new Error(`bitECS - Cannot register null or undefined component`);\n  const queries = /* @__PURE__ */ new Set();\n  const notQueries = /* @__PURE__ */ new Set();\n  const changedQueries = /* @__PURE__ */ new Set();\n  world[$queries].forEach((q) => {\n    if (q.allComponents.includes(component)) {\n      queries.add(q);\n    }\n  });\n  world[$componentMap].set(component, {\n    generationId: world[$entityMasks].length - 1,\n    bitflag: world[$bitflag],\n    store: component,\n    queries,\n    notQueries,\n    changedQueries\n  });\n  incrementBitflag(world);\n};\nvar registerComponents = (world, components2) => {\n  components2.forEach((c) => registerComponent(world, c));\n};\nvar hasComponent = (world, component, eid) => {\n  const registeredComponent = world[$componentMap].get(component);\n  if (!registeredComponent)\n    return false;\n  const { generationId, bitflag } = registeredComponent;\n  const mask = world[$entityMasks][generationId][eid];\n  return (mask & bitflag) === bitflag;\n};\nvar addComponent = (world, component, eid, reset = false) => {\n  if (eid === void 0)\n    throw new Error(\"bitECS - entity is undefined.\");\n  if (!world[$entitySparseSet].has(eid))\n    throw new Error(\"bitECS - entity does not exist in the world.\");\n  if (!world[$componentMap].has(component))\n    registerComponent(world, component);\n  if (hasComponent(world, component, eid))\n    return;\n  const c = world[$componentMap].get(component);\n  const { generationId, bitflag, queries, notQueries } = c;\n  world[$entityMasks][generationId][eid] |= bitflag;\n  queries.forEach((q) => {\n    q.toRemove.remove(eid);\n    const match = queryCheckEntity(world, q, eid);\n    if (match) {\n      q.exited.remove(eid);\n      queryAddEntity(q, eid);\n    }\n    if (!match) {\n      q.entered.remove(eid);\n      queryRemoveEntity(world, q, eid);\n    }\n  });\n  world[$entityComponents].get(eid).add(component);\n  if (reset)\n    resetStoreFor(component, eid);\n};\nvar removeComponent = (world, component, eid, reset = true) => {\n  if (eid === void 0)\n    throw new Error(\"bitECS - entity is undefined.\");\n  if (!world[$entitySparseSet].has(eid))\n    throw new Error(\"bitECS - entity does not exist in the world.\");\n  if (!hasComponent(world, component, eid))\n    return;\n  const c = world[$componentMap].get(component);\n  const { generationId, bitflag, queries } = c;\n  world[$entityMasks][generationId][eid] &= ~bitflag;\n  queries.forEach((q) => {\n    q.toRemove.remove(eid);\n    const match = queryCheckEntity(world, q, eid);\n    if (match) {\n      q.exited.remove(eid);\n      queryAddEntity(q, eid);\n    }\n    if (!match) {\n      q.entered.remove(eid);\n      queryRemoveEntity(world, q, eid);\n    }\n  });\n  world[$entityComponents].get(eid).delete(component);\n  if (reset)\n    resetStoreFor(component, eid);\n};\n\n// src/World.js\nvar $size = Symbol(\"size\");\nvar $resizeThreshold = Symbol(\"resizeThreshold\");\nvar $bitflag = Symbol(\"bitflag\");\nvar $archetypes = Symbol(\"archetypes\");\nvar $localEntities = Symbol(\"localEntities\");\nvar $localEntityLookup = Symbol(\"localEntityLookup\");\nvar $manualEntityRecycling = Symbol(\"manualEntityRecycling\");\nvar worlds = [];\nvar resizeWorlds = (size) => {\n  worlds.forEach((world) => {\n    world[$size] = size;\n    for (let i = 0; i < world[$entityMasks].length; i++) {\n      const masks = world[$entityMasks][i];\n      world[$entityMasks][i] = resize(masks, size);\n    }\n    world[$resizeThreshold] = world[$size] - world[$size] / 5;\n  });\n};\nvar createWorld = (...args) => {\n  const world = typeof args[0] === \"object\" ? args[0] : {};\n  const size = typeof args[0] === \"number\" ? args[0] : typeof args[1] === \"number\" ? args[1] : getGlobalSize();\n  resetWorld(world, size);\n  worlds.push(world);\n  return world;\n};\nvar enableManualEntityRecycling = (world) => {\n  world[$manualEntityRecycling] = true;\n};\nvar resetWorld = (world, size = getGlobalSize()) => {\n  world[$size] = size;\n  if (world[$entityArray])\n    world[$entityArray].forEach((eid) => removeEntity(world, eid));\n  world[$entityMasks] = [new Uint32Array(size)];\n  world[$entityComponents] = /* @__PURE__ */ new Map();\n  world[$archetypes] = [];\n  world[$entitySparseSet] = SparseSet();\n  world[$entityArray] = world[$entitySparseSet].dense;\n  world[$bitflag] = 1;\n  world[$componentMap] = /* @__PURE__ */ new Map();\n  world[$queryMap] = /* @__PURE__ */ new Map();\n  world[$queries] = /* @__PURE__ */ new Set();\n  world[$notQueries] = /* @__PURE__ */ new Set();\n  world[$dirtyQueries] = /* @__PURE__ */ new Set();\n  world[$localEntities] = /* @__PURE__ */ new Map();\n  world[$localEntityLookup] = /* @__PURE__ */ new Map();\n  world[$manualEntityRecycling] = false;\n  return world;\n};\nvar deleteWorld = (world) => {\n  Object.getOwnPropertySymbols(world).forEach(($) => {\n    delete world[$];\n  });\n  Object.keys(world).forEach((key) => {\n    delete world[key];\n  });\n  worlds.splice(worlds.indexOf(world), 1);\n};\nvar getWorldComponents = (world) => Array.from(world[$componentMap].keys());\nvar getAllEntities = (world) => world[$entitySparseSet].dense.slice(0);\n\n// src/System.js\nvar defineSystem = (update) => (world, ...args) => {\n  update(world, ...args);\n  return world;\n};\n\n// src/index.js\nvar pipe = (...fns) => (input) => {\n  let tmp = input;\n  for (let i = 0; i < fns.length; i++) {\n    const fn = fns[i];\n    tmp = fn(tmp);\n  }\n  return tmp;\n};\nvar Types = TYPES_ENUM;\nexport {\n  Changed,\n  DESERIALIZE_MODE,\n  Not,\n  Types,\n  addComponent,\n  addEntity,\n  commitRemovals,\n  createWorld,\n  defineComponent,\n  defineDeserializer,\n  defineQuery,\n  defineSerializer,\n  defineSystem,\n  deleteWorld,\n  enableManualEntityRecycling,\n  enterQuery,\n  entityExists,\n  exitQuery,\n  flushRemovedEntities,\n  getAllEntities,\n  getEntityComponents,\n  getWorldComponents,\n  hasComponent,\n  parentArray,\n  pipe,\n  registerComponent,\n  registerComponents,\n  removeComponent,\n  removeEntity,\n  removeQuery,\n  resetChangedQuery,\n  resetGlobals,\n  resetWorld,\n  setDefaultSize,\n  setRemovedRecycleThreshold\n};\n//# sourceMappingURL=index.mjs.map\n"],"names":["TYPES_ENUM","TYPES_NAMES","i8","ui8","ui8c","i16","ui16","i32","ui32","eid","f32","f64","TYPES","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","roundToMultiple4","x","Math","ceil","$storeRef","Symbol","$storeSize","$storeMaps","$storeFlattened","$storeBase","$storeType","$storeArrayElementCounts","$storeSubarrays","$subarrayCursors","$subarray","$parentArray","$tagStore","$indexType","$indexBytes","$isEidType","stores","resetStoreFor","store","forEach","ta","ArrayBuffer","isView","fill","isArrayType","Array","isArray","SparseSet","dense","sparse","sort","comparator","result","prototype","call","this","i","length","has","val","add","push","remove","index","swapped","pop","reset","not","fn","v","isModifier","c","$modifier","$entityMasks","$entityComponents","$entitySparseSet","$entityArray","defaultSize","globalEntityCursor","globalSize","getGlobalSize","removed","recycled","eidToWorld","Map","addEntity","world","$manualEntityRecycling","shift","round","$size","Error","set","$notQueries","q","queryCheckEntity","queryAddEntity","Set","removeEntity","$queries","queryRemoveEntity","delete","$localEntities","$localEntityLookup","get","$queryMap","$dirtyQueries","flatten","Object","freeze","a","concat","aggregateComponentsFor","mod","filter","f","name","constructor","reduce","comps","masks","notMasks","generations","generationId","qMask","qNotMask","eMask","toRemove","entered","exited","$componentMap","components","defineComponent","schema","size","component","$store","keys","JSON","parse","stringify","arrayElementCounts","collectArrayElementCounts","s","k","metadata","type","recursiveTransform","totalBytes","BYTES_PER_ELEMENT","buffer","createTypeStore","storeSize","cursors","indexType","arrayElementCount","array","start","end","subarray","start2","end2","createArrayStore","assign","createStore","hasComponent","registeredComponent","bitflag","addComponent","queries","notQueries","changedQueries","allComponents","includes","$bitflag","incrementBitflag","registerComponent","match","removeComponent","$archetypes","worlds","createWorld","args","resetWorld"],"sourceRoot":""}