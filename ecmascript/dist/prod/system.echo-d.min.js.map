{"version":3,"file":"system.echo-d.min.js","mappings":"cAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAe,MAAID,IAEnBD,EAAY,MAAIC,GACjB,CATD,CASqB,oBAAXK,OAAyBA,OAA2B,oBAAXC,OAAyBA,OAAyB,oBAATC,KAAuBA,KAAOC,MAAM,K,kZCPzH,MAAMC,EACTC,aAAaC,EAASC,GAClB,OAAOD,EAAQE,gBAAgBD,EACnC,CACAE,YAAYH,EAASI,EAAO,GAAIC,EAAYC,EAAU,IAAIC,KACtDV,KAAKO,KAAOA,GAAQP,KAAKM,YAAYC,KACrCP,KAAKG,QAAUA,EACfH,KAAKS,QAAUA,EACfT,KAAKQ,WAAaA,CACtB,CACAJ,QAEI,OADAJ,KAAKW,SAAWV,EAAOG,MAAMJ,KAAKG,QAAS,CAAES,KAAMZ,KAAKQ,WAAYK,QAASb,KAAKS,UAC3ET,KAAKW,QAChB,CACAG,QAAQC,EAAIC,EAAO,MACf,MAAML,EAAWX,KAAKI,QACF,mBAATY,IACPA,EAAOA,EAAKhB,OAEhB,IAAK,MAAMiB,KAAUN,EACjBI,EAAGf,KAAMiB,EAAQD,EAEzB,EAEG,SAASE,EAAeC,EAASJ,EAAIC,EAAO,MAC/C,IAAK,MAAMI,KAAUD,EACjBC,EAAON,QAAQC,EAAIC,EAE3B,CACO,SAASK,EAAcC,EAAOH,EAASI,GAAY,GACtD,OAAOJ,EAAQK,QAAOJ,IAClB,MAAMb,EAAOa,EAAOb,MAAQa,EAAOd,YAAYC,MAAQ,GACvD,OAAOe,EAAMG,SAASF,GAAahB,EAAOA,EAAKmB,cAAgBnB,EAAK,GAE5E,CACO,MAAMoB,UAAsB,KAC/BrB,YAAYsB,EAASC,EAASC,EAASC,EAAW,MAC9CC,MAAMJ,EAASC,EAASC,EAASC,GACjC/B,KAAKmB,QAAU,EACnB,CACAc,aAAa1B,EAAO,GAAIC,EAAYC,EAAU,IAAIC,IAAOwB,EAAUjC,GAC/D,MAAMmB,EAAS,IAAIc,EAAQlC,KAAMO,EAAMC,EAAYC,GAEnD,OADAT,KAAKmB,QAAQgB,KAAKf,GACXA,CACX,CACAgB,aAAahB,GACT,MAAMiB,EAAQrC,KAAKmB,QAAQmB,QAAQlB,IACpB,IAAXiB,GACArC,KAAKmB,QAAQoB,OAAOF,EAAO,EAEnC,CACAnB,eAAeH,EAAIC,EAAO,KAAMG,EAAUnB,KAAKmB,SACpB,mBAAZA,IACPA,EAAUA,EAAQnB,OAEF,mBAATgB,IACPA,EAAOA,EAAKhB,OAEhBkB,EAAeC,EAASJ,EAAIC,EAChC,CACAK,cAAcC,EAAOC,GAAY,EAAMJ,EAAUnB,KAAKmB,SAIlD,MAHuB,mBAAZA,IACPA,EAAUA,EAAQnB,OAEfqB,EAAcC,EAAOH,EAASI,EACzC,E","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/./lib/extra/system.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","import { Handler } from '../handler.js';\nimport { Storage } from '../storage.js';\nexport class System {\n    static query(handler, query) {\n        return handler.queryComponents(query);\n    }\n    constructor(handler, name = '', components, exclude = new Set()) {\n        this.name = name || this.constructor.name;\n        this.handler = handler;\n        this.exclude = exclude;\n        this.components = components;\n    }\n    query() {\n        this.entities = System.query(this.handler, { with: this.components, without: this.exclude });\n        return this.entities;\n    }\n    execute(fn, data = null) {\n        const entities = this.query();\n        if (typeof data === 'function') {\n            data = data(this);\n        }\n        for (const entity of entities) {\n            fn(this, entity, data);\n        }\n    }\n}\nexport function executeSystems(systems, fn, data = null) {\n    for (const system of systems) {\n        system.execute(fn, data);\n    }\n}\nexport function filterSystems(names, systems, lowercase = true) {\n    return systems.filter(system => {\n        const name = system.name || system.constructor.name || '';\n        return names.includes(lowercase && name ? name.toLowerCase() : name);\n    });\n}\nexport class SystemHandler extends Handler {\n    constructor(context, options, actions, _Storage = Storage) {\n        super(context, options, actions, _Storage);\n        this.systems = [];\n    }\n    createSystem(name = '', components, exclude = new Set(), _System = System) {\n        const system = new _System(this, name, components, exclude);\n        this.systems.push(system);\n        return system;\n    }\n    removeSystem(system) {\n        const index = this.systems.indexOf(system);\n        if (index !== -1) {\n            this.systems.splice(index, 1);\n        }\n    }\n    executeSystems(fn, data = null, systems = this.systems) {\n        if (typeof systems === 'function') {\n            systems = systems(this);\n        }\n        if (typeof data === 'function') {\n            data = data(this);\n        }\n        executeSystems(systems, fn, data);\n    }\n    filterSystems(names, lowercase = true, systems = this.systems) {\n        if (typeof systems === 'function') {\n            systems = systems(this);\n        }\n        return filterSystems(names, systems, lowercase);\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","window","global","self","this","System","static","handler","query","queryComponents","constructor","name","components","exclude","Set","entities","with","without","execute","fn","data","entity","executeSystems","systems","system","filterSystems","names","lowercase","filter","includes","toLowerCase","SystemHandler","context","options","actions","_Storage","super","createSystem","_System","push","removeSystem","index","indexOf","splice"],"sourceRoot":""}