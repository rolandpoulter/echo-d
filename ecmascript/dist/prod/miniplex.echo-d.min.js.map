{"version":3,"file":"miniplex.echo-d.min.js","mappings":"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","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/./lib/extra/storage/miniplex.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","import { Storage } from '../../storage.js';\nimport { paginate } from '../../utils.js';\nconst { World, } = await import('miniplex/dist/miniplex.cjs.js');\nexport class MiniplexStorage extends Storage {\n    // declare inputs: Map<string, any> & string[];\n    constructor(storage, options) {\n        super({\n            ...(storage || {}),\n            actors: new Map(),\n            // components: new Map(),\n            components: null,\n            entities: new Map(),\n            // inputs: new Map(),\n            inputs: null,\n        }, options);\n        const { worldOptions = [], } = options;\n        this.world = storage?.world || new World(worldOptions);\n    }\n    destroyActor(id) {\n        return this.destroyId(this.actors, id);\n    }\n    destroyComponent(id, key) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            const prevValue = entity[key];\n            // delete entity[key]\n            this.world.removeComponent(entity, key);\n            // this.world.reindex(entity)\n            this.componentsIndex.remove(id, key);\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.remove(id, prevValue);\n                }\n                else {\n                    index.entities.remove(id, prevValue);\n                }\n            }\n        }\n    }\n    destroyEntity(id) {\n        return this.destroyId(this.entities, id);\n    }\n    destroyId(list, id) {\n        const entity = list.get(id);\n        if (entity) {\n            this.world.remove(entity);\n            list.delete(id);\n            return true;\n        }\n        return false;\n    }\n    fetchComponents(id) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            return entity;\n        }\n    }\n    fetchComponent(id, key) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            return entity[key];\n        }\n    }\n    getActors(query, pageSize) {\n        if (query !== null) {\n            return super.getActors(query, pageSize);\n        }\n        const actors = Array.from(this.actors.keys());\n        return paginate(actors, pageSize);\n    }\n    getComponents(query, pageSize) {\n        // const queryKeys = Object.keys(query);\n        // const entities = this.world.with(...queryKeys);\n        let ids;\n        if (query !== null) {\n            ids = query;\n        }\n        else {\n            const actors = Array.from(this.actors.keys());\n            const entities = Array.from(this.entities.keys());\n            ids = actors.concat(entities);\n        }\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const components = {};\n            for (let id of page) {\n                components[id] = this.actors.get(id) || this.entities.get(id);\n            }\n            return components;\n        });\n    }\n    getEntities(query, pageSize) {\n        if (query !== null) {\n            return super.getEntities(query, pageSize);\n        }\n        const entities = Array.from(this.entities.keys());\n        return paginate(entities, pageSize);\n    }\n    getInputs(query, pageSize) {\n        return super.getInputs(query, pageSize);\n    }\n    isActor(id) {\n        return this.actors.has(id);\n    }\n    isEntity(id) {\n        return this.entities.has(id);\n    }\n    setActors(actors) {\n        return super.setActors(actors);\n    }\n    setComponents(components) {\n        return super.setComponents(components);\n    }\n    setEntities(entities) {\n        return super.setEntities(entities);\n    }\n    setInputs(inputs) {\n        return super.setInputs(inputs);\n    }\n    storeActor(id) {\n        return this.storeId(this.actors, id);\n    }\n    storeComponent(id, key, value) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            const prevValue = entity[key];\n            // entity[key] = value\n            this.world.addComponent(entity, key, value);\n            // this.world.reindex(entity)\n            this.componentsIndex.set(id, key);\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.store(id, value, prevValue);\n                }\n                else {\n                    index.entities.store(id, value, prevValue);\n                }\n            }\n        }\n    }\n    storeEntity(id) {\n        return this.storeId(this.entities, id);\n    }\n    storeId(list, id) {\n        const entity = list.get(id);\n        if (!entity) {\n            list.set(id, entity);\n            this.world.add(entity);\n            return true;\n        }\n        return false;\n    }\n    storeInput(id, input, tick = Date.now()) {\n        return super.storeInput(id, input, tick);\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","window","global","self","this","World","MiniplexStorage","constructor","storage","options","super","actors","Map","components","entities","inputs","worldOptions","world","destroyActor","id","destroyId","destroyComponent","key","entity","get","prevValue","removeComponent","componentsIndex","remove","indexes","index","isActor","destroyEntity","list","delete","fetchComponents","fetchComponent","getActors","query","pageSize","Array","from","keys","paginate","getComponents","ids","concat","map","page","getEntities","getInputs","has","isEntity","setActors","setComponents","setEntities","setInputs","storeActor","storeId","storeComponent","value","addComponent","set","store","storeEntity","add","storeInput","input","tick","Date","now"],"sourceRoot":""}