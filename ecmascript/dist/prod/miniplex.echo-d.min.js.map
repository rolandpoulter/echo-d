{"version":3,"file":"miniplex.echo-d.min.js","mappings":"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","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/./lib/extra/storage/miniplex.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","import { Storage,\n// Types\n } from '../../storage.js';\nimport { paginate, now } from '../../utils.js';\nconst { World, } = await import('miniplex/dist/miniplex.cjs.js');\nexport class MiniplexStorage extends Storage {\n    constructor(storage, options) {\n        super({\n            ...(storage || {}),\n            actors: new Map(),\n            // components: new Map(),\n            components: null,\n            entities: new Map(),\n            // inputs: new Map(),\n            inputs: null,\n        }, options);\n        const { worldOptions = [], world = null, } = options;\n        this.worldOptions = worldOptions;\n        this.world = world || new World();\n    }\n    derefEntity(id) {\n        if (this.actors.has(id)) {\n            return this.actors.get(id);\n        }\n        if (this.entities.has(id)) {\n            return this.entities.get(id);\n        }\n        return;\n    }\n    destroyActor(id) {\n        return this.destroyId(this.actors, id);\n    }\n    destroyComponent(id, key) {\n        const entity = this.derefEntity(id);\n        if (entity) {\n            const prevValue = entity[key];\n            // delete entity[key]\n            this.world.removeComponent(entity, key);\n            // this.world.reindex(entity)\n            this.removeComponentsIndex(id, key, prevValue);\n        }\n    }\n    destroyEntity(id) {\n        return this.destroyId(this.entities, id);\n    }\n    destroyId(list, id) {\n        const entity = list.get(id);\n        if (entity) {\n            this.world.remove(entity);\n            list.delete(id);\n            return true;\n        }\n        return false;\n    }\n    findComponents(id) {\n        const entity = this.derefEntity(id);\n        if (entity) {\n            return entity;\n        }\n    }\n    findComponent(id, key) {\n        const entity = this.derefEntity(id);\n        if (entity) {\n            return entity[key];\n        }\n    }\n    getActors(query = null, pageSize) {\n        if (query !== null) {\n            return super.getActors(query, pageSize);\n        }\n        const actors = Array.from(this.actors.keys());\n        return paginate(actors, pageSize);\n    }\n    getComponents(query = null, pageSize) {\n        // const queryKeys = Object.keys(query);\n        // const entities = this.world.with(...queryKeys);\n        let ids;\n        if (query !== null) {\n            ids = query;\n        }\n        else {\n            const actors = Array.from(this.actors.keys());\n            const entities = Array.from(this.entities.keys());\n            ids = actors.concat(entities);\n        }\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const components = {};\n            for (let id of page) {\n                components[id] = this.derefEntity(id);\n            }\n            return components;\n        });\n    }\n    getEntities(query = null, pageSize) {\n        if (query !== null) {\n            return super.getEntities(query, pageSize);\n        }\n        const entities = Array.from(this.entities.keys());\n        return paginate(entities, pageSize);\n    }\n    getInputs(query = null, pageSize) {\n        return super.getInputs(query, pageSize);\n    }\n    isActor(id) {\n        return this.actors.has(id);\n    }\n    isEntity(id) {\n        return this.entities.has(id);\n    }\n    setActors(actors) {\n        return super.setActors(actors);\n    }\n    setComponents(components) {\n        return super.setComponents(components);\n    }\n    setEntities(entities) {\n        return super.setEntities(entities);\n    }\n    setInputs(inputs) {\n        return super.setInputs(inputs);\n    }\n    storeActor(id) {\n        return this.storeId(this.actors, id);\n    }\n    storeComponent(id, key, value) {\n        const entity = this.derefEntity(id);\n        if (entity) {\n            const prevValue = entity[key];\n            this.world.addComponent(entity, key, value);\n            // this.world.reindex(entity)\n            this.updateComponentsIndex(id, key, prevValue, value);\n        }\n    }\n    storeEntity(id) {\n        return this.storeId(this.entities, id);\n    }\n    storeId(list, id) {\n        let entity = list.get(id);\n        if (!entity) {\n            entity = {};\n            list.set(id, entity);\n            this.world.add(entity);\n            return true;\n        }\n        return false;\n    }\n    storeInput(id, input, tick = now()) {\n        return super.storeInput(id, input, tick);\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","window","global","self","this","World","MiniplexStorage","constructor","storage","options","super","actors","Map","components","entities","inputs","worldOptions","world","derefEntity","id","has","get","destroyActor","destroyId","destroyComponent","key","entity","prevValue","removeComponent","removeComponentsIndex","destroyEntity","list","remove","delete","findComponents","findComponent","getActors","query","pageSize","Array","from","keys","paginate","getComponents","ids","concat","map","page","getEntities","getInputs","isActor","isEntity","setActors","setComponents","setEntities","setInputs","storeActor","storeId","storeComponent","value","addComponent","updateComponentsIndex","storeEntity","set","add","storeInput","input","tick","now"],"sourceRoot":""}