{"version":3,"file":"miniplex.echo-d.min.js","mappings":"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","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/./lib/extra/storage/miniplex.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","import { Storage } from '../../storage.js';\nimport { paginate, now } from '../../utils.js';\nconst { World, } = await import('miniplex/dist/miniplex.cjs.js');\nexport function defaultGetGroupedValue(value, i, types, key) {\n    const type = types[key];\n    if (Array.isArray(type)) {\n        return value.slice(i * type[1], (i + 1) * type[1]);\n    }\n    return value[i];\n}\nexport function defaultSetGroupedValue(value, _types, _key) {\n    return value;\n}\nexport class MiniplexStorage extends Storage {\n    constructor(storage, options) {\n        super({\n            ...(storage || {}),\n            actors: new Map(),\n            // components: new Map(),\n            components: null,\n            entities: new Map(),\n            // inputs: new Map(),\n            inputs: null,\n        }, options);\n        const { worldOptions = [], } = options;\n        this.worldOptions = worldOptions;\n        this.world = storage?.world || new World();\n    }\n    destroyActor(id) {\n        return this.destroyId(this.actors, id);\n    }\n    destroyComponent(id, key) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            const prevValue = entity[key];\n            // delete entity[key]\n            this.world.removeComponent(entity, key);\n            // this.world.reindex(entity)\n            this.componentsIndex.remove(id, key);\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.remove(id, prevValue);\n                }\n                else {\n                    index.entities.remove(id, prevValue);\n                }\n            }\n        }\n    }\n    destroyEntity(id) {\n        return this.destroyId(this.entities, id);\n    }\n    destroyId(list, id) {\n        const entity = list.get(id);\n        if (entity) {\n            this.world.remove(entity);\n            list.delete(id);\n            return true;\n        }\n        return false;\n    }\n    fetchComponents(id) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            return entity;\n        }\n    }\n    fetchComponent(id, key) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            return entity[key];\n        }\n    }\n    getActors(query = null, pageSize) {\n        if (query !== null) {\n            return super.getActors(query, pageSize);\n        }\n        const actors = Array.from(this.actors.keys());\n        return paginate(actors, pageSize);\n    }\n    getComponents(query = null, pageSize) {\n        // const queryKeys = Object.keys(query);\n        // const entities = this.world.with(...queryKeys);\n        let ids;\n        if (query !== null) {\n            ids = query;\n        }\n        else {\n            const actors = Array.from(this.actors.keys());\n            const entities = Array.from(this.entities.keys());\n            ids = actors.concat(entities);\n        }\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const components = {};\n            for (let id of page) {\n                components[id] = this.actors.get(id) || this.entities.get(id);\n            }\n            return components;\n        });\n    }\n    getEntities(query = null, pageSize) {\n        if (query !== null) {\n            return super.getEntities(query, pageSize);\n        }\n        const entities = Array.from(this.entities.keys());\n        return paginate(entities, pageSize);\n    }\n    getInputs(query = null, pageSize) {\n        return super.getInputs(query, pageSize);\n    }\n    isActor(id) {\n        return this.actors.has(id);\n    }\n    isEntity(id) {\n        return this.entities.has(id);\n    }\n    setActors(actors) {\n        return super.setActors(actors);\n    }\n    setComponents(components) {\n        return super.setComponents(components);\n    }\n    setEntities(entities) {\n        return super.setEntities(entities);\n    }\n    setInputs(inputs) {\n        return super.setInputs(inputs);\n    }\n    storeActor(id) {\n        return this.storeId(this.actors, id);\n    }\n    storeComponent(id, key, value) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            const prevValue = entity[key];\n            // entity[key] = value\n            this.world.addComponent(entity, key, value);\n            // this.world.reindex(entity)\n            this.componentsIndex.set(id, key);\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.store(id, value, prevValue);\n                }\n                else {\n                    index.entities.store(id, value, prevValue);\n                }\n            }\n        }\n    }\n    storeEntity(id) {\n        return this.storeId(this.entities, id);\n    }\n    storeId(list, id) {\n        let entity = list.get(id);\n        if (!entity) {\n            entity = {};\n            list.set(id, entity);\n            this.world.add(entity);\n            return true;\n        }\n        return false;\n    }\n    storeInput(id, input, tick = now()) {\n        return super.storeInput(id, input, tick);\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","window","global","self","this","World","defaultGetGroupedValue","value","i","types","key","type","Array","isArray","slice","defaultSetGroupedValue","_types","_key","MiniplexStorage","constructor","storage","options","super","actors","Map","components","entities","inputs","worldOptions","world","destroyActor","id","destroyId","destroyComponent","entity","get","prevValue","removeComponent","componentsIndex","remove","indexes","index","isActor","destroyEntity","list","delete","fetchComponents","fetchComponent","getActors","query","pageSize","from","keys","paginate","getComponents","ids","concat","map","page","getEntities","getInputs","has","isEntity","setActors","setComponents","setEntities","setInputs","storeActor","storeId","storeComponent","addComponent","set","store","storeEntity","add","storeInput","input","tick","now"],"sourceRoot":""}