{"version":3,"file":"bitecs.echo-d.min.js","mappings":"cAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAe,MAAID,IAEnBD,EAAY,MAAIC,GACjB,CATD,CASqB,oBAAXK,OAAyBA,OAA2B,oBAAXC,OAAyBA,OAAyB,oBAATC,KAAuBA,KAAOC,MAAM,K,6XCNhI,MAAM,YAAEC,EAAW,gBAEnBC,EAAe,gBAAEC,EAAe,aAAEC,SAKvB,6BACJ,MAAMC,UAAsB,KAC/BC,YAAYC,EAASC,GACjBC,MAAM,IACEF,GAAW,CAAC,EAChBG,OAAQ,IAAIC,IACZC,WAAY,IAAID,IAChBE,SAAU,IAAIF,IAEdG,OAAQ,MACTN,GACH,MAAM,aAGNO,GAAiBP,EACjBR,KAAKgB,MAAQT,GAASS,OAASf,EAAYc,GAC3Cf,KAAKiB,KAAOV,GAASU,MAAQ,IAAIN,IACjC,IAAK,IAAIO,KAAOlB,KAAKmB,MAAO,CACxB,MAAMC,EAAOpB,KAAKmB,MAAMD,GACxB,GAAuB,iBAAZE,EAAK,GACZpB,KAAKY,WAAWS,IAAIH,EAAKhB,EAAgBkB,EAAK,UAG9C,OAAQA,GACJ,KAAKE,QACL,KAAKC,OACL,KAAKC,OACDxB,KAAKY,WAAWS,IAAIH,EAAK,IAAIP,KAG7C,CAgBJ,CACAc,aAAaC,GACT,OAAO1B,KAAK2B,UAAU3B,KAAKU,OAAQgB,EACvC,CACAE,iBAAiBF,EAAIR,GACjB,MAAMW,EAAM7B,KAAKU,OAAOoB,IAAIJ,IAAO1B,KAAKa,SAASiB,IAAIJ,GAC/CK,EAAY/B,KAAKY,WAAWkB,IAAIZ,GACtC,IAAKW,IAAQE,EACT,OAEJ,MAAMC,EAAgB,KAClB,MAAMC,EAAYjC,KAAKkC,eAAeR,EAAIR,GAC1C,GAAIlB,KAAKmC,QAAQjB,GAAM,CACnB,MAAMkB,EAAQpC,KAAKmC,QAAQjB,GACvBlB,KAAKqC,QAAQX,GACbU,EAAM1B,OAAO4B,OAAOZ,EAAIO,GAGxBG,EAAMvB,SAASyB,OAAOZ,EAAIO,EAElC,GAEAF,aAAqBpB,KACNoB,EAAUD,IAAID,IAEzBE,EAAUQ,OAAOV,GAErBG,MAGA7B,EAAgBH,KAAKgB,MAAOe,EAAWF,GACvCG,IAER,CACAQ,cAAcd,GACV,OAAO1B,KAAK2B,UAAU3B,KAAKa,SAAUa,EACzC,CACAC,UAAUc,EAAMf,GACZ,MAAMG,EAAMY,EAAKX,IAAIJ,GACrB,QAAIG,IACAzB,EAAaJ,KAAKgB,MAAOa,GACzBY,EAAKF,OAAOb,IACL,EAGf,CACAgB,gBAAgBhB,GACZ,MAAMG,EAAM7B,KAAKU,OAAOoB,IAAIJ,IAAO1B,KAAKa,SAASiB,IAAIJ,GACrD,GAAKG,EAGL,OAAOA,CACX,CACAK,eAAeR,EAAIR,GACf,MAAMW,EAAM7B,KAAKU,OAAOoB,IAAIJ,IAAO1B,KAAKa,SAASiB,IAAIJ,GAC/CK,EAAY/B,KAAKY,WAAWkB,IAAIZ,GACtC,GAAKW,GAAQE,EAAb,CAGA,GAAIA,aAAqBpB,IACrB,OAAOoB,EAAUD,IAAID,GAEpB,CACD,MAAMT,EAAOpB,KAAKmB,MAAMD,GAClByB,EAASvB,EAAK,GAGdwB,EAAQ,IAFD,QAAexB,EAAK,IAEnB,CADDA,EAAK,IAElB,IAAIyB,EAAI,EACR,IAAK,IAAIC,KAAQH,EACbC,EAAMC,GAAKd,EAAUe,GAAMjB,GAC3BgB,IAEJ,OAAOD,CACX,CAhBA,CAiBJ,CACAG,UAAUC,EAAOC,GACb,GAAc,OAAVD,EACA,OAAOvC,MAAMsC,UAAUC,EAAOC,GAElC,MAAMvC,EAASwC,MAAMC,KAAKnD,KAAKU,OAAO0C,QACtC,OAAO,IAAAC,UAAS3C,EAAQuC,EAC5B,CACAK,cAAcN,EAAOC,GAGjB,IAAIM,EACJ,GAAc,OAAVP,EACAO,EAAMP,MAEL,CACD,MAAMtC,EAASwC,MAAMC,KAAKnD,KAAKU,OAAO0C,QAChCvC,EAAWqC,MAAMC,KAAKnD,KAAKa,SAASuC,QAC1CG,EAAM7C,EAAO8C,OAAO3C,EACxB,CAEA,OADc,IAAAwC,UAASE,EAAKN,GACfQ,KAAKC,IACd,MAAM9C,EAAa,CAAC,EACpB,IAAK,IAAIc,KAAMgC,EACX9C,EAAWc,GAAM1B,KAAKU,OAAOoB,IAAIJ,IAAO1B,KAAKa,SAASiB,IAAIJ,GAE9D,OAAOd,CAAU,GAEzB,CACA+C,YAAYX,EAAOC,GACf,GAAc,OAAVD,EACA,OAAOvC,MAAMkD,YAAYX,EAAOC,GAEpC,MAAMpC,EAAWqC,MAAMC,KAAKnD,KAAKa,SAASuC,QAC1C,OAAO,IAAAC,UAASxC,EAAUoC,EAC9B,CACAW,UAAUZ,EAAOC,GACb,OAAOxC,MAAMmD,UAAUZ,EAAOC,EAClC,CACAZ,QAAQX,GACJ,OAAO1B,KAAKU,OAAOmD,IAAInC,EAC3B,CACAoC,SAASpC,GACL,OAAO1B,KAAKa,SAASgD,IAAInC,EAC7B,CACAqC,UAAUrD,GACN,OAAOD,MAAMsD,UAAUrD,EAC3B,CACAsD,cAAcpD,GACV,OAAOH,MAAMuD,cAAcpD,EAC/B,CACAqD,YAAYpD,GACR,OAAOJ,MAAMwD,YAAYpD,EAC7B,CACAqD,UAAUpD,GACN,OAAOL,MAAMyD,UAAUpD,EAC3B,CACAqD,WAAWzC,GACP,OAAO1B,KAAKoE,QAAQpE,KAAKU,OAAQgB,EACrC,CACA2C,eAAe3C,EAAIR,EAAK0B,GACpB,MAAM0B,EAAStE,KAAKU,OAAOoB,IAAIJ,IAAO1B,KAAKa,SAASiB,IAAIJ,GACxD,GAAI4C,EAAQ,CACR,MAAMrC,EAAYqC,EAAOpD,GAGnByB,EADO3C,KAAKmB,MAAMD,GACJ,GACdqD,EAAY,CAAC,EACnB,IAAI1B,EAAI,EACR,IAAK,IAAIC,KAAQH,EACb4B,EAAUzB,GAAQF,EAAMC,GACxBA,IAIJ,GAFA7C,KAAKgB,MAAMwD,aAAaF,EAAQpD,EAAKqD,GAEjCvE,KAAKmC,QAAQjB,GAAM,CACnB,MAAMkB,EAAQpC,KAAKmC,QAAQjB,GACvBlB,KAAKqC,QAAQX,IACbU,EAAM1B,OAAO4B,OAAOZ,EAAIO,GACxBG,EAAM1B,OAAOW,IAAIK,EAAIkB,KAGrBR,EAAMvB,SAASyB,OAAOZ,EAAIO,GAC1BG,EAAMvB,SAASQ,IAAIK,EAAIkB,GAE/B,CACJ,CACJ,CACA6B,YAAY/C,GACR,OAAO1B,KAAKoE,QAAQpE,KAAKa,SAAUa,EACvC,CACA0C,QAAQ3B,EAAMf,GACV,MAAM4C,EAAS7B,EAAKX,IAAIJ,GACxB,OAAK4C,IACD7B,EAAKpB,IAAIK,EAAI4C,GACbtE,KAAKgB,MAAM0D,IAAIJ,IACR,EAGf,CACAK,WAAWjD,EAAIkD,EAAOC,EAAOC,KAAKC,OAC9B,OAAOtE,MAAMkE,WAAWjD,EAAIkD,EAAOC,EACvC,E","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/./lib/extra/storage/bitecs.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","import { Storage } from '../../storage.js';\nimport { ArrayTypes } from '../../types.js';\nimport { paginate } from '../../utils.js';\nconst { createWorld, \n// Types,\ndefineComponent, removeComponent, removeEntity,\n// defineQuery,\n// addEntity,\n// addComponent,\n// pipe,\n } = await import('bitecs');\nexport class BitECSStorage extends Storage {\n    constructor(storage, options) {\n        super({\n            ...(storage || {}),\n            actors: new Map(),\n            components: new Map(),\n            entities: new Map(),\n            // inputs: new Map(),\n            inputs: null,\n        }, options);\n        const { \n        // types,\n        // indexes,\n        worldOptions } = options;\n        this.world = storage?.world || createWorld(worldOptions);\n        this.eids = storage?.eids || new Map();\n        for (let key in this.types) {\n            const type = this.types[key];\n            if (typeof type[0] === 'string') {\n                this.components.set(key, defineComponent(type[2]));\n            }\n            else\n                switch (type) {\n                    case Boolean:\n                    case Number:\n                    case String:\n                        this.components.set(key, new Map());\n                        break;\n                }\n        }\n        /*\n        for (let key in this.actors) {\n            this.eids.set(key, addEntity(this.world));\n        }\n\n        for (let key in this.entities) {\n            this.eids.set(key, addEntity(this.world));\n        }\n\n        for (let key in this.components) {\n            for (let id in this.components[key]) {\n                addComponent(this.world, this.components[key][id], this.ids[id]);\n            }\n        }\n        */\n    }\n    destroyActor(id) {\n        return this.destroyId(this.actors, id);\n    }\n    destroyComponent(id, key) {\n        const eid = this.actors.get(id) || this.entities.get(id);\n        const Component = this.components.get(key);\n        if (!eid || !Component) {\n            return;\n        }\n        const updateIndexes = () => {\n            const prevValue = this.fetchComponent(id, key);\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.remove(id, prevValue);\n                }\n                else {\n                    index.entities.remove(id, prevValue);\n                }\n            }\n        };\n        if (Component instanceof Map) {\n            const entity = Component.get(eid);\n            if (entity) {\n                Component.delete(eid);\n            }\n            updateIndexes();\n        }\n        else {\n            removeComponent(this.world, Component, eid);\n            updateIndexes();\n        }\n    }\n    destroyEntity(id) {\n        return this.destroyId(this.entities, id);\n    }\n    destroyId(list, id) {\n        const eid = list.get(id);\n        if (eid) {\n            removeEntity(this.world, eid);\n            list.delete(id);\n            return true;\n        }\n        return false;\n    }\n    fetchComponents(id) {\n        const eid = this.actors.get(id) || this.entities.get(id);\n        if (!eid) {\n            return;\n        }\n        return eid;\n    }\n    fetchComponent(id, key) {\n        const eid = this.actors.get(id) || this.entities.get(id);\n        const Component = this.components.get(key);\n        if (!eid || !Component) {\n            return;\n        }\n        if (Component instanceof Map) {\n            return Component.get(eid);\n        }\n        else {\n            const type = this.types[key];\n            const schema = type[3];\n            const Type = ArrayTypes.get(type[0]);\n            const size = type[1];\n            const value = new Type(size);\n            let i = 0;\n            for (let prop in schema) {\n                value[i] = Component[prop][eid];\n                i++;\n            }\n            return value;\n        }\n    }\n    getActors(query, pageSize) {\n        if (query !== null) {\n            return super.getActors(query, pageSize);\n        }\n        const actors = Array.from(this.actors.keys());\n        return paginate(actors, pageSize);\n    }\n    getComponents(query, pageSize) {\n        // const queryKeys = Object.keys(query);\n        // const entities = this.world.with(...queryKeys);\n        let ids;\n        if (query !== null) {\n            ids = query;\n        }\n        else {\n            const actors = Array.from(this.actors.keys());\n            const entities = Array.from(this.entities.keys());\n            ids = actors.concat(entities);\n        }\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const components = {};\n            for (let id of page) {\n                components[id] = this.actors.get(id) || this.entities.get(id);\n            }\n            return components;\n        });\n    }\n    getEntities(query, pageSize) {\n        if (query !== null) {\n            return super.getEntities(query, pageSize);\n        }\n        const entities = Array.from(this.entities.keys());\n        return paginate(entities, pageSize);\n    }\n    getInputs(query, pageSize) {\n        return super.getInputs(query, pageSize);\n    }\n    isActor(id) {\n        return this.actors.has(id);\n    }\n    isEntity(id) {\n        return this.entities.has(id);\n    }\n    setActors(actors) {\n        return super.setActors(actors);\n    }\n    setComponents(components) {\n        return super.setComponents(components);\n    }\n    setEntities(entities) {\n        return super.setEntities(entities);\n    }\n    setInputs(inputs) {\n        return super.setInputs(inputs);\n    }\n    storeActor(id) {\n        return this.storeId(this.actors, id);\n    }\n    storeComponent(id, key, value) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            const prevValue = entity[key];\n            // entity[key] = value\n            const type = this.types[key];\n            const schema = type[3];\n            const component = {};\n            let i = 0;\n            for (let prop in schema) {\n                component[prop] = value[i];\n                i++;\n            }\n            this.world.addComponent(entity, key, component);\n            // this.world.reindex(entity)\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.remove(id, prevValue);\n                    index.actors.set(id, value);\n                }\n                else {\n                    index.entities.remove(id, prevValue);\n                    index.entities.set(id, value);\n                }\n            }\n        }\n    }\n    storeEntity(id) {\n        return this.storeId(this.entities, id);\n    }\n    storeId(list, id) {\n        const entity = list.get(id);\n        if (!entity) {\n            list.set(id, entity);\n            this.world.add(entity);\n            return true;\n        }\n        return false;\n    }\n    storeInput(id, input, tick = Date.now()) {\n        return super.storeInput(id, input, tick);\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","window","global","self","this","createWorld","defineComponent","removeComponent","removeEntity","BitECSStorage","constructor","storage","options","super","actors","Map","components","entities","inputs","worldOptions","world","eids","key","types","type","set","Boolean","Number","String","destroyActor","id","destroyId","destroyComponent","eid","get","Component","updateIndexes","prevValue","fetchComponent","indexes","index","isActor","remove","delete","destroyEntity","list","fetchComponents","schema","value","i","prop","getActors","query","pageSize","Array","from","keys","paginate","getComponents","ids","concat","map","page","getEntities","getInputs","has","isEntity","setActors","setComponents","setEntities","setInputs","storeActor","storeId","storeComponent","entity","component","addComponent","storeEntity","add","storeInput","input","tick","Date","now"],"sourceRoot":""}