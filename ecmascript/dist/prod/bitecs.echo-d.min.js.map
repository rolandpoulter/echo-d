{"version":3,"file":"bitecs.echo-d.min.js","mappings":"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","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/./lib/extra/storage/bitecs.js","webpack://echoD/./node_modules/.deno/bitecs@0.3.40/node_modules/bitecs/dist/index.mjs"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","import { hasComponent } from 'bitecs';\nimport { Storage,\n// Types\n } from '../../storage.js';\nimport { ArrayTypes } from '../../types.js';\nimport { paginate } from '../../utils.js';\n// interface WorldOptions {\n//     defs: any[];\n//     [key: string]: any;\n// }\nconst bitecs = await import('bitecs');\nconst { createWorld, \n// Types,\ndefineComponent, removeComponent, removeEntity, \n// defineQuery,\nentityExists, addEntity, addComponent, \n// getEntityComponents,\nresetWorld, deleteWorld,\n// pipe,\n } = bitecs;\nexport class BitECSStorage extends Storage {\n    // declare eids: Map<string, any>;\n    constructor(storage, options) {\n        super({\n            ...(storage || {}),\n            actors: new Map(),\n            components: new Map(),\n            entities: new Map(),\n            // inputs: new Map(),\n            inputs: null,\n        }, options);\n        for (let key in this.types) {\n            const type = this.types[key];\n            if (typeof type[0] === 'string') {\n                this.components.set(key, type[2] || defineComponent(type[3], type[4]));\n            }\n            else\n                switch (type) {\n                    case Boolean:\n                    case Number:\n                    case String:\n                        this.components.set(key, new Map());\n                        break;\n                }\n        }\n        let { \n        // types,\n        // indexes,\n        worldOptions, world, } = options;\n        this.worldOptions = worldOptions;\n        this.world = world || createWorld(); // worldOptions);\n        /*\n        this.eids = storage?.eids || new Map();\n        \n        for (let key in this.actors) {\n            this.eids.set(key, addEntity(this.world));\n        }\n\n        for (let key in this.entities) {\n            this.eids.set(key, addEntity(this.world));\n        }\n\n        for (let key in this.components) {\n            for (let id in this.components[key]) {\n                addComponent(this.world, this.components[key][id], this.ids[id]);\n            }\n        }\n        */\n    }\n    cleanup(reset = false) {\n        resetWorld(this.world);\n        deleteWorld(this.world);\n        if (reset && bitecs.resetGlobals) {\n            bitecs.resetGlobals();\n        }\n    }\n    derefEntityId(id) {\n        if (this.actors.has(id)) {\n            return this.actors.get(id);\n        }\n        if (this.entities.has(id)) {\n            return this.entities.get(id);\n        }\n        return;\n    }\n    destroyActor(id) {\n        return this.destroyId(this.actors, id);\n    }\n    destroyComponent(id, key) {\n        const eid = this.derefEntityId(id);\n        const Component = this.components.get(key);\n        if ((eid === undefined || eid === null) || !Component) {\n            return;\n        }\n        const updateIndexes = () => {\n            const prevValue = this.findComponentProcess(id, key, Component, eid);\n            this.removeComponentsIndex(id, key, prevValue);\n        };\n        if (Component instanceof Map) {\n            if (Component.has(eid)) {\n                Component.delete(eid);\n            }\n            updateIndexes();\n        }\n        else {\n            if (entityExists(this.world, eid)) {\n                if (hasComponent(this.world, Component, eid)) {\n                    removeComponent(this.world, Component, eid);\n                }\n            }\n            updateIndexes();\n        }\n    }\n    destroyEntity(id) {\n        return this.destroyId(this.entities, id);\n    }\n    destroyId(list, id) {\n        const eid = list.get(id);\n        if (eid !== null && eid !== undefined) {\n            if (entityExists(this.world, eid)) {\n                removeEntity(this.world, eid);\n            }\n            if (list.has(id)) {\n                list.delete(id);\n            }\n            return true;\n        }\n        return false;\n    }\n    findComponents(id) {\n        const eid = this.derefEntityId(id);\n        if (eid !== null && eid !== undefined) {\n            return;\n        }\n        return eid;\n    }\n    findComponent(id, key) {\n        const _ = undefined;\n        return this.findComponentProcess(id, key, _, _);\n    }\n    findComponentProcess(id, key, eid, Component) {\n        eid = (eid === undefined || eid === null) ? this.derefEntityId(id) : eid;\n        Component = Component || this.components.get(key);\n        if (eid === null || eid === undefined || !Component) {\n            return;\n        }\n        if (Component instanceof Map) {\n            return Component.get(eid);\n        }\n        else {\n            const type = this.types[key];\n            const schema = type[3];\n            const Type = ArrayTypes.get(type[0]);\n            const size = type[1];\n            const value = new Type(size);\n            let i = 0;\n            for (let prop in schema) {\n                value[i] = Component[prop][eid];\n                i++;\n            }\n            return value;\n        }\n    }\n    getActors(query = null, pageSize) {\n        if (query !== null) {\n            return super.getActors(query, pageSize);\n        }\n        const actors = this.actors.keys();\n        return paginate(actors, pageSize);\n    }\n    getComponents(query = null, pageSize) {\n        // const queryKeys = Object.keys(query);\n        // const entities = this.world.with(...queryKeys);\n        let ids;\n        if (query !== null) {\n            ids = query;\n        }\n        else {\n            const actors = this.actors.keys();\n            const entities = this.entities.keys();\n            ids = [\n                ...actors,\n                ...entities\n            ];\n        }\n        const pages = paginate(ids, pageSize);\n        const _ = undefined;\n        return pages.map((page) => {\n            const components = {};\n            for (let id of page) {\n                const eid = this.derefEntityId(id);\n                if (eid === undefined || eid === null) {\n                    continue;\n                }\n                const entity = {};\n                const compList = this.componentsIndex.get(id);\n                for (let key of compList) {\n                    entity[key] = this.findComponentProcess(id, key, eid, _);\n                }\n                components[id] = entity;\n            }\n            return components;\n        });\n    }\n    getEntities(query = null, pageSize) {\n        if (query !== null) {\n            return super.getEntities(query, pageSize);\n        }\n        const entities = this.entities.keys();\n        return paginate(entities, pageSize);\n    }\n    getInputs(query = null, pageSize) {\n        return super.getInputs(query, pageSize);\n    }\n    isActor(id) {\n        return this.actors.has(id);\n    }\n    isEntity(id) {\n        return this.entities.has(id);\n    }\n    setActors(actors) {\n        return super.setActors(actors);\n    }\n    setComponents(components) {\n        return super.setComponents(components);\n    }\n    setEntities(entities) {\n        return super.setEntities(entities);\n    }\n    setInputs(inputs) {\n        return super.setInputs(inputs);\n    }\n    storeActor(id) {\n        return this.storeId(this.actors, id);\n    }\n    storeComponent(id, key, value) {\n        let entity = this.derefEntityId(id);\n        if (entity !== null && entity !== undefined) {\n            if (!entityExists(this.world, entity)) {\n                entity = addEntity(this.world);\n                if (this.isActor(id)) {\n                    this.actors.set(id, entity);\n                }\n                else {\n                    this.entities.set(id, entity);\n                }\n            }\n            const Component = this.components.get(key);\n            if (!Component) {\n                return;\n            }\n            if (!hasComponent(this.world, Component, entity)) {\n                addComponent(this.world, Component, entity);\n            }\n            let prevValue = []; // TODO: create an array or object based on the type\n            if (Component instanceof Map) {\n                prevValue = Component.get(entity);\n                Component.set(entity, value);\n            }\n            else {\n                const type = this.types[key];\n                const schema = type[3];\n                let i = 0;\n                for (let prop in schema) {\n                    prevValue[i] = Component[prop][entity];\n                    Component[prop][entity] = value[i];\n                    i++;\n                }\n            }\n            this.updateComponentsIndex(id, key, prevValue, value);\n        }\n    }\n    storeEntity(id) {\n        return this.storeId(this.entities, id);\n    }\n    storeId(list, id) {\n        let entity = list.get(id);\n        if (entity == null && entity == undefined) {\n            entity = addEntity(this.world);\n            list.set(id, entity);\n            return true;\n        }\n        else if (!entityExists(this.world, entity)) {\n            // list.delete(id);\n            entity = addEntity(this.world);\n            list.set(id, entity);\n            return true;\n        }\n        return false;\n    }\n    storeInput(id, input, tick = 0) {\n        return super.storeInput(id, input, tick);\n    }\n}\n","// src/Constants.js\nvar TYPES_ENUM = {\n  i8: \"i8\",\n  ui8: \"ui8\",\n  ui8c: \"ui8c\",\n  i16: \"i16\",\n  ui16: \"ui16\",\n  i32: \"i32\",\n  ui32: \"ui32\",\n  f32: \"f32\",\n  f64: \"f64\",\n  eid: \"eid\"\n};\nvar TYPES_NAMES = {\n  i8: \"Int8\",\n  ui8: \"Uint8\",\n  ui8c: \"Uint8Clamped\",\n  i16: \"Int16\",\n  ui16: \"Uint16\",\n  i32: \"Int32\",\n  ui32: \"Uint32\",\n  eid: \"Uint32\",\n  f32: \"Float32\",\n  f64: \"Float64\"\n};\nvar TYPES = {\n  i8: Int8Array,\n  ui8: Uint8Array,\n  ui8c: Uint8ClampedArray,\n  i16: Int16Array,\n  ui16: Uint16Array,\n  i32: Int32Array,\n  ui32: Uint32Array,\n  f32: Float32Array,\n  f64: Float64Array,\n  eid: Uint32Array\n};\nvar UNSIGNED_MAX = {\n  uint8: 2 ** 8,\n  uint16: 2 ** 16,\n  uint32: 2 ** 32\n};\n\n// src/Storage.js\nvar roundToMultiple = (mul) => (x) => Math.ceil(x / mul) * mul;\nvar roundToMultiple4 = roundToMultiple(4);\nvar $storeRef = Symbol(\"storeRef\");\nvar $storeSize = Symbol(\"storeSize\");\nvar $storeMaps = Symbol(\"storeMaps\");\nvar $storeFlattened = Symbol(\"storeFlattened\");\nvar $storeBase = Symbol(\"storeBase\");\nvar $storeType = Symbol(\"storeType\");\nvar $storeArrayElementCounts = Symbol(\"storeArrayElementCounts\");\nvar $storeSubarrays = Symbol(\"storeSubarrays\");\nvar $subarrayCursors = Symbol(\"subarrayCursors\");\nvar $subarray = Symbol(\"subarray\");\nvar $subarrayFrom = Symbol(\"subarrayFrom\");\nvar $subarrayTo = Symbol(\"subarrayTo\");\nvar $parentArray = Symbol(\"parentArray\");\nvar $tagStore = Symbol(\"tagStore\");\nvar $queryShadow = Symbol(\"queryShadow\");\nvar $serializeShadow = Symbol(\"serializeShadow\");\nvar $indexType = Symbol(\"indexType\");\nvar $indexBytes = Symbol(\"indexBytes\");\nvar $isEidType = Symbol(\"isEidType\");\nvar stores = {};\nvar resize = (ta, size) => {\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT);\n  const newTa = new ta.constructor(newBuffer);\n  newTa.set(ta, 0);\n  return newTa;\n};\nvar createShadow = (store, key) => {\n  if (!ArrayBuffer.isView(store)) {\n    const shadowStore = store[$parentArray].slice(0);\n    store[key] = store.map((_, eid) => {\n      const { length } = store[eid];\n      const start = length * eid;\n      const end = start + length;\n      return shadowStore.subarray(start, end);\n    });\n  } else {\n    store[key] = store.slice(0);\n  }\n};\nvar resetStoreFor = (store, eid) => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach((ta) => {\n      if (ArrayBuffer.isView(ta))\n        ta[eid] = 0;\n      else\n        ta[eid].fill(0);\n    });\n  }\n};\nvar createTypeStore = (type, length) => {\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT;\n  const buffer = new ArrayBuffer(totalBytes);\n  const store = new TYPES[type](buffer);\n  store[$isEidType] = type === TYPES_ENUM.eid;\n  return store;\n};\nvar parentArray = (store) => store[$parentArray];\nvar createArrayStore = (metadata, type, length) => {\n  const storeSize = metadata[$storeSize];\n  const store = Array(storeSize).fill(0);\n  store[$storeType] = type;\n  store[$isEidType] = type === TYPES_ENUM.eid;\n  const cursors = metadata[$subarrayCursors];\n  const indexType = length <= UNSIGNED_MAX.uint8 ? TYPES_ENUM.ui8 : length <= UNSIGNED_MAX.uint16 ? TYPES_ENUM.ui16 : TYPES_ENUM.ui32;\n  if (!length)\n    throw new Error(\"bitECS - Must define component array length\");\n  if (!TYPES[type])\n    throw new Error(`bitECS - Invalid component array property type ${type}`);\n  if (!metadata[$storeSubarrays][type]) {\n    const arrayElementCount = metadata[$storeArrayElementCounts][type];\n    const array = new TYPES[type](roundToMultiple4(arrayElementCount * storeSize));\n    array[$indexType] = TYPES_NAMES[indexType];\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT;\n    metadata[$storeSubarrays][type] = array;\n  }\n  const start = cursors[type];\n  const end = start + storeSize * length;\n  cursors[type] = end;\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end);\n  for (let eid = 0; eid < storeSize; eid++) {\n    const start2 = length * eid;\n    const end2 = start2 + length;\n    store[eid] = store[$parentArray].subarray(start2, end2);\n    store[eid][$indexType] = TYPES_NAMES[indexType];\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT;\n    store[eid][$subarray] = true;\n  }\n  return store;\n};\nvar isArrayType = (x) => Array.isArray(x) && typeof x[0] === \"string\" && typeof x[1] === \"number\";\nvar createStore = (schema, size) => {\n  const $store = Symbol(\"store\");\n  if (!schema || !Object.keys(schema).length) {\n    stores[$store] = {\n      [$storeSize]: size,\n      [$tagStore]: true,\n      [$storeBase]: () => stores[$store]\n    };\n    return stores[$store];\n  }\n  schema = JSON.parse(JSON.stringify(schema));\n  const arrayElementCounts = {};\n  const collectArrayElementCounts = (s) => {\n    const keys = Object.keys(s);\n    for (const k of keys) {\n      if (isArrayType(s[k])) {\n        if (!arrayElementCounts[s[k][0]])\n          arrayElementCounts[s[k][0]] = 0;\n        arrayElementCounts[s[k][0]] += s[k][1];\n      } else if (s[k] instanceof Object) {\n        collectArrayElementCounts(s[k]);\n      }\n    }\n  };\n  collectArrayElementCounts(schema);\n  const metadata = {\n    [$storeSize]: size,\n    [$storeMaps]: {},\n    [$storeSubarrays]: {},\n    [$storeRef]: $store,\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\n    [$storeFlattened]: [],\n    [$storeArrayElementCounts]: arrayElementCounts\n  };\n  if (schema instanceof Object && Object.keys(schema).length) {\n    const recursiveTransform = (a, k) => {\n      if (typeof a[k] === \"string\") {\n        a[k] = createTypeStore(a[k], size);\n        a[k][$storeBase] = () => stores[$store];\n        metadata[$storeFlattened].push(a[k]);\n      } else if (isArrayType(a[k])) {\n        const [type, length] = a[k];\n        a[k] = createArrayStore(metadata, type, length);\n        a[k][$storeBase] = () => stores[$store];\n        metadata[$storeFlattened].push(a[k]);\n      } else if (a[k] instanceof Object) {\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k]);\n      }\n      return a;\n    };\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata);\n    stores[$store][$storeBase] = () => stores[$store];\n    return stores[$store];\n  }\n};\n\n// src/Util.js\nvar SparseSet = () => {\n  const dense = [];\n  const sparse = [];\n  dense.sort = function(comparator) {\n    const result = Array.prototype.sort.call(this, comparator);\n    for (let i = 0; i < dense.length; i++) {\n      sparse[dense[i]] = i;\n    }\n    return result;\n  };\n  const has = (val) => dense[sparse[val]] === val;\n  const add = (val) => {\n    if (has(val))\n      return;\n    sparse[val] = dense.push(val) - 1;\n  };\n  const remove = (val) => {\n    if (!has(val))\n      return;\n    const index = sparse[val];\n    const swapped = dense.pop();\n    if (swapped !== val) {\n      dense[index] = swapped;\n      sparse[swapped] = index;\n    }\n  };\n  const reset = () => {\n    dense.length = 0;\n    sparse.length = 0;\n  };\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n    reset\n  };\n};\n\n// src/Serialize.js\nvar DESERIALIZE_MODE = {\n  REPLACE: 0,\n  APPEND: 1,\n  MAP: 2\n};\nvar resized = false;\nvar setSerializationResized = (v) => {\n  resized = v;\n};\nvar concat = (a, v) => a.concat(v);\nvar not = (fn) => (v) => !fn(v);\nvar storeFlattened = (c) => c[$storeFlattened];\nvar isFullComponent = storeFlattened;\nvar isProperty = not(isFullComponent);\nvar isModifier = (c) => typeof c === \"function\" && c[$modifier];\nvar isNotModifier = not(isModifier);\nvar isChangedModifier = (c) => isModifier(c) && c()[1] === \"changed\";\nvar isWorld = (w) => Object.getOwnPropertySymbols(w).includes($componentMap);\nvar fromModifierToComponent = (c) => c()[0];\nvar canonicalize = (target) => {\n  if (isWorld(target))\n    return [[], /* @__PURE__ */ new Map()];\n  const fullComponentProps = target.filter(isNotModifier).filter(isFullComponent).map(storeFlattened).reduce(concat, []);\n  const changedComponentProps = target.filter(isChangedModifier).map(fromModifierToComponent).filter(isFullComponent).map(storeFlattened).reduce(concat, []);\n  const props = target.filter(isNotModifier).filter(isProperty);\n  const changedProps = target.filter(isChangedModifier).map(fromModifierToComponent).filter(isProperty);\n  const componentProps = [...fullComponentProps, ...props, ...changedComponentProps, ...changedProps];\n  const allChangedProps = [...changedComponentProps, ...changedProps].reduce((map, prop) => {\n    const $ = Symbol();\n    createShadow(prop, $);\n    map.set(prop, $);\n    return map;\n  }, /* @__PURE__ */ new Map());\n  return [componentProps, allChangedProps];\n};\nvar defineSerializer = (target, maxBytes = 2e7) => {\n  const worldSerializer = isWorld(target);\n  let [componentProps, changedProps] = canonicalize(target);\n  const buffer = new ArrayBuffer(maxBytes);\n  const view = new DataView(buffer);\n  const entityComponentCache = /* @__PURE__ */ new Map();\n  return (ents) => {\n    if (resized) {\n      [componentProps, changedProps] = canonicalize(target);\n      resized = false;\n    }\n    if (worldSerializer) {\n      componentProps = [];\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened]);\n        else\n          componentProps.push(component);\n      });\n    }\n    let world;\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\n      world = ents;\n      ents = ents[$entityArray];\n    } else {\n      world = eidToWorld.get(ents[0]);\n    }\n    let where = 0;\n    if (!ents.length)\n      return buffer.slice(0, where);\n    const cache = /* @__PURE__ */ new Map();\n    for (let pid = 0; pid < componentProps.length; pid++) {\n      const prop = componentProps[pid];\n      const component = prop[$storeBase]();\n      const $diff = changedProps.get(prop);\n      const shadow = $diff ? prop[$diff] : null;\n      if (!cache.has(component))\n        cache.set(component, /* @__PURE__ */ new Map());\n      view.setUint8(where, pid);\n      where += 1;\n      const countWhere = where;\n      where += 4;\n      let writeCount = 0;\n      for (let i = 0; i < ents.length; i++) {\n        const eid = ents[i];\n        let componentCache = entityComponentCache.get(eid);\n        if (!componentCache)\n          componentCache = entityComponentCache.set(eid, /* @__PURE__ */ new Set()).get(eid);\n        componentCache.add(eid);\n        const newlyAddedComponent = shadow && cache.get(component).get(eid) || !componentCache.has(component) && hasComponent(world, component, eid);\n        cache.get(component).set(eid, newlyAddedComponent);\n        if (newlyAddedComponent) {\n          componentCache.add(component);\n        } else if (!hasComponent(world, component, eid)) {\n          componentCache.delete(component);\n          continue;\n        }\n        const rewindWhere = where;\n        view.setUint32(where, eid);\n        where += 4;\n        if (prop[$tagStore]) {\n          writeCount++;\n          continue;\n        }\n        if (ArrayBuffer.isView(prop[eid])) {\n          const type = prop[eid].constructor.name.replace(\"Array\", \"\");\n          const indexType = prop[eid][$indexType];\n          const indexBytes = prop[eid][$indexBytes];\n          const countWhere2 = where;\n          where += indexBytes;\n          let arrayWriteCount = 0;\n          for (let i2 = 0; i2 < prop[eid].length; i2++) {\n            if (shadow) {\n              const changed = shadow[eid][i2] !== prop[eid][i2];\n              shadow[eid][i2] = prop[eid][i2];\n              if (!changed && !newlyAddedComponent) {\n                continue;\n              }\n            }\n            view[`set${indexType}`](where, i2);\n            where += indexBytes;\n            const value = prop[eid][i2];\n            view[`set${type}`](where, value);\n            where += prop[eid].BYTES_PER_ELEMENT;\n            arrayWriteCount++;\n          }\n          if (arrayWriteCount > 0) {\n            view[`set${indexType}`](countWhere2, arrayWriteCount);\n            writeCount++;\n          } else {\n            where = rewindWhere;\n            continue;\n          }\n        } else {\n          if (shadow) {\n            const changed = shadow[eid] !== prop[eid];\n            shadow[eid] = prop[eid];\n            if (!changed && !newlyAddedComponent) {\n              where = rewindWhere;\n              continue;\n            }\n          }\n          const type = prop.constructor.name.replace(\"Array\", \"\");\n          view[`set${type}`](where, prop[eid]);\n          where += prop.BYTES_PER_ELEMENT;\n          writeCount++;\n        }\n      }\n      if (writeCount > 0) {\n        view.setUint32(countWhere, writeCount);\n      } else {\n        where -= 5;\n      }\n    }\n    return buffer.slice(0, where);\n  };\n};\nvar newEntities = /* @__PURE__ */ new Map();\nvar defineDeserializer = (target) => {\n  const isWorld2 = Object.getOwnPropertySymbols(target).includes($componentMap);\n  let [componentProps] = canonicalize(target);\n  const deserializedEntities = /* @__PURE__ */ new Set();\n  return (world, packet, mode = 0) => {\n    newEntities.clear();\n    if (resized) {\n      [componentProps] = canonicalize(target);\n      resized = false;\n    }\n    if (isWorld2) {\n      componentProps = [];\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened]);\n        else\n          componentProps.push(component);\n      });\n    }\n    const localEntities = world[$localEntities];\n    const localEntityLookup = world[$localEntityLookup];\n    const view = new DataView(packet);\n    let where = 0;\n    while (where < packet.byteLength) {\n      const pid = view.getUint8(where);\n      where += 1;\n      const entityCount = view.getUint32(where);\n      where += 4;\n      const prop = componentProps[pid];\n      for (let i = 0; i < entityCount; i++) {\n        let eid = view.getUint32(where);\n        where += 4;\n        if (mode === DESERIALIZE_MODE.MAP) {\n          if (localEntities.has(eid)) {\n            eid = localEntities.get(eid);\n          } else if (newEntities.has(eid)) {\n            eid = newEntities.get(eid);\n          } else {\n            const newEid = addEntity(world);\n            localEntities.set(eid, newEid);\n            localEntityLookup.set(newEid, eid);\n            newEntities.set(eid, newEid);\n            eid = newEid;\n          }\n        }\n        if (mode === DESERIALIZE_MODE.APPEND || mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)) {\n          const newEid = newEntities.get(eid) || addEntity(world);\n          newEntities.set(eid, newEid);\n          eid = newEid;\n        }\n        const component = prop[$storeBase]();\n        if (!hasComponent(world, component, eid)) {\n          addComponent(world, component, eid);\n        }\n        deserializedEntities.add(eid);\n        if (component[$tagStore]) {\n          continue;\n        }\n        if (ArrayBuffer.isView(prop[eid])) {\n          const array = prop[eid];\n          const count = view[`get${array[$indexType]}`](where);\n          where += array[$indexBytes];\n          for (let i2 = 0; i2 < count; i2++) {\n            const index = view[`get${array[$indexType]}`](where);\n            where += array[$indexBytes];\n            const value = view[`get${array.constructor.name.replace(\"Array\", \"\")}`](where);\n            where += array.BYTES_PER_ELEMENT;\n            if (prop[$isEidType]) {\n              let localEid;\n              if (localEntities.has(value)) {\n                localEid = localEntities.get(value);\n              } else if (newEntities.has(value)) {\n                localEid = newEntities.get(value);\n              } else {\n                const newEid = addEntity(world);\n                localEntities.set(value, newEid);\n                localEntityLookup.set(newEid, value);\n                newEntities.set(value, newEid);\n                localEid = newEid;\n              }\n              prop[eid][index] = localEid;\n            } else\n              prop[eid][index] = value;\n          }\n        } else {\n          const value = view[`get${prop.constructor.name.replace(\"Array\", \"\")}`](where);\n          where += prop.BYTES_PER_ELEMENT;\n          if (prop[$isEidType]) {\n            let localEid;\n            if (localEntities.has(value)) {\n              localEid = localEntities.get(value);\n            } else if (newEntities.has(value)) {\n              localEid = newEntities.get(value);\n            } else {\n              const newEid = addEntity(world);\n              localEntities.set(value, newEid);\n              localEntityLookup.set(newEid, value);\n              newEntities.set(value, newEid);\n              localEid = newEid;\n            }\n            prop[eid] = localEid;\n          } else\n            prop[eid] = value;\n        }\n      }\n    }\n    const ents = Array.from(deserializedEntities);\n    deserializedEntities.clear();\n    return ents;\n  };\n};\n\n// src/Entity.js\nvar $entityMasks = Symbol(\"entityMasks\");\nvar $entityComponents = Symbol(\"entityComponents\");\nvar $entitySparseSet = Symbol(\"entitySparseSet\");\nvar $entityArray = Symbol(\"entityArray\");\nvar $entityIndices = Symbol(\"entityIndices\");\nvar $removedEntities = Symbol(\"removedEntities\");\nvar defaultSize = 1e5;\nvar globalEntityCursor = 0;\nvar globalSize = defaultSize;\nvar getGlobalSize = () => globalSize;\nvar removed = [];\nvar recycled = [];\nvar defaultRemovedReuseThreshold = 0.01;\nvar removedReuseThreshold = defaultRemovedReuseThreshold;\nvar resetGlobals = () => {\n  globalSize = defaultSize;\n  globalEntityCursor = 0;\n  removedReuseThreshold = defaultRemovedReuseThreshold;\n  removed.length = 0;\n  recycled.length = 0;\n};\nvar setDefaultSize = (newSize) => {\n  const oldSize = globalSize;\n  defaultSize = newSize;\n  resetGlobals();\n  globalSize = newSize;\n  resizeWorlds(newSize);\n  setSerializationResized(true);\n};\nvar setRemovedRecycleThreshold = (newThreshold) => {\n  removedReuseThreshold = newThreshold;\n};\nvar getEntityCursor = () => globalEntityCursor;\nvar eidToWorld = /* @__PURE__ */ new Map();\nvar flushRemovedEntities = (world) => {\n  if (!world[$manualEntityRecycling]) {\n    throw new Error(\"bitECS - cannot flush removed entities, enable feature with the enableManualEntityRecycling function\");\n  }\n  removed.push(...recycled);\n  recycled.length = 0;\n};\nvar addEntity = (world) => {\n  const eid = world[$manualEntityRecycling] ? removed.length ? removed.shift() : globalEntityCursor++ : removed.length > Math.round(globalSize * removedReuseThreshold) ? removed.shift() : globalEntityCursor++;\n  if (eid > world[$size])\n    throw new Error(\"bitECS - max entities reached\");\n  world[$entitySparseSet].add(eid);\n  eidToWorld.set(eid, world);\n  world[$notQueries].forEach((q) => {\n    const match = queryCheckEntity(world, q, eid);\n    if (match)\n      queryAddEntity(q, eid);\n  });\n  world[$entityComponents].set(eid, /* @__PURE__ */ new Set());\n  return eid;\n};\nvar removeEntity = (world, eid) => {\n  if (!world[$entitySparseSet].has(eid))\n    return;\n  world[$queries].forEach((q) => {\n    queryRemoveEntity(world, q, eid);\n  });\n  if (world[$manualEntityRecycling])\n    recycled.push(eid);\n  else\n    removed.push(eid);\n  world[$entitySparseSet].remove(eid);\n  world[$entityComponents].delete(eid);\n  world[$localEntities].delete(world[$localEntityLookup].get(eid));\n  world[$localEntityLookup].delete(eid);\n  for (let i = 0; i < world[$entityMasks].length; i++)\n    world[$entityMasks][i][eid] = 0;\n};\nvar getEntityComponents = (world, eid) => {\n  if (eid === void 0)\n    throw new Error(\"bitECS - entity is undefined.\");\n  if (!world[$entitySparseSet].has(eid))\n    throw new Error(\"bitECS - entity does not exist in the world.\");\n  return Array.from(world[$entityComponents].get(eid));\n};\nvar entityExists = (world, eid) => world[$entitySparseSet].has(eid);\n\n// src/Query.js\nvar $modifier = Symbol(\"$modifier\");\nfunction modifier(c, mod) {\n  const inner = () => [c, mod];\n  inner[$modifier] = true;\n  return inner;\n}\nvar Not = (c) => modifier(c, \"not\");\nvar Changed = (c) => modifier(c, \"changed\");\nfunction Any(...comps) {\n  return function QueryAny() {\n    return comps;\n  };\n}\nfunction All(...comps) {\n  return function QueryAll() {\n    return comps;\n  };\n}\nfunction None(...comps) {\n  return function QueryNone() {\n    return comps;\n  };\n}\nvar $queries = Symbol(\"queries\");\nvar $notQueries = Symbol(\"notQueries\");\nvar $queryAny = Symbol(\"queryAny\");\nvar $queryAll = Symbol(\"queryAll\");\nvar $queryNone = Symbol(\"queryNone\");\nvar $queryMap = Symbol(\"queryMap\");\nvar $dirtyQueries = Symbol(\"$dirtyQueries\");\nvar $queryComponents = Symbol(\"queryComponents\");\nvar $enterQuery = Symbol(\"enterQuery\");\nvar $exitQuery = Symbol(\"exitQuery\");\nvar empty = Object.freeze([]);\nvar enterQuery = (query) => (world) => {\n  if (!world[$queryMap].has(query))\n    registerQuery(world, query);\n  const q = world[$queryMap].get(query);\n  if (q.entered.dense.length === 0) {\n    return empty;\n  } else {\n    const results = q.entered.dense.slice();\n    q.entered.reset();\n    return results;\n  }\n};\nvar exitQuery = (query) => (world) => {\n  if (!world[$queryMap].has(query))\n    registerQuery(world, query);\n  const q = world[$queryMap].get(query);\n  if (q.exited.dense.length === 0) {\n    return empty;\n  } else {\n    const results = q.exited.dense.slice();\n    q.exited.reset();\n    return results;\n  }\n};\nvar registerQuery = (world, query) => {\n  const components2 = [];\n  const notComponents = [];\n  const changedComponents = [];\n  query[$queryComponents].forEach((c) => {\n    if (typeof c === \"function\" && c[$modifier]) {\n      const [comp, mod] = c();\n      if (!world[$componentMap].has(comp))\n        registerComponent(world, comp);\n      if (mod === \"not\") {\n        notComponents.push(comp);\n      }\n      if (mod === \"changed\") {\n        changedComponents.push(comp);\n        components2.push(comp);\n      }\n    } else {\n      if (!world[$componentMap].has(c))\n        registerComponent(world, c);\n      components2.push(c);\n    }\n  });\n  const mapComponents = (c) => world[$componentMap].get(c);\n  const allComponents = components2.concat(notComponents).map(mapComponents);\n  const sparseSet = SparseSet();\n  const archetypes = [];\n  const changed = [];\n  const toRemove = SparseSet();\n  const entered = SparseSet();\n  const exited = SparseSet();\n  const generations = allComponents.map((c) => c.generationId).reduce((a, v) => {\n    if (a.includes(v))\n      return a;\n    a.push(v);\n    return a;\n  }, []);\n  const reduceBitflags = (a, c) => {\n    if (!a[c.generationId])\n      a[c.generationId] = 0;\n    a[c.generationId] |= c.bitflag;\n    return a;\n  };\n  const masks = components2.map(mapComponents).reduce(reduceBitflags, {});\n  const notMasks = notComponents.map(mapComponents).reduce(reduceBitflags, {});\n  const hasMasks = allComponents.reduce(reduceBitflags, {});\n  const flatProps = components2.filter((c) => !c[$tagStore]).map((c) => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c]).reduce((a, v) => a.concat(v), []);\n  const shadows = [];\n  const q = Object.assign(sparseSet, {\n    archetypes,\n    changed,\n    components: components2,\n    notComponents,\n    changedComponents,\n    allComponents,\n    masks,\n    notMasks,\n    hasMasks,\n    generations,\n    flatProps,\n    toRemove,\n    entered,\n    exited,\n    shadows\n  });\n  world[$queryMap].set(query, q);\n  world[$queries].add(q);\n  allComponents.forEach((c) => {\n    c.queries.add(q);\n  });\n  if (notComponents.length)\n    world[$notQueries].add(q);\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\n    if (!world[$entitySparseSet].has(eid))\n      continue;\n    const match = queryCheckEntity(world, q, eid);\n    if (match)\n      queryAddEntity(q, eid);\n  }\n};\nvar generateShadow = (q, pid) => {\n  const $ = Symbol();\n  const prop = q.flatProps[pid];\n  createShadow(prop, $);\n  q.shadows[pid] = prop[$];\n  return prop[$];\n};\nvar diff = (q, clearDiff) => {\n  if (clearDiff)\n    q.changed = [];\n  const { flatProps, shadows } = q;\n  for (let i = 0; i < q.dense.length; i++) {\n    const eid = q.dense[i];\n    let dirty = false;\n    for (let pid = 0; pid < flatProps.length; pid++) {\n      const prop = flatProps[pid];\n      const shadow = shadows[pid] || generateShadow(q, pid);\n      if (ArrayBuffer.isView(prop[eid])) {\n        for (let i2 = 0; i2 < prop[eid].length; i2++) {\n          if (prop[eid][i2] !== shadow[eid][i2]) {\n            dirty = true;\n            break;\n          }\n        }\n        shadow[eid].set(prop[eid]);\n      } else {\n        if (prop[eid] !== shadow[eid]) {\n          dirty = true;\n          shadow[eid] = prop[eid];\n        }\n      }\n    }\n    if (dirty)\n      q.changed.push(eid);\n  }\n  return q.changed;\n};\nvar flatten = (a, v) => a.concat(v);\nvar aggregateComponentsFor = (mod) => (x) => x.filter((f) => f.name === mod().constructor.name).reduce(flatten);\nvar getAnyComponents = aggregateComponentsFor(Any);\nvar getAllComponents = aggregateComponentsFor(All);\nvar getNoneComponents = aggregateComponentsFor(None);\nvar defineQuery = (...args) => {\n  let components2;\n  let any, all, none;\n  if (Array.isArray(args[0])) {\n    components2 = args[0];\n  } else {\n  }\n  if (components2 === void 0 || components2[$componentMap] !== void 0) {\n    return (world) => world ? world[$entityArray] : components2[$entityArray];\n  }\n  const query = function(world, clearDiff = true) {\n    if (!world[$queryMap].has(query))\n      registerQuery(world, query);\n    const q = world[$queryMap].get(query);\n    commitRemovals(world);\n    if (q.changedComponents.length)\n      return diff(q, clearDiff);\n    return q.dense;\n  };\n  query[$queryComponents] = components2;\n  query[$queryAny] = any;\n  query[$queryAll] = all;\n  query[$queryNone] = none;\n  return query;\n};\nvar queryCheckEntity = (world, q, eid) => {\n  const { masks, notMasks, generations } = q;\n  let or = 0;\n  for (let i = 0; i < generations.length; i++) {\n    const generationId = generations[i];\n    const qMask = masks[generationId];\n    const qNotMask = notMasks[generationId];\n    const eMask = world[$entityMasks][generationId][eid];\n    if (qNotMask && (eMask & qNotMask) !== 0) {\n      return false;\n    }\n    if (qMask && (eMask & qMask) !== qMask) {\n      return false;\n    }\n  }\n  return true;\n};\nvar queryAddEntity = (q, eid) => {\n  q.toRemove.remove(eid);\n  q.entered.add(eid);\n  q.add(eid);\n};\nvar queryCommitRemovals = (q) => {\n  for (let i = q.toRemove.dense.length - 1; i >= 0; i--) {\n    const eid = q.toRemove.dense[i];\n    q.toRemove.remove(eid);\n    q.remove(eid);\n  }\n};\nvar commitRemovals = (world) => {\n  if (!world[$dirtyQueries].size)\n    return;\n  world[$dirtyQueries].forEach(queryCommitRemovals);\n  world[$dirtyQueries].clear();\n};\nvar queryRemoveEntity = (world, q, eid) => {\n  if (!q.has(eid) || q.toRemove.has(eid))\n    return;\n  q.toRemove.add(eid);\n  world[$dirtyQueries].add(q);\n  q.exited.add(eid);\n};\nvar resetChangedQuery = (world, query) => {\n  const q = world[$queryMap].get(query);\n  q.changed = [];\n};\nvar removeQuery = (world, query) => {\n  const q = world[$queryMap].get(query);\n  world[$queries].delete(q);\n  world[$queryMap].delete(query);\n};\n\n// src/Component.js\nvar $componentMap = Symbol(\"componentMap\");\nvar components = [];\nvar defineComponent = (schema, size) => {\n  const component = createStore(schema, size || getGlobalSize());\n  if (schema && Object.keys(schema).length)\n    components.push(component);\n  return component;\n};\nvar incrementBitflag = (world) => {\n  world[$bitflag] *= 2;\n  if (world[$bitflag] >= 2 ** 31) {\n    world[$bitflag] = 1;\n    world[$entityMasks].push(new Uint32Array(world[$size]));\n  }\n};\nvar registerComponent = (world, component) => {\n  if (!component)\n    throw new Error(`bitECS - Cannot register null or undefined component`);\n  const queries = /* @__PURE__ */ new Set();\n  const notQueries = /* @__PURE__ */ new Set();\n  const changedQueries = /* @__PURE__ */ new Set();\n  world[$queries].forEach((q) => {\n    if (q.allComponents.includes(component)) {\n      queries.add(q);\n    }\n  });\n  world[$componentMap].set(component, {\n    generationId: world[$entityMasks].length - 1,\n    bitflag: world[$bitflag],\n    store: component,\n    queries,\n    notQueries,\n    changedQueries\n  });\n  incrementBitflag(world);\n};\nvar registerComponents = (world, components2) => {\n  components2.forEach((c) => registerComponent(world, c));\n};\nvar hasComponent = (world, component, eid) => {\n  const registeredComponent = world[$componentMap].get(component);\n  if (!registeredComponent)\n    return false;\n  const { generationId, bitflag } = registeredComponent;\n  const mask = world[$entityMasks][generationId][eid];\n  return (mask & bitflag) === bitflag;\n};\nvar addComponent = (world, component, eid, reset = false) => {\n  if (eid === void 0)\n    throw new Error(\"bitECS - entity is undefined.\");\n  if (!world[$entitySparseSet].has(eid))\n    throw new Error(\"bitECS - entity does not exist in the world.\");\n  if (!world[$componentMap].has(component))\n    registerComponent(world, component);\n  if (hasComponent(world, component, eid))\n    return;\n  const c = world[$componentMap].get(component);\n  const { generationId, bitflag, queries, notQueries } = c;\n  world[$entityMasks][generationId][eid] |= bitflag;\n  queries.forEach((q) => {\n    q.toRemove.remove(eid);\n    const match = queryCheckEntity(world, q, eid);\n    if (match) {\n      q.exited.remove(eid);\n      queryAddEntity(q, eid);\n    }\n    if (!match) {\n      q.entered.remove(eid);\n      queryRemoveEntity(world, q, eid);\n    }\n  });\n  world[$entityComponents].get(eid).add(component);\n  if (reset)\n    resetStoreFor(component, eid);\n};\nvar removeComponent = (world, component, eid, reset = true) => {\n  if (eid === void 0)\n    throw new Error(\"bitECS - entity is undefined.\");\n  if (!world[$entitySparseSet].has(eid))\n    throw new Error(\"bitECS - entity does not exist in the world.\");\n  if (!hasComponent(world, component, eid))\n    return;\n  const c = world[$componentMap].get(component);\n  const { generationId, bitflag, queries } = c;\n  world[$entityMasks][generationId][eid] &= ~bitflag;\n  queries.forEach((q) => {\n    q.toRemove.remove(eid);\n    const match = queryCheckEntity(world, q, eid);\n    if (match) {\n      q.exited.remove(eid);\n      queryAddEntity(q, eid);\n    }\n    if (!match) {\n      q.entered.remove(eid);\n      queryRemoveEntity(world, q, eid);\n    }\n  });\n  world[$entityComponents].get(eid).delete(component);\n  if (reset)\n    resetStoreFor(component, eid);\n};\n\n// src/World.js\nvar $size = Symbol(\"size\");\nvar $resizeThreshold = Symbol(\"resizeThreshold\");\nvar $bitflag = Symbol(\"bitflag\");\nvar $archetypes = Symbol(\"archetypes\");\nvar $localEntities = Symbol(\"localEntities\");\nvar $localEntityLookup = Symbol(\"localEntityLookup\");\nvar $manualEntityRecycling = Symbol(\"manualEntityRecycling\");\nvar worlds = [];\nvar resizeWorlds = (size) => {\n  worlds.forEach((world) => {\n    world[$size] = size;\n    for (let i = 0; i < world[$entityMasks].length; i++) {\n      const masks = world[$entityMasks][i];\n      world[$entityMasks][i] = resize(masks, size);\n    }\n    world[$resizeThreshold] = world[$size] - world[$size] / 5;\n  });\n};\nvar createWorld = (...args) => {\n  const world = typeof args[0] === \"object\" ? args[0] : {};\n  const size = typeof args[0] === \"number\" ? args[0] : typeof args[1] === \"number\" ? args[1] : getGlobalSize();\n  resetWorld(world, size);\n  worlds.push(world);\n  return world;\n};\nvar enableManualEntityRecycling = (world) => {\n  world[$manualEntityRecycling] = true;\n};\nvar resetWorld = (world, size = getGlobalSize()) => {\n  world[$size] = size;\n  if (world[$entityArray])\n    world[$entityArray].forEach((eid) => removeEntity(world, eid));\n  world[$entityMasks] = [new Uint32Array(size)];\n  world[$entityComponents] = /* @__PURE__ */ new Map();\n  world[$archetypes] = [];\n  world[$entitySparseSet] = SparseSet();\n  world[$entityArray] = world[$entitySparseSet].dense;\n  world[$bitflag] = 1;\n  world[$componentMap] = /* @__PURE__ */ new Map();\n  world[$queryMap] = /* @__PURE__ */ new Map();\n  world[$queries] = /* @__PURE__ */ new Set();\n  world[$notQueries] = /* @__PURE__ */ new Set();\n  world[$dirtyQueries] = /* @__PURE__ */ new Set();\n  world[$localEntities] = /* @__PURE__ */ new Map();\n  world[$localEntityLookup] = /* @__PURE__ */ new Map();\n  world[$manualEntityRecycling] = false;\n  return world;\n};\nvar deleteWorld = (world) => {\n  Object.getOwnPropertySymbols(world).forEach(($) => {\n    delete world[$];\n  });\n  Object.keys(world).forEach((key) => {\n    delete world[key];\n  });\n  worlds.splice(worlds.indexOf(world), 1);\n};\nvar getWorldComponents = (world) => Array.from(world[$componentMap].keys());\nvar getAllEntities = (world) => world[$entitySparseSet].dense.slice(0);\n\n// src/System.js\nvar defineSystem = (update) => (world, ...args) => {\n  update(world, ...args);\n  return world;\n};\n\n// src/index.js\nvar pipe = (...fns) => (input) => {\n  let tmp = input;\n  for (let i = 0; i < fns.length; i++) {\n    const fn = fns[i];\n    tmp = fn(tmp);\n  }\n  return tmp;\n};\nvar Types = TYPES_ENUM;\nexport {\n  Changed,\n  DESERIALIZE_MODE,\n  Not,\n  Types,\n  addComponent,\n  addEntity,\n  commitRemovals,\n  createWorld,\n  defineComponent,\n  defineDeserializer,\n  defineQuery,\n  defineSerializer,\n  defineSystem,\n  deleteWorld,\n  enableManualEntityRecycling,\n  enterQuery,\n  entityExists,\n  exitQuery,\n  flushRemovedEntities,\n  getAllEntities,\n  getEntityComponents,\n  getWorldComponents,\n  hasComponent,\n  parentArray,\n  pipe,\n  registerComponent,\n  registerComponents,\n  removeComponent,\n  removeEntity,\n  removeQuery,\n  resetChangedQuery,\n  resetGlobals,\n  resetWorld,\n  setDefaultSize,\n  setRemovedRecycleThreshold\n};\n//# sourceMappingURL=index.mjs.map\n"],"names":["root","factory","exports","module","define","amd","window","global","self","this","bitecs","createWorld","defineComponent","removeComponent","removeEntity","entityExists","addEntity","addComponent","resetWorld","deleteWorld","BitECSStorage","constructor","storage","options","super","actors","Map","components","entities","inputs","key","types","type","set","Boolean","Number","String","worldOptions","world","cleanup","reset","resetGlobals","derefEntityId","id","has","get","destroyActor","destroyId","destroyComponent","eid","Component","updateIndexes","prevValue","findComponentProcess","removeComponentsIndex","delete","hasComponent","destroyEntity","list","findComponents","findComponent","_","undefined","schema","value","i","prop","getActors","query","pageSize","keys","paginate","getComponents","ids","map","page","entity","compList","componentsIndex","getEntities","getInputs","isActor","isEntity","setActors","setComponents","setEntities","setInputs","storeActor","storeId","storeComponent","updateComponentsIndex","storeEntity","storeInput","input","tick","TYPES_ENUM","i8","ui8","ui8c","i16","ui16","i32","ui32","f32","f64","TYPES_NAMES","TYPES","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","roundToMultiple4","x","Math","ceil","$storeRef","Symbol","$storeSize","$storeMaps","$storeFlattened","$storeBase","$storeType","$storeArrayElementCounts","$storeSubarrays","$subarrayCursors","$subarray","$parentArray","$tagStore","$indexType","$indexBytes","$isEidType","stores","resize","ta","size","newBuffer","ArrayBuffer","BYTES_PER_ELEMENT","newTa","createShadow","store","isView","slice","shadowStore","length","start","end","subarray","resetStoreFor","forEach","fill","parentArray","isArrayType","Array","isArray","SparseSet","dense","sparse","sort","comparator","result","prototype","call","val","add","push","remove","index","swapped","pop","DESERIALIZE_MODE","REPLACE","APPEND","MAP","resized","concat","a","v","not","fn","storeFlattened","c","isFullComponent","isProperty","isModifier","$modifier","isNotModifier","isChangedModifier","isWorld","w","Object","getOwnPropertySymbols","includes","$componentMap","fromModifierToComponent","canonicalize","target","fullComponentProps","filter","reduce","changedComponentProps","props","changedProps","$","defineSerializer","maxBytes","worldSerializer","componentProps","buffer","view","DataView","entityComponentCache","ents","component","$entityArray","eidToWorld","where","cache","pid","$diff","shadow","setUint8","countWhere","writeCount","componentCache","Set","newlyAddedComponent","rewindWhere","setUint32","name","replace","indexType","indexBytes","countWhere2","arrayWriteCount","i2","changed","newEntities","defineDeserializer","isWorld2","deserializedEntities","packet","mode","clear","localEntities","$localEntities","localEntityLookup","$localEntityLookup","byteLength","getUint8","entityCount","getUint32","newEid","$entitySparseSet","array","count","localEid","from","$entityMasks","$entityComponents","defaultSize","globalEntityCursor","globalSize","getGlobalSize","removed","recycled","removedReuseThreshold","setDefaultSize","newSize","resizeWorlds","setRemovedRecycleThreshold","newThreshold","flushRemovedEntities","$manualEntityRecycling","Error","shift","round","$size","$notQueries","q","queryCheckEntity","queryAddEntity","$queries","queryRemoveEntity","getEntityComponents","modifier","mod","inner","Not","Changed","$queryAny","$queryAll","$queryNone","$queryMap","$dirtyQueries","$queryComponents","empty","freeze","enterQuery","registerQuery","entered","results","exitQuery","exited","components2","notComponents","changedComponents","comp","registerComponent","mapComponents","allComponents","sparseSet","toRemove","generations","generationId","reduceBitflags","bitflag","masks","notMasks","hasMasks","flatProps","assign","archetypes","shadows","queries","generateShadow","flatten","aggregateComponentsFor","f","defineQuery","comps","args","clearDiff","commitRemovals","dirty","diff","any","all","none","qMask","qNotMask","eMask","queryCommitRemovals","resetChangedQuery","removeQuery","$store","JSON","parse","stringify","arrayElementCounts","collectArrayElementCounts","s","k","metadata","recursiveTransform","totalBytes","createTypeStore","storeSize","cursors","arrayElementCount","start2","end2","createArrayStore","createStore","notQueries","changedQueries","$bitflag","incrementBitflag","registerComponents","registeredComponent","match","$resizeThreshold","$archetypes","worlds","enableManualEntityRecycling","splice","indexOf","getWorldComponents","getAllEntities","defineSystem","update","pipe","fns","tmp","Types"],"sourceRoot":""}