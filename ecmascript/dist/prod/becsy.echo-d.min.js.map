{"version":3,"file":"becsy.echo-d.min.js","mappings":"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","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/./lib/extra/storage/becsy.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","import { Storage } from '../../storage.js';\nimport { paginate, now } from '../../utils.js';\nconst { \n// System,\n// Type,\nWorld } = await import('@lastolivegames/becsy/index.js');\nexport function defaultGetGroupedValue(value, i, types, key) {\n    const type = types[key];\n    if (Array.isArray(type)) {\n        return value.slice(i * type[1], (i + 1) * type[1]);\n    }\n    return value[i];\n}\nexport function defaultSetGroupedValue(value, _types, _key) {\n    return value;\n}\nexport class BecsyStorage extends Storage {\n    constructor(storage, options) {\n        super({\n            ...(storage || {}),\n            actors: new Map(),\n            components: new Map(),\n            entities: new Map(),\n            // inputs: new Map(),\n            inputs: null,\n        }, options);\n        let { \n        // types,\n        // indexes,\n        worldOptions } = options;\n        worldOptions = worldOptions || { defs: [] };\n        if (worldOptions && !worldOptions.defs) {\n            worldOptions.defs = [];\n        }\n        // if (!((worldOptions as WorldOptions).defs as any[]).length) {\n        //      for (let component of this.components.values()) {\n        //         if (!component) {\n        //             continue\n        //         }\n        //         if ((component as any) instanceof Map) {\n        //             continue\n        //         }\n        //         (worldOptions as WorldOptions).defs.push(component)\n        //     }\n        // }\n        this.worldOptions = worldOptions;\n        this.world = storage?.world || World.create(this.worldOptions);\n        this.eids = storage?.eids || new Map();\n        // for (let key in this.types) {\n        //     const type = this.types[key];\n        //     if (typeof type[0] === 'string') {\n        //         this.components.set(key, defineComponent(type[2]));\n        //     } else switch (type) {\n        //         case Boolean:\n        //         case Number:\n        //         case String:\n        //             this.components.set(key, new Map());\n        //             break;\n        //     }\n        // }\n        /*\n        for (let key in this.actors) {\n            this.eids.set(key, addEntity(this.world));\n        }\n\n        for (let key in this.entities) {\n            this.eids.set(key, addEntity(this.world));\n        }\n\n        for (let key in this.components) {\n            for (let id in this.components[key]) {\n                addComponent(this.world, this.components[key][id], this.ids[id]);\n            }\n        }\n        */\n    }\n    destroyActor(id) {\n        return this.destroyId(this.actors, id);\n    }\n    destroyComponent(id, key) {\n        const eid = this.actors.get(id) || this.entities.get(id);\n        const Component = this.components.get(key);\n        if (!eid || !Component) {\n            return;\n        }\n        const updateIndexes = () => {\n            const prevValue = this.fetchComponent(id, key);\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.remove(id, prevValue);\n                }\n                else {\n                    index.entities.remove(id, prevValue);\n                }\n            }\n        };\n        if (Component instanceof Map) {\n            const entity = Component.get(eid);\n            if (entity) {\n                Component.delete(eid);\n            }\n            updateIndexes();\n        }\n        else {\n            // removeComponent(this.world, Component, eid);\n            updateIndexes();\n        }\n    }\n    destroyEntity(id) {\n        return this.destroyId(this.entities, id);\n    }\n    destroyId(list, id) {\n        const eid = list.get(id);\n        if (eid) {\n            // removeEntity(this.world, eid);\n            list.delete(id);\n            return true;\n        }\n        return false;\n    }\n    fetchComponents(id) {\n        const eid = this.actors.get(id) || this.entities.get(id);\n        if (!eid) {\n            return;\n        }\n        return eid;\n    }\n    fetchComponent(id, key) {\n        const eid = this.actors.get(id) || this.entities.get(id);\n        const Component = this.components.get(key);\n        if (!eid || !Component) {\n            return;\n        }\n        if (Component instanceof Map) {\n            return Component.get(eid);\n        }\n        else {\n            // const type = this.types[key];\n            // const schema = type[3]\n            // const Type = ArrayTypes.get(type[0])\n            // const size = type[1]\n            // const value = new Type(size)\n            // let i = 0\n            // for (let prop in schema) {\n            //     // value[i] = Component[prop][eid]\n            //     i++\n            // }\n            // return value\n        }\n    }\n    getActors(query, pageSize) {\n        if (query !== null) {\n            return super.getActors(query, pageSize);\n        }\n        const actors = Array.from(this.actors.keys());\n        return paginate(actors, pageSize);\n    }\n    getComponents(query, pageSize) {\n        // const queryKeys = Object.keys(query);\n        // const entities = this.world.with(...queryKeys);\n        let ids;\n        if (query !== null) {\n            ids = query;\n        }\n        else {\n            const actors = Array.from(this.actors.keys());\n            const entities = Array.from(this.entities.keys());\n            ids = actors.concat(entities);\n        }\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const components = {};\n            for (let id of page) {\n                components[id] = this.actors.get(id) || this.entities.get(id);\n            }\n            return components;\n        });\n    }\n    getEntities(query, pageSize) {\n        if (query !== null) {\n            return super.getEntities(query, pageSize);\n        }\n        const entities = Array.from(this.entities.keys());\n        return paginate(entities, pageSize);\n    }\n    getInputs(query, pageSize) {\n        return super.getInputs(query, pageSize);\n    }\n    isActor(id) {\n        return this.actors.has(id);\n    }\n    isEntity(id) {\n        return this.entities.has(id);\n    }\n    setActors(actors) {\n        return super.setActors(actors);\n    }\n    setComponents(components) {\n        return super.setComponents(components);\n    }\n    setEntities(entities) {\n        return super.setEntities(entities);\n    }\n    setInputs(inputs) {\n        return super.setInputs(inputs);\n    }\n    storeActor(id) {\n        return this.storeId(this.actors, id);\n    }\n    storeComponent(id, key, value) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            const prevValue = entity[key];\n            // entity[key] = value\n            const type = this.types[key];\n            const schema = type[3];\n            const component = {};\n            let i = 0;\n            for (let prop in schema) {\n                component[prop] = value[i];\n                i++;\n            }\n            this.world.addComponent(entity, key, component);\n            // this.world.reindex(entity)\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.remove(id, prevValue);\n                    index.actors.set(id, value);\n                }\n                else {\n                    index.entities.remove(id, prevValue);\n                    index.entities.set(id, value);\n                }\n            }\n        }\n    }\n    storeEntity(id) {\n        return this.storeId(this.entities, id);\n    }\n    storeId(list, id) {\n        let entity = list.get(id);\n        if (!entity) {\n            console.log('GOT HERE BABY', this.world);\n            entity = this.world.createEntity(\n            // entity\n            );\n            list.set(id, entity);\n            return true;\n        }\n        return false;\n    }\n    storeInput(id, input, tick = now()) {\n        return super.storeInput(id, input, tick);\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","window","global","self","this","World","defaultGetGroupedValue","value","i","types","key","type","Array","isArray","slice","defaultSetGroupedValue","_types","_key","BecsyStorage","constructor","storage","options","super","actors","Map","components","entities","inputs","worldOptions","defs","world","create","eids","destroyActor","id","destroyId","destroyComponent","eid","get","Component","updateIndexes","prevValue","fetchComponent","indexes","index","isActor","remove","delete","destroyEntity","list","fetchComponents","getActors","query","pageSize","from","keys","paginate","getComponents","ids","concat","map","page","getEntities","getInputs","has","isEntity","setActors","setComponents","setEntities","setInputs","storeActor","storeId","storeComponent","entity","schema","component","prop","addComponent","set","storeEntity","console","log","createEntity","storeInput","input","tick","now"],"sourceRoot":""}