{"version":3,"file":"becsy.echo-d.min.js","mappings":"cAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAe,MAAID,IAEnBD,EAAY,MAAIC,GACjB,CATD,CASqB,oBAAXK,OAAyBA,OAA2B,oBAAXC,OAAyBA,OAAyB,oBAATC,KAAuBA,KAAOC,MAAM,K,mXCPhI,MAAM,MAGNC,SAAgB,6BACT,MAAMC,UAAqB,KAC9BC,YAAYC,EAASC,GACjBC,MAAM,IACEF,GAAW,CAAC,EAChBG,OAAQ,IAAIC,IACZC,WAAY,IAAID,IAChBE,SAAU,IAAIF,IAEdG,OAAQ,MACTN,GACH,MAAM,aAGNO,GAAiBP,EACjBL,KAAKa,MAAQT,GAASS,OAASZ,EAAMa,OAAOF,GAC5CZ,KAAKe,KAAOX,GAASW,MAAQ,IAAIP,GA4BrC,CACAQ,aAAaC,GACT,OAAOjB,KAAKkB,UAAUlB,KAAKO,OAAQU,EACvC,CACAE,iBAAiBF,EAAIG,GACjB,MAAMC,EAAMrB,KAAKO,OAAOe,IAAIL,IAAOjB,KAAKU,SAASY,IAAIL,GAC/CM,EAAYvB,KAAKS,WAAWa,IAAIF,GACtC,IAAKC,IAAQE,EACT,OAEJ,MAAMC,EAAgB,KAClB,MAAMC,EAAYzB,KAAK0B,eAAeT,EAAIG,GAC1C,GAAIpB,KAAK2B,QAAQP,GAAM,CACnB,MAAMQ,EAAQ5B,KAAK2B,QAAQP,GACvBpB,KAAK6B,QAAQZ,GACbW,EAAMrB,OAAOuB,OAAOb,EAAIQ,GAGxBG,EAAMlB,SAASoB,OAAOb,EAAIQ,EAElC,GAEAF,aAAqBf,KACNe,EAAUD,IAAID,IAEzBE,EAAUQ,OAAOV,GAErBG,KAIAA,GAER,CACAQ,cAAcf,GACV,OAAOjB,KAAKkB,UAAUlB,KAAKU,SAAUO,EACzC,CACAC,UAAUe,EAAMhB,GAEZ,QADYgB,EAAKX,IAAIL,KAGjBgB,EAAKF,OAAOd,IACL,EAGf,CACAiB,gBAAgBjB,GACZ,MAAMI,EAAMrB,KAAKO,OAAOe,IAAIL,IAAOjB,KAAKU,SAASY,IAAIL,GACrD,GAAKI,EAGL,OAAOA,CACX,CACAK,eAAeT,EAAIG,GACf,MAAMC,EAAMrB,KAAKO,OAAOe,IAAIL,IAAOjB,KAAKU,SAASY,IAAIL,GAC/CM,EAAYvB,KAAKS,WAAWa,IAAIF,GACtC,GAAKC,GAAQE,EAGb,OAAIA,aAAqBf,IACde,EAAUD,IAAID,QADzB,CAgBJ,CACAc,UAAUC,EAAOC,GACb,GAAc,OAAVD,EACA,OAAO9B,MAAM6B,UAAUC,EAAOC,GAElC,MAAM9B,EAAS+B,MAAMC,KAAKvC,KAAKO,OAAOiC,QACtC,OAAO,IAAAC,UAASlC,EAAQ8B,EAC5B,CACAK,cAAcN,EAAOC,GAGjB,IAAIM,EACJ,GAAc,OAAVP,EACAO,EAAMP,MAEL,CACD,MAAM7B,EAAS+B,MAAMC,KAAKvC,KAAKO,OAAOiC,QAChC9B,EAAW4B,MAAMC,KAAKvC,KAAKU,SAAS8B,QAC1CG,EAAMpC,EAAOqC,OAAOlC,EACxB,CAEA,OADc,IAAA+B,UAASE,EAAKN,GACfQ,KAAKC,IACd,MAAMrC,EAAa,CAAC,EACpB,IAAK,IAAIQ,KAAM6B,EACXrC,EAAWQ,GAAMjB,KAAKO,OAAOe,IAAIL,IAAOjB,KAAKU,SAASY,IAAIL,GAE9D,OAAOR,CAAU,GAEzB,CACAsC,YAAYX,EAAOC,GACf,GAAc,OAAVD,EACA,OAAO9B,MAAMyC,YAAYX,EAAOC,GAEpC,MAAM3B,EAAW4B,MAAMC,KAAKvC,KAAKU,SAAS8B,QAC1C,OAAO,IAAAC,UAAS/B,EAAU2B,EAC9B,CACAW,UAAUZ,EAAOC,GACb,OAAO/B,MAAM0C,UAAUZ,EAAOC,EAClC,CACAR,QAAQZ,GACJ,OAAOjB,KAAKO,OAAO0C,IAAIhC,EAC3B,CACAiC,SAASjC,GACL,OAAOjB,KAAKU,SAASuC,IAAIhC,EAC7B,CACAkC,UAAU5C,GACN,OAAOD,MAAM6C,UAAU5C,EAC3B,CACA6C,cAAc3C,GACV,OAAOH,MAAM8C,cAAc3C,EAC/B,CACA4C,YAAY3C,GACR,OAAOJ,MAAM+C,YAAY3C,EAC7B,CACA4C,UAAU3C,GACN,OAAOL,MAAMgD,UAAU3C,EAC3B,CACA4C,WAAWtC,GACP,OAAOjB,KAAKwD,QAAQxD,KAAKO,OAAQU,EACrC,CACAwC,eAAexC,EAAIG,EAAKsC,GACpB,MAAMC,EAAS3D,KAAKO,OAAOe,IAAIL,IAAOjB,KAAKU,SAASY,IAAIL,GACxD,GAAI0C,EAAQ,CACR,MAAMlC,EAAYkC,EAAOvC,GAGnBwC,EADO5D,KAAK6D,MAAMzC,GACJ,GACd0C,EAAY,CAAC,EACnB,IAAIC,EAAI,EACR,IAAK,IAAIC,KAAQJ,EACbE,EAAUE,GAAQN,EAAMK,GACxBA,IAIJ,GAFA/D,KAAKa,MAAMoD,aAAaN,EAAQvC,EAAK0C,GAEjC9D,KAAK2B,QAAQP,GAAM,CACnB,MAAMQ,EAAQ5B,KAAK2B,QAAQP,GACvBpB,KAAK6B,QAAQZ,IACbW,EAAMrB,OAAOuB,OAAOb,EAAIQ,GACxBG,EAAMrB,OAAO2D,IAAIjD,EAAIyC,KAGrB9B,EAAMlB,SAASoB,OAAOb,EAAIQ,GAC1BG,EAAMlB,SAASwD,IAAIjD,EAAIyC,GAE/B,CACJ,CACJ,CACAS,YAAYlD,GACR,OAAOjB,KAAKwD,QAAQxD,KAAKU,SAAUO,EACvC,CACAuC,QAAQvB,EAAMhB,GACV,MAAM0C,EAAS1B,EAAKX,IAAIL,GACxB,OAAK0C,IACD1B,EAAKiC,IAAIjD,EAAI0C,GACb3D,KAAKa,MAAMuD,IAAIT,IACR,EAGf,CACAU,WAAWpD,EAAIqD,EAAOC,EAAOC,KAAKC,OAC9B,OAAOnE,MAAM+D,WAAWpD,EAAIqD,EAAOC,EACvC,E","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/./lib/extra/storage/becsy.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","import { Storage } from '../../storage.js';\nimport { paginate } from '../../utils.js';\nconst { \n// System,\n// Type,\nWorld } = await import('@lastolivegames/becsy');\nexport class BecsyStorage extends Storage {\n    constructor(storage, options) {\n        super({\n            ...(storage || {}),\n            actors: new Map(),\n            components: new Map(),\n            entities: new Map(),\n            // inputs: new Map(),\n            inputs: null,\n        }, options);\n        const { \n        // types,\n        // indexes,\n        worldOptions } = options;\n        this.world = storage?.world || World.create(worldOptions);\n        this.eids = storage?.eids || new Map();\n        // for (let key in this.types) {\n        //     const type = this.types[key];\n        //     if (typeof type[0] === 'string') {\n        //         this.components.set(key, defineComponent(type[2]));\n        //     } else switch (type) {\n        //         case Boolean:\n        //         case Number:\n        //         case String:\n        //             this.components.set(key, new Map());\n        //             break;\n        //     }\n        // }\n        /*\n        for (let key in this.actors) {\n            this.eids.set(key, addEntity(this.world));\n        }\n\n        for (let key in this.entities) {\n            this.eids.set(key, addEntity(this.world));\n        }\n\n        for (let key in this.components) {\n            for (let id in this.components[key]) {\n                addComponent(this.world, this.components[key][id], this.ids[id]);\n            }\n        }\n        */\n    }\n    destroyActor(id) {\n        return this.destroyId(this.actors, id);\n    }\n    destroyComponent(id, key) {\n        const eid = this.actors.get(id) || this.entities.get(id);\n        const Component = this.components.get(key);\n        if (!eid || !Component) {\n            return;\n        }\n        const updateIndexes = () => {\n            const prevValue = this.fetchComponent(id, key);\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.remove(id, prevValue);\n                }\n                else {\n                    index.entities.remove(id, prevValue);\n                }\n            }\n        };\n        if (Component instanceof Map) {\n            const entity = Component.get(eid);\n            if (entity) {\n                Component.delete(eid);\n            }\n            updateIndexes();\n        }\n        else {\n            // removeComponent(this.world, Component, eid);\n            updateIndexes();\n        }\n    }\n    destroyEntity(id) {\n        return this.destroyId(this.entities, id);\n    }\n    destroyId(list, id) {\n        const eid = list.get(id);\n        if (eid) {\n            // removeEntity(this.world, eid);\n            list.delete(id);\n            return true;\n        }\n        return false;\n    }\n    fetchComponents(id) {\n        const eid = this.actors.get(id) || this.entities.get(id);\n        if (!eid) {\n            return;\n        }\n        return eid;\n    }\n    fetchComponent(id, key) {\n        const eid = this.actors.get(id) || this.entities.get(id);\n        const Component = this.components.get(key);\n        if (!eid || !Component) {\n            return;\n        }\n        if (Component instanceof Map) {\n            return Component.get(eid);\n        }\n        else {\n            // const type = this.types[key];\n            // const schema = type[3]\n            // const Type = ArrayTypes.get(type[0])\n            // const size = type[1]\n            // const value = new Type(size)\n            // let i = 0\n            // for (let prop in schema) {\n            //     // value[i] = Component[prop][eid]\n            //     i++\n            // }\n            // return value\n        }\n    }\n    getActors(query, pageSize) {\n        if (query !== null) {\n            return super.getActors(query, pageSize);\n        }\n        const actors = Array.from(this.actors.keys());\n        return paginate(actors, pageSize);\n    }\n    getComponents(query, pageSize) {\n        // const queryKeys = Object.keys(query);\n        // const entities = this.world.with(...queryKeys);\n        let ids;\n        if (query !== null) {\n            ids = query;\n        }\n        else {\n            const actors = Array.from(this.actors.keys());\n            const entities = Array.from(this.entities.keys());\n            ids = actors.concat(entities);\n        }\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const components = {};\n            for (let id of page) {\n                components[id] = this.actors.get(id) || this.entities.get(id);\n            }\n            return components;\n        });\n    }\n    getEntities(query, pageSize) {\n        if (query !== null) {\n            return super.getEntities(query, pageSize);\n        }\n        const entities = Array.from(this.entities.keys());\n        return paginate(entities, pageSize);\n    }\n    getInputs(query, pageSize) {\n        return super.getInputs(query, pageSize);\n    }\n    isActor(id) {\n        return this.actors.has(id);\n    }\n    isEntity(id) {\n        return this.entities.has(id);\n    }\n    setActors(actors) {\n        return super.setActors(actors);\n    }\n    setComponents(components) {\n        return super.setComponents(components);\n    }\n    setEntities(entities) {\n        return super.setEntities(entities);\n    }\n    setInputs(inputs) {\n        return super.setInputs(inputs);\n    }\n    storeActor(id) {\n        return this.storeId(this.actors, id);\n    }\n    storeComponent(id, key, value) {\n        const entity = this.actors.get(id) || this.entities.get(id);\n        if (entity) {\n            const prevValue = entity[key];\n            // entity[key] = value\n            const type = this.types[key];\n            const schema = type[3];\n            const component = {};\n            let i = 0;\n            for (let prop in schema) {\n                component[prop] = value[i];\n                i++;\n            }\n            this.world.addComponent(entity, key, component);\n            // this.world.reindex(entity)\n            if (this.indexes[key]) {\n                const index = this.indexes[key];\n                if (this.isActor(id)) {\n                    index.actors.remove(id, prevValue);\n                    index.actors.set(id, value);\n                }\n                else {\n                    index.entities.remove(id, prevValue);\n                    index.entities.set(id, value);\n                }\n            }\n        }\n    }\n    storeEntity(id) {\n        return this.storeId(this.entities, id);\n    }\n    storeId(list, id) {\n        const entity = list.get(id);\n        if (!entity) {\n            list.set(id, entity);\n            this.world.add(entity);\n            return true;\n        }\n        return false;\n    }\n    storeInput(id, input, tick = Date.now()) {\n        return super.storeInput(id, input, tick);\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","window","global","self","this","World","BecsyStorage","constructor","storage","options","super","actors","Map","components","entities","inputs","worldOptions","world","create","eids","destroyActor","id","destroyId","destroyComponent","key","eid","get","Component","updateIndexes","prevValue","fetchComponent","indexes","index","isActor","remove","delete","destroyEntity","list","fetchComponents","getActors","query","pageSize","Array","from","keys","paginate","getComponents","ids","concat","map","page","getEntities","getInputs","has","isEntity","setActors","setComponents","setEntities","setInputs","storeActor","storeId","storeComponent","value","entity","schema","types","component","i","prop","addComponent","set","storeEntity","add","storeInput","input","tick","Date","now"],"sourceRoot":""}