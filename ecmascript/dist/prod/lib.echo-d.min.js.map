{"version":3,"file":"lib.echo-d.min.js","mappings":"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","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/webpack/runtime/async module","webpack://echoD/webpack/runtime/chunk loaded","webpack://echoD/webpack/runtime/create fake namespace object","webpack://echoD/webpack/runtime/load script","webpack://echoD/./lib/actions/actor.js","webpack://echoD/./lib/actions/component.js","webpack://echoD/./lib/actions/core.js","webpack://echoD/./lib/actions/entity.js","webpack://echoD/./lib/actions/symbol.js","webpack://echoD/./lib/changes.js","webpack://echoD/./lib/constants.js","webpack://echoD/./lib/context.js","webpack://echoD/./lib/handler.js","webpack://echoD/./lib/indexes/index.js","webpack://echoD/./lib/indexes/sorted.js","webpack://echoD/./lib/indexes/spatial.js","webpack://echoD/./lib/node.js","webpack://echoD/./lib/options.js","webpack://echoD/./lib/ordered.js","webpack://echoD/./lib/pending.js","webpack://echoD/./lib/indexes/components.js","webpack://echoD/./lib/storage.js","webpack://echoD/./lib/symbols.js","webpack://echoD/./lib/types.js","webpack://echoD/./lib/updater.js","webpack://echoD/./lib/utils.js","webpack://echoD/webpack/bootstrap","webpack://echoD/webpack/runtime/define property getters","webpack://echoD/webpack/runtime/ensure chunk","webpack://echoD/webpack/runtime/get javascript chunk filename","webpack://echoD/webpack/runtime/global","webpack://echoD/webpack/runtime/hasOwnProperty shorthand","webpack://echoD/webpack/runtime/make namespace object","webpack://echoD/webpack/runtime/publicPath","webpack://echoD/webpack/runtime/jsonp chunk loading","webpack://echoD/./lib/emitter.js","webpack://echoD/./lib/client.js","webpack://echoD/./lib/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && !queue.d) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = 1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && (queue.d = 0);\n};","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"echoD:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { Options } from '../options.js';\nimport { extractSymbol } from '../symbols.js';\n/**\n * Creates a new instance of the ActorActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the ActorActions class.\n * @returns {any} - A new class that extends the provided Parent class and the ActorActions class.\n */\nexport const ActorActionsFactory = (Parent = Object) => class ActorActions extends Parent {\n    /**\n     * Handles input for a specific actor in the current context.\n     *\n     * @param {any[] | InputPayload} payload - The payload containing the actor's id and the input to be handled.\n     * @param {Context} context - The current context in which the actor input is to be handled.\n     * @param {Options | any} options - The options for handling the actor input. If an instance of Options is not provided, a new one will be created.\n     */\n    actorInput(payload, context, options) {\n        options = Options.ensure(options, this);\n        const { getActorId, compressStringsAsInts } = options;\n        let input;\n        let tick = 0;\n        if (Array.isArray(payload)) {\n            input = payload[0];\n            tick = payload[1] || 0;\n        }\n        else {\n            input = payload;\n        }\n        let id = getActorId(input?.id, context);\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        if (!input?.id) {\n            input.id = id;\n        }\n        context.actorInput(id, input, tick, options);\n    }\n    /**\n     * Retrieves actors from the current context and sends them to the responder.\n     *\n     * @param {any} payload - This parameter is not used in the function.\n     * @param {Context} context - The current context from which the actors are retrieved.\n     * @param {Options | any} options - The options for retrieving actors. If an instance of Options is not provided, a new one will be created.\n     */\n    actors(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, isAuthority, isAsyncStorage, pageSize, enableQuerying, enumDefaultSymbols } = options;\n        if (!isAuthority) {\n            return;\n        }\n        const sendActors = (pages) => {\n            // send pages to responder\n            for (const page of pages) {\n                responder([enumDefaultSymbols.mergeActors, page]);\n            }\n        };\n        const ctxActors = context.getActors(enableQuerying ? payload : null, pageSize);\n        if (isAsyncStorage) {\n            ctxActors.emitTo(sendActors);\n        }\n        else {\n            sendActors(ctxActors);\n        }\n    }\n    /**\n     * Merges actors into the current context.\n     *\n     * @param {any[]} payload - The payload containing the actors to be merged.\n     * @param {Context} context - The current context in which the actors are to be merged.\n     * @param {Options | any} options - The options for merging. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeActors(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        context.mergeActors(payload, options);\n    }\n    /**\n     * Removes an actor from the current context.\n     *\n     * @param {any} id - The identifier for the actor to be removed.\n     * @param {Context} context - The current context from which the actor is to be removed.\n     * @param {Options | any} options - The options for removing the actor. If an instance of Options is not provided, a new one will be created.\n     */\n    removeActor(id, context, options) {\n        options = options = Options.ensure(options, this);\n        const { skipPending, getActorId, compressStringsAsInts } = options;\n        id = getActorId(id, context);\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        context.removeActor(id, skipPending);\n    }\n    /**\n     * Spawns a new actor in the current context.\n     *\n     * @param {any} id - The identifier for the actor to be spawned.\n     * @param {Context} context - The current context in which the actor is to be spawned.\n     * @param {OptionsExtended | any} options - The options for spawning the actor. If an instance of Options is not provided, a new one will be created.\n     */\n    spawnActor(id, context, options) {\n        options = options = Options.ensure(options, this);\n        const { skipPending, getActorId, compressStringsAsInts } = options;\n        id = getActorId(id, context);\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        context.spawnActor(id, skipPending);\n    }\n};\n/**\n * Class representing actions that can be performed on actors.\n * This class encapsulates the logic for merging, spawning, removing, and handling input for actors.\n */\nexport class ActorActions extends ActorActionsFactory() {\n}\nconst __ActorActions__ = new ActorActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the ActorActions class.\n */\nexport const actions = {\n    /**\n     * Handles input for a specific actor in the current context.\n     */\n    actorInput: __ActorActions__.actorInput,\n    /**\n     * Retrieves actors from the current context.\n     */\n    actors: __ActorActions__.actors,\n    /**\n     * Merges actors into the current context.\n     */\n    mergeActors: __ActorActions__.mergeActors,\n    /**\n     * Removes an actor from the current context.\n     */\n    removeActor: __ActorActions__.removeActor,\n    /**\n     * Spawns a new actor in the current context.\n     */\n    spawnActor: __ActorActions__.spawnActor\n};\nexport default actions;\n","import { Options } from '../options.js';\nimport { extractSymbol, recursiveSymbolExtraction } from '../symbols.js';\n/**\n * Creates a new instance of the ComponentActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the ComponentActions class.\n * @returns {any} - A new class that extends the provided Parent class and the ComponentActions class.\n */\nexport const ComponentActionsFactory = (Parent = Object) => class ComponentActions extends Parent {\n    /**\n     * Changes a component in the current context.\n     *\n     * @param {any[]} payload - The payload containing the component's id, key, and the new value.\n     * @param {Context} context - The current context in which the component is to be changed.\n     * @param {Options | any} options - The options for changing the component. If an instance of Options is not provided, a new one will be created.\n     */\n    changeComponent(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { compressStringsAsInts, types, isOrdered } = options;\n        let [id, key, value] = payload;\n        let tick = isOrdered ? payload[3] : 0;\n        if (id === undefined || id === null || id === '' ||\n            key === undefined || key === null || key === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (!id) {\n                return;\n            }\n            key = extractSymbol(key, context, options);\n            if (!key) {\n                return;\n            }\n            const type = types[key];\n            if (type && (type === String || type[0] === String)) {\n                value = recursiveSymbolExtraction(key, value, context, options);\n                if (!value) {\n                    return;\n                }\n            }\n        }\n        context.changeComponent(id, key, value, tick, options);\n    }\n    /**\n     * Retrieves components from the current context and sends them to the responder.\n     *\n     * @param {any} payload - The payload containing the request for components.\n     * @param {Context} context - The current context from which the components are retrieved.\n     * @param {Options | any} options - The options for retrieving components. If an instance of Options is not provided, a new one will be created.\n     */\n    components(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, isAuthority, isAsyncStorage, pageSize, enableQuerying, enumDefaultSymbols } = options;\n        if (!isAuthority) {\n            return;\n        }\n        const sendComponents = (pages) => {\n            // return responder([enumDefaultSymbols.mergeComponents, components])\n            // send pages to responder\n            for (const page of pages) {\n                responder([\n                    enumDefaultSymbols.mergeComponents,\n                    page\n                ]);\n            }\n        };\n        const ctxComponents = context.getComponents(enableQuerying ? payload : null, pageSize);\n        if (isAsyncStorage) {\n            ctxComponents.emitTo(sendComponents);\n        }\n        else {\n            sendComponents(ctxComponents);\n        }\n    }\n    /**\n     * Merges components into the current context.\n     *\n     * @param {any[]} payload - The payload containing the components to be merged.\n     * @param {Context} context - The current context in which the components are to be merged.\n     * @param {Options | any} options - The options for merging. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeComponents(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        context.mergeComponents(payload, options);\n    }\n    /**\n     * Removes a component from the current context.\n     *\n     * @param {any[]} payload - The payload containing the component's id and key to be removed.\n     * @param {Context} context - The current context from which the component is to be removed.\n     * @param {Options | any} options - The options for removing the component. If an instance of Options is not provided, a new one will be created.\n     */\n    removeComponent(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { compressStringsAsInts } = options;\n        let [id, key] = payload;\n        if (id === undefined || id === null || id === '' ||\n            key === undefined || key === null || key === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (!id) {\n                return;\n            }\n            key = extractSymbol(key, context, options);\n            if (!key) {\n                return;\n            }\n        }\n        context.removeComponent(id, key, options);\n    }\n    /**\n     * Inserts a new component or updates an existing one in the current context.\n     *\n     * @param {any[]} payload - The payload containing the component's id, key, and the new value.\n     * @param {Context} context - The current context in which the component is to be upserted.\n     * @param {OptionsExtended | any} options - The options for upserting the component. If an instance of Options is not provided, a new one will be created.\n     */\n    upsertComponent(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { compressStringsAsInts, types, isOrdered } = options;\n        let [id, key, value] = payload;\n        let tick = isOrdered ? payload[3] : 0;\n        if (id === undefined || id === null || id === '' ||\n            key === undefined || key === null || key === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (!id) {\n                return;\n            }\n            key = extractSymbol(key, context, options);\n            if (!key) {\n                return;\n            }\n            const type = types[key];\n            if (type && (type === String || type[0] === String)) {\n                value = recursiveSymbolExtraction(key, value, context, options);\n                if (!value) {\n                    return;\n                }\n            }\n        }\n        context.upsertComponent(id, key, value, tick, options);\n    }\n};\n/**\n * Class representing actions that can be performed on components.\n * This class encapsulates the logic for merging, retrieving, and changing components.\n */\nexport class ComponentActions extends ComponentActionsFactory() {\n}\nconst __ComponentActions__ = new ComponentActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the ComponentActions class.\n */\nexport const actions = {\n    /**\n     * Changes a component in the current context.\n     */\n    changeComponent: __ComponentActions__.changeComponent,\n    /**\n     * Retrieves components from the current context.\n     */\n    components: __ComponentActions__.components,\n    /**\n     * Merges components into the current context.\n     */\n    mergeComponents: __ComponentActions__.mergeComponents,\n    /**\n     * Removes a component from the current context.\n     */\n    removeComponent: __ComponentActions__.removeComponent,\n    /**\n     * Updates an existing component or inserts a new one if it doesn't exist in the current context.\n     */\n    upsertComponent: __ComponentActions__.upsertComponent\n};\nexport default actions;\n","import { manyHandler } from '../handler.js';\nimport { Options } from '../options.js';\n/**\n * Creates a new instance of the CoreActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the CoreActions class.\n * @returns {any} - A new class that extends the provided Parent class and the CoreActions class.\n */\nexport const CoreActionsFactory = (Parent = Object) => class CoreActions extends Parent {\n    /**\n     * Processes a batch of payloads in the current context.\n     *\n     * @param {any[]} payload - The array of payloads to be processed.\n     * @param {Context} context - The current context in which the payloads are to be processed.\n     * @param {Options | any} options - The options for processing the payloads. If an instance of Options is not provided, a new one will be created.\n     */\n    batch(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        manyHandler(payload, context, options);\n    }\n};\n/**\n * The CoreActions class provides the core functionality for managing actions in your application.\n */\nexport class CoreActions extends CoreActionsFactory() {\n}\nconst __CoreActions__ = new CoreActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the CoreActions class.\n */\nexport const actions = {\n    /**\n     * Processes a batch of payloads in the current context.\n     */\n    batch: __CoreActions__.batch\n};\nexport default actions;\n","import { Options } from '../options.js';\nimport { extractSymbol } from '../symbols.js';\n/**\n * Creates a new instance of the EntityActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the EntityActions class.\n * @returns {any} - A new class that extends the provided Parent class and the EntityActions class.\n */\nexport const EntityActionsFactory = (Parent = Object) => class EntityActions extends Parent {\n    /**\n     * Creates a new entity in the current context.\n     *\n     * @param {any} id - The identifier for the entity to be created.\n     * @param {Context} context - The current context in which the entity is to be created.\n     * @param {Options | any} options - The options for creating the entity. If an instance of Options is not provided, a new one will be created.\n     */\n    createEntity(id, context, options) {\n        options = options = Options.ensure(options, this);\n        const { skipPending, compressStringsAsInts } = options;\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        context.createEntity(id, skipPending);\n    }\n    /**\n     * Retrieves entities from the current context.\n     *\n     * @param {any} payload - This parameter is not used in the method.\n     * @param {Context} context - The current context from which the entities are retrieved.\n     * @param {OptionsExtended | any} options - The options for retrieving entities. If an instance of Options is not provided, a new one will be created.\n     */\n    entities(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, isAuthority, isAsyncStorage, pageSize, enableQuerying, enumDefaultSymbols } = options;\n        if (!isAuthority) {\n            return;\n        }\n        const sendEntities = (pages) => {\n            for (const page of pages) {\n                responder([enumDefaultSymbols.mergeEntities, page]);\n            }\n        };\n        const ctxEntities = context.getEntities(enableQuerying ? payload : null, pageSize);\n        if (isAsyncStorage) {\n            ctxEntities.emitTo(sendEntities);\n        }\n        else {\n            sendEntities(ctxEntities);\n        }\n    }\n    /**\n     * Merges entities into the current context.\n     *\n     * @param {any[]} payload - The payload containing the entities to be merged.\n     * @param {Context} context - The current context in which the entities are to be merged.\n     * @param {OptionsExtended | any} options - The options for merging. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeEntities(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        context.mergeEntities(payload, options);\n    }\n    /**\n     * Removes an entity from the current context.\n     *\n     * @param {any} id - The identifier for the entity to be removed.\n     * @param {Context} context - The current context from which the entity is to be removed.\n     * @param {OptionsExtended | any} options - The options for removing the entity. If an instance of Options is not provided, a new one will be created.\n     */\n    removeEntity(id, context, options) {\n        options = options = Options.ensure(options, this);\n        const { skipPending, compressStringsAsInts } = options;\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        context.removeEntity(id, skipPending);\n    }\n};\n/**\n * Class representing actions that can be performed on entities.\n * This class encapsulates the logic for creating, merging, and removing entities.\n */\nexport class EntityActions extends EntityActionsFactory() {\n}\nconst __EntityActions__ = new EntityActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the EntityActions class.\n */\nexport const actions = {\n    /**\n     * Creates a new entity in the current context.\n     */\n    createEntity: __EntityActions__.createEntity,\n    /**\n     * Retrieves entities from the current context.\n     */\n    entities: __EntityActions__.entities,\n    /**\n     * Merges entities into the current context.\n     */\n    mergeEntities: __EntityActions__.mergeEntities,\n    /**\n     * Removes an entity from the current context.\n     */\n    removeEntity: __EntityActions__.removeEntity\n};\nexport default actions;\n","import { Options } from '../options.js';\nimport { paginate } from '../utils.js';\n/**\n * Creates a new instance of the SymbolActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the SymbolActions class.\n * @returns {any} - A new class that extends the provided Parent class and the SymbolActions class.\n */\nexport const SymbolActionsFactory = (Parent = Object) => class SymbolActions extends Parent {\n    /**\n     * Adds a symbol to the current context.\n     *\n     * @param {any} symbol - The symbol to be added.\n     * @param {Context} context - The current context to which the symbol is to be added.\n     * @param {Options | any} options - The options for adding the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    addSymbol(symbol, context, options) {\n        options = options = Options.ensure(options, this);\n        return context.addSymbol(symbol, options);\n    }\n    /**\n     * Fetches a symbol for the current context.\n     *\n     * @param {string | number} payload - The payload containing the symbol to be fetched.\n     * @param {Context} context - The current context from which the symbol is to be fetched.\n     * @param {Options | any} options - The options for fetching the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    fetchSymbol(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, enumDefaultSymbols } = options;\n        return context.fetchSymbol(payload, options, (symbolTuple) => {\n            responder([enumDefaultSymbols.mergeSymbol, symbolTuple]);\n        });\n    }\n    /**\n     * Retrieves a symbol from the current context by its index.\n     *\n     * @param {number} index - The index of the symbol to be retrieved.\n     * @param {Context} context - The current context from which the symbol is to be retrieved.\n     * @param {Options | any} options - The options for retrieving the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    getSymbol(index, context, options) {\n        options = options = Options.ensure(options, this);\n        return context.getSymbol(index, options);\n    }\n    /**\n     * Merges a symbol into the current context.\n     *\n     * @param {[string, number]} payload - The payload containing the symbol to be merged.\n     * @param {Context} context - The current context into which the symbol is to be merged.\n     * @param {Options | any} options - The options for merging the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeSymbol(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        context.mergeSymbol(payload, options);\n    }\n    /**\n     * Merges multiple symbols into the current context.\n     *\n     * @param {any[]} payload - The payload containing the symbols to be merged.\n     * @param {Context} context - The current context into which the symbols are to be merged.\n     * @param {Options | any} options - The options for merging the symbols. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeSymbols(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const [offset, symbols] = payload;\n        if (payload && payload.length) {\n            context.resetSymbols(offset, symbols, options);\n        }\n    }\n    /**\n     * Retrieves a symbol from the current context.\n     *\n     * @param {any} symbol - The symbol to be retrieved.\n     * @param {Context} context - The current context from which the symbol is to be retrieved.\n     * @param {Options | any} options - The options for retrieving the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    symbol(symbol, context, options) {\n        options = options = Options.ensure(options, this);\n        const { actions, responder, isAuthority, enumDefaultSymbols, compressStringsAsInts } = options;\n        if (!isAuthority || !compressStringsAsInts) {\n            return;\n        }\n        const enumSymbols = context.symbolsEnum ?? {};\n        let index = Object.prototype.hasOwnProperty.call(enumSymbols, symbol) ? enumSymbols[symbol] : -1;\n        if (index === -1) {\n            index = actions.addSymbol(symbol, context, options);\n        }\n        if (index !== -1) {\n            responder([enumDefaultSymbols.mergeSymbol, [symbol, index]]);\n        }\n    }\n    /**\n     * Retrieves all symbols from the current context.\n     *\n     * @param {any} _ - This parameter is not used.\n     * @param {Context} context - The current context from which the symbols are to be retrieved.\n     * @param {Options | any} options - The options for retrieving the symbols. If an instance of Options is not provided, a new one will be created.\n     */\n    symbols(_, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, isAuthority, pageSize, enumDefaultSymbols, compressStringsAsInts } = options;\n        if (!isAuthority || !compressStringsAsInts) {\n            return;\n        }\n        const symbols = context.symbolsList;\n        if (symbols && symbols.length) {\n            // responder([enumDefaultSymbols.mergeSymbols, 0, symbols])\n            const pages = paginate(symbols, pageSize);\n            let i = 0;\n            // send pages to responder\n            for (const page of pages) {\n                responder([enumDefaultSymbols.mergeSymbols, i, page]);\n                i += pageSize;\n            }\n        }\n    }\n};\n/**\n * The SymbolActions class provides methods for managing symbols in a context.\n */\nexport class SymbolActions extends SymbolActionsFactory() {\n}\nconst __SymbolActions__ = new SymbolActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the SymbolActions class.\n */\nexport const actions = {\n    /**\n     * Adds a symbol to the current context.\n     */\n    addSymbol: __SymbolActions__.addSymbol,\n    /**\n     * Fetches a symbol from the current context.\n     */\n    fetchSymbol: __SymbolActions__.fetchSymbol,\n    /**\n     * Retrieves a symbol from the current context by its index.\n     */\n    getSymbol: __SymbolActions__.getSymbol,\n    /**\n     * Merges a symbol into the current context.\n     */\n    mergeSymbol: __SymbolActions__.mergeSymbol,\n    /**\n     * Merges multiple symbols into the current context.\n     */\n    mergeSymbols: __SymbolActions__.mergeSymbols,\n    /**\n     * Retrieves a symbol from the current context.\n     */\n    symbol: __SymbolActions__.symbol,\n    /**\n     * Retrieves all symbols from the current context.\n     */\n    symbols: __SymbolActions__.symbols\n};\nexport default actions;\n","import { typeOf } from './utils.js';\n/**\n * The Changes class provides methods for managing changes in a context.\n *\n * @property {Context} context - The context in which changes are to be managed.\n * @property {Record<string, any>} diffs - The diffs of the changes.\n */\nexport class Changes {\n    context;\n    diffs;\n    /**\n     * Creates a new instance of the Changes class.\n     *\n     * @param {Context} context - The context in which changes are to be managed.\n     * @param {ChangesInput} changes - An optional initial set of changes.\n     */\n    constructor(context, changes) {\n        this.context = context;\n        this.diffs = changes?.diffs || {};\n    }\n    /**\n     * Changes a component in the current context.\n     *\n     * @param {string} id - The ID of the component to be changed.\n     * @param {string} key - The key of the property to be changed.\n     * @param {any} newValue - The new value of the property.\n     * @param {any} prevValue - The previous value of the property.\n     * @returns {Promise<any[]>} The new value.\n     */\n    changeComponent(id, key, newValue, prevValue) {\n        return this.upsertComponent(id, key, newValue, prevValue);\n    }\n    /**\n     * Retrieves the changes of a value.\n     *\n     * @param {string} id - The ID of the component.\n     * @param {string} key - The key of the property.\n     * @param {any} storedValue - The stored value.\n     * @returns {Record<string, any>} The diffs.\n     */\n    getValue(id, key, storedValue) {\n        const diffedValue = this.diffs[id]?.[key];\n        if (diffedValue === undefined || diffedValue === null) {\n            return storedValue;\n        }\n        return diffedValue;\n    }\n    /**\n     * Resets the changes to a new set of changes or an empty object if no changes are provided.\n     *\n     * @param {ChangesInput} changes - The new set of changes.\n     * @returns {Changes} The instance of the Changes class.\n     */\n    reset(changes) {\n        this.diffs = changes?.diffs || {};\n        return this;\n    }\n    /**\n     * Updates an existing component or inserts a new one if it doesn't exist in the current context.\n     *\n     * @param {string} id - The ID of the component to be updated or inserted.\n     * @param {string} key - The key of the property to be updated or inserted.\n     * @param {any} newValue - The new value of the property.\n     * @param {any} _prevValue - The previous value of the property.\n     * @returns {Promise<any[]>} The new value.\n     */\n    upsertComponent(id, key, newValue, _prevValue) {\n        this.diffs[id] = this.diffs[id] || {};\n        const currentScope = this.context.store.fetchComponents(id);\n        if (currentScope === undefined || currentScope === null) {\n            this.diffs[id][key] = newValue;\n            this.context.store.storeComponent(id, key, newValue);\n            return newValue;\n        }\n        let diffObject = this.diffs[id];\n        const recursiveDiff = (key, diff, scope, currVal) => {\n            let nextVal = currVal;\n            if (!scope) {\n                return [diff, nextVal];\n            }\n            const prevType = typeOf(scope[key]);\n            const nextType = typeOf(nextVal);\n            if (prevType !== nextType) {\n                diff[key] = nextVal;\n                diff = diff[key];\n                return [diff, nextVal];\n            }\n            switch (nextType) {\n                case 'bigint':\n                case 'number': {\n                    const v1 = scope[key];\n                    const v2 = nextVal;\n                    const d = v2 - v1;\n                    // scope[key] = v2\n                    diff[key] = d;\n                    break;\n                }\n                case 'array':\n                    diff = diff[key];\n                    scope = scope[key];\n                    for (let i = 0; i < nextVal.length; i += 1) {\n                        // if (nextVal[i] === undefined || nextVal[i] === null) {\n                        //   nextVal[i] = []\n                        // }\n                        recursiveDiff(i.toString(), diff, scope, nextVal[i]);\n                    }\n                    break;\n                case 'object':\n                    diff = diff[key];\n                    scope = scope[key];\n                    for (const k in nextVal) {\n                        // if (nextVal[k] === undefined || nextVal[k] === null) {\n                        //   nextVal[k] = {}\n                        // }\n                        recursiveDiff(k, diff, scope, nextVal[k]);\n                    }\n                    break;\n                case 'string':\n                // TODO: append with deletes?\n                case 'boolean':\n                default:\n                    diff[key] = nextVal;\n            }\n            diff = diff[key];\n            nextVal = nextVal[key];\n            return [diff, currVal];\n        };\n        [diffObject, newValue] = recursiveDiff(key, diffObject, currentScope, newValue);\n        this.context.store.storeComponent(id, key, newValue);\n        return newValue;\n    }\n}\nexport default Changes;\n","import { unionSetOrArray, createEnum } from './utils.js';\n/**\n * An array of action names.\n */\nexport const Actions = [\n    'actorInput',\n    'actors',\n    'addSymbol',\n    'batch',\n    'changeComponent',\n    'components',\n    'createEntity',\n    'entities',\n    'fetchSymbol',\n    'getSymbol',\n    'mergeActors',\n    'mergeComponents',\n    'mergeEntities',\n    'mergeSymbols',\n    'mergeSymbol',\n    'removeActor',\n    'removeComponent',\n    'removeEntity',\n    'spawnActor',\n    'symbol',\n    'symbols',\n    // 'tick',\n    // 'tock',\n    'upsertComponent'\n];\n/**\n * An array of common component names.\n */\nexport const CommonComponents = [\n    'asset',\n    'collider',\n    'color',\n    'hidden',\n    'position',\n    'rotation',\n    'velocity',\n    'spin'\n];\n/**\n * A set of default symbols, which is the union of Actions and CommonComponents.\n */\nexport const DefaultSymbols = unionSetOrArray(Actions, CommonComponents);\n/**\n * Padding for the enum.\n */\nexport const padEnum = 0; // 10;\n/**\n * An enum of action names.\n */\nexport const enumActions = createEnum(Actions, padEnum);\n/**\n * An enum of common component names.\n */\nexport const enumCommonComponents = createEnum(CommonComponents, Actions.length + padEnum);\n/**\n * An enum of default symbols.\n */\nexport const enumDefaultSymbols = createEnum(DefaultSymbols, padEnum);\n/**\n * An object that maps action names to their payload sizes.\n */\nexport const batchActionPayloadSizes = {\n    actorInput: { default: 1, rollback: 2 },\n    changeComponent: { default: 3, ordered: 4 },\n    mergeSymbols: 2,\n    removeComponent: 2,\n    upsertComponent: { default: 3, ordered: 4 }\n};\n/**\n * Default options for the application.\n */\nexport const defaultOptions = {\n    compressStringsAsInts: true,\n    enableRollback: !true,\n    enableQuerying: !true,\n    isAuthority: true,\n    isAsyncStorage: false,\n    isComponentRelay: true,\n    isDiffed: false,\n    isGroupedComponents: !true,\n    isOrdered: !true,\n    isReadOnly: false,\n    isSymbolLeader: false,\n    isSymbolRelay: false,\n    pageSize: 100,\n    skipPending: false,\n    indexes: {\n        // asset: { type: 'sorted' },\n        // collider: { type: 'sorted' },\n        // color: { type: 'sorted' },\n        // hidden: { type: 'sorted' },\n        position: { type: 'spatial' },\n    },\n    types: {\n        asset: 'str',\n        collider: 'str',\n        color: ['ui8', 4],\n        hidden: 'bool',\n        position: ['f32', 3],\n        rotation: ['f32', 3],\n        velocity: ['f32', 3],\n        spin: ['f32', 3],\n        size: ['f32', 3],\n    }\n};\n/**\n * Default options for updates.\n */\nexport const defaultUpdateOptions = {\n    mask: {\n        actors: true,\n        entities: true,\n        components: true,\n        inputs: true,\n        symbols: true\n    } && null,\n    type: true,\n    batched: true,\n    batchSize: 100\n};\n/**\n * An object that maps keys to their validity.\n */\nexport const defaultValidKeys = {\n    asset: true,\n    collider: true,\n    color: true,\n    hidden: true,\n    position: true,\n    rotation: true,\n    velocity: true,\n    spin: true,\n    size: true,\n};\n/**\n * A responder function that does nothing and returns nothing.\n */\nexport function voidResponder() { }\n/**\n * A function that retrieves the actor ID from a payload.\n *\n * @param {string} id - The payload from which the actor ID is to be retrieved.\n * @param {any} _context - The current context. This parameter is not used.\n * @returns {string | undefined} The actor ID, or undefined if it cannot be found.\n */\nexport function defaultGetActorId(id, _context) {\n    return id;\n}\n/**\n * A function that retrieves the grouped value from a payload.\n *\n * @param {any | any[]} value - The payload from which the grouped value is to be retrieved.\n * @param {number} i - The index of the payload.\n * @param {Object} types - An object containing the types.\n * @param {string} key - The key of the grouped value.\n * @returns {any} The value from the group.\n */\nexport function defaultGetGroupedValue(value, i, types, key) {\n    const type = types[key];\n    if (Array.isArray(type)) {\n        return value.slice(i * type[1], (i + 1) * type[1]);\n    }\n    return value[i];\n}\n/**\n * A function that sets the grouped value in a payload.\n *\n * @param {any} value - The payload in which the grouped value is to be set.\n * @param {Object} _types - An object containing the types.\n * @param {string} _key - The key of the grouped value.\n * @returns {any} The value from the group.\n */\nexport function defaultSetGroupedValue(value, _types, _key) {\n    return value;\n}\n","import { Changes } from './changes.js';\nimport { Options } from './options.js';\nimport { Ordered } from './ordered.js';\nimport { Pending } from './pending.js';\nimport { Symbols } from './symbols.js';\nimport { Storage } from './storage.js';\nimport { combineValues, now } from './utils.js';\nimport { allActions } from './node.js';\n/**\n * The Context class provides methods for managing the context.\n*\n* @property {any} events - The events.\n* @property {Storage} store - The store.\n* @property {Ordered | null} order - The order.\n* @property {Changes | null} changes - The changes.\n* @property {Pending | null} pending - The pending.\n*/\nexport class Context {\n    /**\n     * Ensures that the given context is an instance of the Context class.\n     *\n     * @param {Context | ContextProps} context - The context to ensure.\n     * @param {Options | any} options - The options for ensuring the context.\n     * @param {Storage} _Storage - The store.\n     * @returns {Context} The context.\n     */\n    static ensure(context, options, _Storage = Storage) {\n        if (context instanceof Context) {\n            return context;\n        }\n        return new Context(context, options, _Storage);\n    }\n    /**\n     * Creates a new instance of the Context class.\n     *\n     * @param {Context | ContextProps} context - The context properties.\n     * @param {Options | any} options - The context options.\n     * @param {Storage} _Storage - The store.\n     */\n    constructor(context = {}, options, _Storage = Storage) {\n        const { events = null, store = null, order = null, changes = null, symbols = null, pending = null,\n        // ...otherProps\n         } = context;\n        options = Options.ensure(options, options?.actions || allActions);\n        const { isOrdered, isDiffed, isReadOnly, compressStringsAsInts, enableQuerying, enumDefaultSymbols, worldOptions, indexes, types, } = options;\n        if (isOrdered) {\n            this.order = new Ordered(order);\n        }\n        else {\n            this.order = null;\n        }\n        if (isDiffed) {\n            this.changes = new Changes(this, changes);\n        }\n        else {\n            this.changes = null;\n        }\n        if (compressStringsAsInts) {\n            if (symbols) {\n                this.symbols = new Symbols(symbols);\n            }\n            else {\n                this.symbols = new Symbols();\n                this.symbols.copyEnum(enumDefaultSymbols);\n            }\n        }\n        else {\n            this.symbols = null;\n        }\n        if (isReadOnly) {\n            this.pending = null;\n        }\n        else {\n            this.pending = pending || new Pending(isDiffed);\n        }\n        this.events = events;\n        this.store = store || new _Storage(store, {\n            types,\n            indexes: enableQuerying ? indexes : null,\n            worldOptions\n        });\n        // Object.assign(this, otherProps)\n    }\n    /**\n     * Gets the actors from the store.\n     *\n     * @returns The actors from the store.\n     */\n    get actors() {\n        return this.getActors(null, Infinity);\n    }\n    /**\n     * Gets the actors from the store with the given query.\n     *\n     * @param {any} query - The query for getting the actors.\n     * @param {number} pageSize - The page size for getting the actors.\n     * @returns {Emitter<string[][]> | string[][]} The actors from the store.\n     */\n    getActors(query, pageSize) {\n        return this.store.getActors(query, pageSize);\n    }\n    /**\n     * Spawns an actor with the given id and options.\n     *\n     * @param {string} id - The id of the actor to spawn.\n     * @param {Options} options - The options for spawning the actor.\n     */\n    spawnActor(id, options) {\n        const { skipPending, onUpdate } = options;\n        const added = this.store.storeActor(id);\n        if (added) {\n            if (!skipPending && this.pending) {\n                this.pending.spawnActor(id);\n            }\n            if (this.events) {\n                this.events.emit('spawnActor', id);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Removes an actor with the given id and options.\n     *\n     * @param {string} id - The id of the actor to remove.\n     * @param {Options} options - The options for removing the actor.\n     */\n    removeActor(id, options) {\n        const { skipPending, onUpdate } = options;\n        const removed = this.store.destroyActor(id);\n        if (removed) {\n            if (!skipPending && this.pending) {\n                this.pending.removeActor(id);\n            }\n            if (this.events) {\n                this.events.emit('removeActor', id);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Merges actors with the given payload and options.\n     *\n     * @param {any[]} payload - The payload of the actors to merge.\n     * @param {Options} options - The options for merging the actors.\n     */\n    mergeActors(payload, options) {\n        const { actions, onUpdate } = options;\n        const nextOptions = options.extend({\n            onUpdate: null\n        });\n        for (const id of payload) {\n            actions.spawnActor(id, this, nextOptions);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Gets the entities from the store.\n     *\n     * @returns The entities from the store.\n     */\n    get entities() {\n        return this.getEntities(null, Infinity);\n    }\n    /**\n     * Gets the entities from the store with the given query.\n     *\n     * @param {any} query - The query for getting the entities.\n     * @param {number} pageSize - The page size for getting the entities.\n     * @returns {Emitter<string[][]> | string[][]} The entities from the store.\n     */\n    getEntities(query, pageSize) {\n        return this.store.getEntities(query, pageSize);\n    }\n    /**\n     * Creates an entity with the given id and options.\n     *\n     * @param {string} id - The id of the entity to create.\n     * @param {Options} options - The options for creating the entity.\n     */\n    createEntity(id, options) {\n        const { skipPending, onUpdate } = options;\n        const added = this.store.storeEntity(id);\n        if (added) {\n            if (!skipPending && this.pending) {\n                this.pending.createEntity(id);\n            }\n            if (this.events) {\n                this.events.emit('createEntity', id);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Removes an entity with the given id and options.\n     *\n     * @param {string} id - The id of the entity to remove.\n     * @param {Options} options - The options for removing the entity.\n     */\n    removeEntity(id, options) {\n        const { skipPending, onUpdate } = options;\n        const removed = this.store.destroyEntity(id);\n        if (removed) {\n            if (!skipPending && this.pending) {\n                this.pending.removeEntity(id);\n            }\n            if (this.events) {\n                this.events.emit('removeEntity', id);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Merges entities with the given payload and options.\n     *\n     * @param {string[]} payload - The payload of the entities to merge.\n     * @param {Options} options - The options for merging the entities.\n     */\n    mergeEntities(payload, options) {\n        const { actions, onUpdate } = options;\n        const nextOptions = options.extend({\n            onUpdate: null\n        });\n        for (const id of payload) {\n            actions.createEntity(id, this, nextOptions);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Gets the components from the store.\n     *\n     * @returns The components from the store.\n     */\n    get components() {\n        return this.getComponents(null, Infinity);\n    }\n    /**\n     * Gets the components from the store with the given query.\n     *\n     * @param {any} query - The query for getting the components.\n     * @param {number} pageSize - The page size for getting the components.\n     * @returns {Emitter<Components[]> | Components[]} The components from the store.\n     */\n    getComponents(query, pageSize) {\n        return this.store.getComponents(query, pageSize);\n    }\n    /**\n     * Changes a component with the given id, key, value, and options.\n     *\n     * @param {string | string[] | Uint32Array} id - The id of the component to change.\n     * @param {string} key - The key of the component to change.\n     * @param {any | any[]} value - The value to change in the component.\n     * @param {number} tick - The tick value for the component. Defaults to 0.\n     * @param {Options} options - The options for changing the component.\n     */\n    changeComponent(id, key, value, tick = 0, options) {\n        const { actions, skipPending, isGroupedComponents, getGroupedValue, types, onUpdate } = options;\n        if (Array.isArray(id) || id instanceof Uint32Array) {\n            if (!isGroupedComponents) {\n                throw new Error('Cannot change grouped components without isGroupedComponents option');\n            }\n            const noUpdateOptions = options.extend({ onUpdate: null });\n            for (let i = 0; i < id.length; i++) {\n                const val = getGroupedValue(value, i, types, key);\n                actions.changeComponent([id[i], key, val, tick], this, noUpdateOptions);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n            return;\n        }\n        const currentValue = this.store.fetchComponent(id, key);\n        const pendingType = typeof currentValue === 'undefined' ? 'created' : 'updated';\n        if (this.order) {\n            const isValidOrder = this.order.changeComponent(id, key, tick);\n            if (!isValidOrder && !this.changes) {\n                return;\n            }\n        }\n        let nextValue;\n        if (pendingType === 'created') {\n            nextValue = value;\n        }\n        else {\n            // nextValue = value\n            [/* combined */ , nextValue] = combineValues(currentValue, value);\n        }\n        if (this.changes) {\n            this.changes.changeComponent(id, key, nextValue, value);\n        }\n        else {\n            this.store.storeComponent(id, key, nextValue);\n        }\n        if (!skipPending && this.pending) {\n            this.pending.changeComponent(pendingType, id, key);\n        }\n        if (this.events) {\n            this.events.emit('changeComponent', id, key);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Upserts a component with the given id, key, value, and options.\n     *\n     * @param {string | string[] | Uint32Array} id - The id of the component to upsert.\n     * @param {string} key - The key of the component to upsert.\n     * @param {any | any[]} value - The value to upsert in the component.\n     * @param {number} tick - The tick value for the component. Defaults to 0.\n     * @param {Options} options - The options for upserting the component.\n     */\n    upsertComponent(id, key, value, tick = 0, options) {\n        const { actions, skipPending, isGroupedComponents, getGroupedValue, types, onUpdate } = options;\n        if (Array.isArray(id) || id instanceof Uint32Array) {\n            if (!isGroupedComponents) {\n                throw new Error('Cannot upsert grouped components without isGroupedComponents option');\n            }\n            const noUpdateOptions = options.extend({ onUpdate: null });\n            for (let i = 0; i < id.length; i++) {\n                const val = getGroupedValue(value, i, types, key);\n                actions.upsertComponent([id[i], key, val, tick], this, noUpdateOptions);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n            return;\n        }\n        const currentValue = this.store.fetchComponent(id, key);\n        const pendingType = typeof currentValue === 'undefined' ? 'created' : 'updated';\n        if (currentValue !== value) {\n            if (this.order) {\n                const isValidOrder = this.order.upsertComponent(id, key, tick);\n                if (!isValidOrder && !this.changes) {\n                    return;\n                }\n            }\n            if (this.changes) {\n                this.changes.upsertComponent(id, key, value, null);\n            }\n            else {\n                this.store.storeComponent(id, key, value);\n            }\n            if (!skipPending && this.pending) {\n                this.pending.upsertComponent(pendingType, id, key);\n            }\n            if (this.events) {\n                this.events.emit('upsertComponent', id, key);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Removes a component with the given id, key, and options.\n     *\n     * @param {string} id - The id of the component to remove.\n     * @param {string} key - The key of the component to remove.\n     * @param {Options} options - The options for removing the component.\n     */\n    removeComponent(id, key, options) {\n        const { skipPending, onUpdate } = options;\n        const currentValue = this.store.fetchComponent(id, key);\n        if (currentValue !== undefined) {\n            this.store.destroyComponent(id, key);\n            if (!skipPending && this.pending) {\n                this.pending.removeComponent(id, key);\n            }\n            if (this.events) {\n                this.events.emit('removeComponent', id, key);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Merges components with the given payload and options.\n     *\n     * @param {any} payload - The payload of the components to merge.\n     * @param {Options} options - The options for merging the components.\n     */\n    mergeComponents(payload, options) {\n        const { actions, onUpdate, isComponentRelay } = options;\n        const nextOptions = options.extend({\n            skipPending: !isComponentRelay,\n            onUpdate: null\n        });\n        for (const id in (payload ?? {})) {\n            for (const key in payload[id]) {\n                const value = payload[id][key];\n                const nextPayload = [id, key, value];\n                actions.upsertComponent(nextPayload, this, nextOptions);\n            }\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Gets the inputs from the store.\n     *\n     * @returns The inputs from the store.\n     */\n    get inputs() {\n        return this.getInputs(null, Infinity);\n    }\n    /**\n     * Gets the inputs from the store with the given query.\n     *\n     * @param {any} query - The query for getting the inputs.\n     * @param {number} pageSize - The page size for getting the inputs.\n     * @returns {Emitter<Inputs[]> | Inputs[]} The inputs from the store.\n     */\n    getInputs(query, pageSize) {\n        return this.store.getInputs(query, pageSize);\n    }\n    /**\n     * Handles actor input with the given id, payload, and options.\n     *\n     * @param {string} id - The id of the actor.\n     * @param {InputPayload} input - The payload for the actor input.\n     * @param {number} tick - The tick value for the actor input. Defaults to 0.\n     * @param {Options} options - The options for handling the actor input.\n     */\n    actorInput(id, input, tick = 0, options) {\n        const { skipPending, enableRollback, onUpdate } = options;\n        tick = enableRollback ? tick || now() : 0;\n        const newindex = this.store.storeInput(id, input, tick);\n        if (!skipPending && this.pending) {\n            this.pending.actorInput(id, newindex);\n        }\n        if (this.events) {\n            this.events.emit('actorInput', id, input, newindex, tick);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Gets the list of symbols.\n     *\n     * @returns The list of symbols.\n     */\n    get symbolsList() {\n        return this.symbols?.getSymbols();\n    }\n    /**\n     * Gets the enum of symbols.\n     *\n     * @returns The enum of symbols.\n     */\n    get symbolsEnum() {\n        return this.symbols?.getSymbolsEnum();\n    }\n    /**\n     * Sets the symbols with the given symbols.\n     *\n     * @param {any} symbols - The symbols to set.\n     */\n    setSymbols(symbols) {\n        this.symbols?.reset(symbols);\n    }\n    /**\n     * Gets a symbol with the given index and options.\n     *\n     * @param {number} index - The index of the symbol to get.\n     * @param {Options} options - The options for getting the symbol.\n     * @returns The symbol.\n     */\n    getSymbol(index, options) {\n        const { actions } = options;\n        const symbol = this.symbols?.get(index);\n        if (!symbol) {\n            const symbolTuple = actions.fetchSymbol(symbol, this, options);\n            return symbolTuple[0];\n        }\n        return symbol;\n    }\n    /**\n     * Adds a symbol with the given symbol and options.\n     *\n     * @param {string} symbol - The symbol to add.\n     * @param {Options} options - The options for adding the symbol.\n     * @returns The index of the added symbol or null if the symbol could not be added.\n     */\n    addSymbol(symbol, options) {\n        if (this.symbols === null) {\n            return null;\n        }\n        const { actions, isSymbolLeader, skipPending, onUpdate } = options;\n        const enumSymbols = this.symbolsEnum ?? {};\n        let index = Object.prototype.hasOwnProperty.call(enumSymbols, symbol) ? enumSymbols[symbol] : -1;\n        if (index === -1) {\n            if (isSymbolLeader) {\n                index = this.symbols.add(symbol) ?? -1;\n                if (!skipPending && this.pending) {\n                    this.pending.addSymbol([symbol, index]);\n                }\n                if (onUpdate) {\n                    onUpdate();\n                }\n            }\n            else if (actions.fetchSymbol) {\n                const symbolTuple = actions.fetchSymbol(symbol, this, options);\n                index = symbolTuple[1];\n            }\n        }\n        if (index === -1) {\n            return null;\n        }\n        return index;\n    }\n    /**\n     * Fetches a symbol with the given payload, options, and match function.\n     *\n     * @param {string | number} payload - The payload for fetching the symbol.\n     * @param {Options} options - The options for fetching the symbol.\n     * @param {Function} onMatch - The function to call when a match is found.\n     * @returns The fetched symbol tuple.\n     */\n    fetchSymbol(payload, options, onMatch) {\n        if (this.symbols === null) {\n            return null;\n        }\n        const { isSymbolLeader, skipPending, onUpdate } = options;\n        const symbolTuple = this.symbols.fetch(payload);\n        if (symbolTuple[0] && symbolTuple[1] !== -1) {\n            if (onMatch) {\n                onMatch(symbolTuple);\n            }\n        }\n        else {\n            if (isSymbolLeader) {\n                const index = this.symbols.add(symbolTuple[0]);\n                symbolTuple[1] = index;\n                if (!skipPending && this.pending) {\n                    this.pending.addSymbol(symbolTuple);\n                }\n                if (onUpdate) {\n                    onUpdate();\n                }\n            }\n        }\n        return symbolTuple;\n    }\n    /**\n     * Merges a symbol with the given payload and options.\n     *\n     * @param {[string, number]} payload - The payload for merging the symbol.\n     * @param {Options} options - The options for merging the symbol.\n     */\n    mergeSymbol(payload, options) {\n        if (this.symbols === null) {\n            return null;\n        }\n        const { isSymbolLeader, isSymbolRelay, skipPending, onUpdate } = options;\n        this.symbols.merge(payload);\n        if ((isSymbolLeader || isSymbolRelay) && !skipPending && this.pending) {\n            this.pending.addSymbol(payload);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Resets symbols with the given payload and options.\n     *\n     * @param {any[]} payload - The payload for resetting the symbols.\n     * @param {Options} options - The options for resetting the symbols.\n     */\n    resetSymbols(offset = 0, symbols, options) {\n        if (this.symbols === null) {\n            return null;\n        }\n        const { isSymbolLeader, isSymbolRelay, skipPending, onUpdate } = options;\n        this.symbols.reset(offset, symbols);\n        if ((isSymbolLeader || isSymbolRelay) && !skipPending && this.pending) {\n            this.pending.replaceSymbols(offset, symbols);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Resets the current frame state.\n     */\n    resetFrame() {\n        if (this.pending) {\n            this.pending.reset();\n        }\n        if (this.order) {\n            this.order.reset();\n        }\n        if (this.changes) {\n            this.changes.reset();\n        }\n    }\n}\nexport default Context;\n","import { Context } from './context.js';\nimport { Options } from './options.js';\nimport { Storage } from './storage.js';\nimport { updater } from './updater.js';\nimport { now } from './utils.js';\n/**\n * Gets the symbol action.\n *\n * @param {string | number} action - The action.\n * @param {Record<number, string> | null} defaultSymbols - The default symbols.\n * @returns {number | string} The symbol action.\n */\nexport function getSymbolAction(action, defaultSymbols) {\n    if (defaultSymbols && typeof action === 'number' && defaultSymbols[action]) {\n        action = defaultSymbols[action];\n    }\n    return action;\n}\n/**\n * Gets the action handler.\n *\n * @param {Context} context - The context.\n * @param {OptionsExtended | any} options - The options.\n */\nexport function getActionHandler(context, options) {\n    options = options instanceof Options ? options : new Options(options);\n    const { actions, defaultSymbols } = options;\n    return (action) => {\n        action = getSymbolAction(action, defaultSymbols);\n        const handler = (payload) => {\n            if (actions[action]) {\n                actions[action](payload, context, options);\n            }\n        };\n        // Assign the action to the handler function.\n        handler.action = action;\n        return handler;\n    };\n}\n/**\n * Handles a single message.\n *\n * @param {Message | any[]} message - The message to handle.\n * @param {Context} context - The context for the handler.\n * @param {OptionsExtended | any} options - The options for the handler.\n*/\nexport function oneHandler(message, context, options) {\n    options = options instanceof Options ? options : new Options(options);\n    const actionHandler = getActionHandler(context, options);\n    if (Array.isArray(message)) {\n        actionHandler(message[0])(message[1]);\n    }\n    else if (message) {\n        actionHandler(message.action)(message.payload);\n    }\n}\nexport const handler = manyHandler;\n/**\n * Handles multiple messages.\n *\n * @param {Message | any[]} message - The messages to handle.\n * @param {Context} context - The context for the handler.\n * @param {OptionsExtended | any} options - The options for the handler.\n */\nexport function manyHandler(message, context, options) {\n    options = options instanceof Options ? options : new Options(options);\n    const { batchActionPayloadSizes, isOrdered, enableRollback } = options;\n    const actionHandler = getActionHandler(context, options);\n    const iterator = (payload, handler, offset = 0) => {\n        // Use the action from the handler Function\n        const action = handler.action;\n        let payloadSize = batchActionPayloadSizes[action] || 1;\n        if (payloadSize && typeof payloadSize === 'object') {\n            if (payloadSize.ordered && isOrdered) {\n                payloadSize = payloadSize.ordered;\n            }\n            else if (payloadSize.rollback && enableRollback) {\n                payloadSize = payloadSize.rollback;\n            }\n            else {\n                payloadSize = payloadSize.default;\n            }\n        }\n        for (let i = offset; i < payload.length; i += payloadSize) {\n            // Call the handler function with the payload\n            if (payloadSize === 1) {\n                handler(payload[i], context, options);\n            }\n            else if (batchActionPayloadSizes) {\n                handler(payload.slice(i, i + payloadSize), context, options);\n            }\n            else {\n                // console.warn('BATCH MISMATCH')\n            }\n        }\n    };\n    if (Array.isArray(message)) {\n        const handler = actionHandler(message[0]);\n        iterator(message, handler, 1);\n    }\n    else if (message) {\n        const handler = actionHandler(message.action);\n        iterator(message.payload, handler);\n    }\n}\n/**\n * The Handler class. It handles messages.\n */\nexport class Handler {\n    context;\n    options;\n    /**\n     * Creates a new Handler instance.\n     *\n     * @param {Context | any} context - The context for the handler.\n     * @param {Options | any} options - The options for the handler.\n     * @param {Object} actions - The actions for the handler.\n     * @param {Storage} _Storage - The storage for the handler.\n     */\n    constructor(context, options, actions, _Storage = Storage) {\n        this.options = Options.ensure(options, actions);\n        this.context = Context.ensure(context, options, _Storage);\n    }\n    /**\n     * Handles a single message.\n     *\n     * @param {Message | any[]} message - The message to handle.\n     */\n    one(message, extendOptions) {\n        return oneHandler(message, this.context, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Handles multiple messages.\n     *\n     * @param {Message | any[]} message - The messages to handle.\n     */\n    many(message, extendOptions) {\n        return manyHandler(message, this.context, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Gets the action handler.\n     */\n    getActionHandler() {\n        return getActionHandler(this.context, this.options);\n    }\n    /**\n     * Gets the symbol action.\n     *\n     * @param {string | number} action - The action.\n     */\n    getSymbolAction(action) {\n        return getSymbolAction(action, this.options.defaultSymbols);\n    }\n    /**\n     * Updates other nodes in the network.\n     *\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     * @param {number} tick - The tick for updating.\n     * @returns {Promise<any[]>} A promise that resolves with updated batch of messages.\n     */\n    updater(extendOptions, tick = now()) {\n        return updater(this.context, extendOptions ? this.options.extend(extendOptions) : this.options, tick);\n    }\n    /**\n     * Spawns an actor.\n     *\n     * @param {string} id - The ID of the actor to spawn.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    spawnActor(id, extendOptions) {\n        return this.context.spawnActor(id, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Despawns an actor.\n     *\n     * @param {string} id - The ID of the actor to despawn.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    removeActor(id, extendOptions) {\n        return this.context.removeActor(id, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Updates an actor with an input.\n     *\n     * @param {string} id - The ID of the actor to update.\n     * @param {any} input - The input for updating.\n     * @param {number} tick - The tick for updating.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    actorInput(id, input, tick = now(), extendOptions) {\n        return this.context.actorInput(id, input, tick, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Creates an entity.\n     *\n     * @param {string} id - The ID of the entity to create.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    createEntity(id, extendOptions) {\n        return this.context.createEntity(id, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Removes an entity.\n     *\n     * @param {string} id - The ID of the entity to remove.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    removeEntity(id, extendOptions) {\n        return this.context.removeEntity(id, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Sets a component to an entity.\n     *\n     * @param {string} id - The ID of the entity to add the component to.\n     * @param {string} key - The key of the component to add.\n     * @param {any} value - The value of the component to add.\n     * @param {number} tick - The tick for updating.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    upsertComponent(id, key, value, tick = now(), extendOptions) {\n        return this.context.upsertComponent(id, key, value, tick, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Changes a component of an entity.\n     *\n     * @param {string} id - The ID of the entity to change the component of.\n     * @param {string} key - The key of the component to change.\n     * @param {any} value - The value of the component to change.\n     * @param {number} tick - The tick for updating.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    changeComponent(id, key, value, tick = now(), extendOptions) {\n        return this.context.changeComponent(id, key, value, tick, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Removes a component from an entity.\n     *\n     * @param {string} id - The ID of the entity to remove the component from.\n     * @param {string} key - The key of the component to remove.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    removeComponent(id, key, extendOptions) {\n        return this.context.removeComponent(id, key, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Queries components.\n     *\n     * @param {any} query - The query for querying components.\n     * @returns {Set<any>} The components queried.\n     */\n    queryComponents(query) {\n        return this.context.store.queryComponents(query);\n    }\n}\nexport default Handler;\n","/**\n * The Index class represents an index.\n */\nexport class Index {\n    items;\n    constructor(items = null, _options = {}) {\n        this.items = items;\n    }\n    /**\n     * The clear method clears the index.\n     */\n    clear() {\n        this.items = null;\n    }\n    /**\n     * The clone method clones the index.\n     */\n    clone() {\n        return new Index(this.items);\n    }\n    /**\n     * The get method gets a value from the index.\n     *\n     * @param {any} _value - The value to get from the index.\n     * @returns {any} The value from the index.\n     */\n    get(_value) { }\n    /**\n     * The has method checks if a value is in the index.\n     *\n     * @param {any} _value - The value to check in the index.\n     * @param {any} _id - The ID of the value to check in the index.\n     * @returns {boolean} True if the value is in the index, false otherwise.\n     */\n    has(_value, _id) {\n        return false;\n    }\n    /**\n     * The remove method removes a value from the index.\n     *\n     * @param {any} _value - The value to remove from the index.\n     * @param {any} _id - The ID of the value to remove from the index.\n     * @returns {any} The value removed from the index.\n     */\n    remove(_value, _id) { }\n    /**\n     * The set method sets a value to the index.\n     *\n     * @param {any} _value - The value to set to the index.\n     * @param {any} _id - The ID to set to the index.\n     * @returns {any} The value being set.\n     */\n    set(_value, _id) {\n        return null;\n    }\n    /**\n   * The store method stores a value to the index.\n   *\n   * @param {ID} id - The ID of the value to store.\n   * @param {V} preValue - The previous value to store to the index.\n   * @param {V} value - The value to store to the index.\n   * @returns The value being stored.\n   */\n    store(id, preValue, value) {\n        if (preValue) {\n            this.remove(preValue, id);\n        }\n        return this.set(value, id);\n    }\n    /**\n     * The query method queries the index.\n     *\n     * @param {any} _query - The query to use.\n     * @returns {any[]} The result of the query.\n     */\n    query(_query) {\n        return [];\n    }\n}\n","import { Index } from './index.js';\nimport { binaryInsert } from '../utils.js';\n/**\n * binaryInsertID inserts an ID value into a sorted array.\n *\n * @param {any[]} items - The sorted array\n * @param {any} value - The value to insert\n * @param {any} id - The ID of the value to insert\n * @returns {number[]} The index of the inserted value\n */\nfunction binaryInsertID(items, value, id) {\n    const low = binaryInsert(items, value, (item) => item[0]);\n    const item = items[low];\n    const v = item[0];\n    if (v === value) {\n        const ids = item[1];\n        const i = ids.indexOf(id);\n        if (i === -1) {\n            ids.push(id);\n            return [low, ids.length - 1];\n        }\n        else {\n            // return [low, i]\n        }\n    }\n    else {\n        const ids = [id];\n        items.splice(low, 0, [value, ids]);\n        return [low, 0];\n    }\n    return [-1, -1];\n}\n/**\n * binaryRemove removes a value from a sorted array.\n *\n * @param {any[]} items - The sorted array\n * @param {any} value - The value to remove\n * @param {any} id - The ID of the value to remove\n * @returns {number[]} The index of the removed value\n */\nfunction binaryRemoveID(items, value, id) {\n    const low = binaryInsert(items, value, (item) => item[0]);\n    const item = items[low];\n    const v = item[0];\n    if (v === value) {\n        const ids = item[1];\n        const i = ids.lastIndexOf(id);\n        if (i !== -1) {\n            ids.splice(i, 1);\n            if (ids.length === 0) {\n                items.splice(low, 1);\n            }\n            return [low, i];\n        }\n    }\n    return [-1, -1];\n}\n/**\n * SortedIndex class represents a sorted index.\n */\nexport class SortedIndex extends Index {\n    constructor(items = [], _options = {}) {\n        super(items);\n    }\n    /**\n     * The clear method clears the index.\n     */\n    clear() {\n        this.items = [];\n    }\n    /**\n     * The clone method clones the index.\n     */\n    clone() {\n        return new SortedIndex(this.items);\n    }\n    /**\n     * The get method gets a value from the index.\n     *\n     * @param {V} value - The value to get from the index.\n     * @returns {ID[]} The value from the index.\n     */\n    get(value) {\n        const item = this.items.find((item) => item[0] === value);\n        if (item) {\n            return item[1];\n        }\n        return [];\n    }\n    /**\n     * The has method checks if a value is in the index.\n     *\n     * @param {V} value - The value to check in the index.\n     * @param {ID} id - The ID of the value to check in the index.\n     * @returns {boolean} True if the value is in the index, false otherwise.\n     */\n    has(value, id) {\n        const item = this.items.find((item) => item[0] === value);\n        if (id === undefined) {\n            return !!item;\n        }\n        if (item) {\n            const ids = item[1];\n            return ids.indexOf(id) !== -1;\n        }\n        return false;\n    }\n    /**\n     * The remove method removes a value from the index.\n     *\n     * @param {T} value - The value to remove from the index.\n     * @returns {number[]} The value removed from the index.\n     */\n    remove(value, id) {\n        const indexes = binaryRemoveID(this.items, value, id);\n        return indexes;\n        // return indexes[0] === -1 || indexes[1] === -1 ? null : value \n    }\n    /**\n     * The set method sets a value to the index.\n     *\n     * @param {T} value - The value to set to the index.\n     * @param {ID} id - The ID of the value to set to the index.\n     * @returns {number[]} The index of the value being set.\n     */\n    set(value, id) {\n        const indexes = binaryInsertID(this.items, value, id);\n        return indexes;\n    }\n    /**\n     * The query method queries the manager.\n     *\n     * @param {V} query - The query to use.\n     * @returns {ID[]} The result of the query.\n     */\n    query(query) {\n        // if (query && typeof query === 'object') {}\n        return this.get(query);\n    }\n}\n","import { Index } from './index.js';\nimport { binarySearch } from '../utils.js';\n/**\n * The SpatialIndex class represents a spatial index.\n */\nexport class SpatialIndex extends Index {\n    constructor(items = [], { cellSize = 5 } = {}) {\n        super(items);\n        this.cellSize = cellSize;\n    }\n    /**\n     * The clear method clears the index.\n     */\n    clear() {\n        this.items = [];\n    }\n    /**\n     * The clone method clones the index.\n     */\n    clone() {\n        return new SpatialIndex(this.items);\n    }\n    /**\n     * The get method gets a value from the index.\n     *\n     * @param {V} value - The value to get from the index.\n     * @returns {ID[]} The value from the index.\n     */\n    get(value) {\n        const hash = this.hash(value);\n        this.items[hash] = this.items[hash] || [];\n        const ids = this.items[hash];\n        if (ids) {\n            return ids;\n        }\n        return [];\n    }\n    /**\n     * The has method checks if a value is in the index.\n     *\n     * @param {V} value - The value to check in the index.\n     * @param {ID} id - The ID of the value to check in the index.\n     * @returns {boolean} True if the value is in the index, false otherwise.\n     */\n    has(value, id) {\n        const hash = this.hash(value);\n        this.items[hash] = this.items[hash] || [];\n        const ids = this.items[hash];\n        if (id === undefined) {\n            return !!ids;\n        }\n        if (ids) {\n            return ids.indexOf(id) !== -1;\n        }\n        return false;\n    }\n    /**\n     * The hash method hashes 2D or 3D value.\n     * @param {number[]} value - The 2D or 3D value to hash.\n     * @returns {number} The hash of the value.\n     */\n    hash(value) {\n        if (value.length === 2) {\n            return this.hash2d(value[0], value[1]);\n        }\n        return this.hash3d(value[0], value[1], value[2]);\n    }\n    /**\n     * The hash2d method hashes a 2D value.\n     * @param {number} x - The X value to hash.\n     * @param {number} y - The Y value to hash.\n     * @returns {number} The hash of the 3D value.\n     */\n    hash2d(x = 0, y = 0) {\n        const ix = Math.floor((x + 1000) / this.cellSize), iy = Math.floor((y + 1000) / this.cellSize);\n        return ((ix * 73856093) ^ (iy * 19349663)); // % 5000; // 5000 is size of hash table.\n    }\n    /**\n     * The hash3d method hashes a 3D value.\n     * @param {number} x - The X value to hash.\n     * @param {number} y - The Y value to hash.\n     * @param {number} z - The Z value to hash.\n     * @returns {number} The hash of the 3D value.\n     */\n    hash3d(x = 0, y = 0, z = 0) {\n        const ix = Math.floor((x + 1000) / this.cellSize), iy = Math.floor((y + 1000) / this.cellSize), iz = Math.floor((z + 1000) / this.cellSize);\n        return ((ix * 73856093) ^ (iy * 19349663) ^ (iz * 83492791)); // % 5000; // 5000 is size of hash table.\n    }\n    /**\n     * The remove method removes a value from the index.\n     *\n     * @param {T} value - The value to remove from the index.\n     * @returns {number[]} The value removed from the index.\n     */\n    remove(value, id) {\n        const hash = this.hash(value);\n        this.items[hash] = this.items[hash] || [];\n        const ids = this.items[hash];\n        const [index] = binarySearch(ids, id);\n        if (index === -1) {\n            ids.splice(index, 1);\n        }\n        if (ids.length === 0) {\n            delete this.items[hash];\n        }\n        return [hash, index];\n    }\n    /**\n     * The set method sets a value to the index.\n     *\n     * @param {T} value - The value to set to the index.\n     * @param {ID} id - The ID of the value to set to the index.\n     * @returns {number[]} The index of the value being set.\n     */\n    set(value, id) {\n        const hash = this.hash(value);\n        this.items[hash] = this.items[hash] || [];\n        const ids = this.items[hash];\n        const [index, left] = binarySearch(ids, id);\n        if (index === -1) {\n            ids.splice(left, 0, id);\n        }\n        return [hash, index];\n    }\n    /**\n     * The query method queries the manager.\n     *\n     * @param {V} query - The query to use.\n     * @returns {ID[]} The result of the query.\n     */\n    query(query) {\n        let results = [];\n        const o = this.cellSize;\n        const dims = query.length === 2 ? 2 : 3;\n        if (dims === 2) {\n            const [x, y] = query;\n            for (let xx = -o * 2; xx < o * 2 + o; xx += o) {\n                for (let yy = -o * 2; yy < o * 2 + o; yy += o) {\n                    const ids = this.items[this.hash2d(x + xx, y + yy)];\n                    if (ids !== undefined) {\n                        results = results.concat(ids);\n                    }\n                }\n            }\n        }\n        else {\n            const [x, y, z] = query;\n            for (let xx = -o * 2; xx < o * 2 + o; xx += o) {\n                for (let yy = -o * 2; yy < o * 2 + o; yy += o) {\n                    for (let zz = -o * 2; zz < o * 2 + o; zz += o) {\n                        const ids = this.items[this.hash3d(x + xx, y + yy, z + zz)];\n                        if (ids !== undefined) {\n                            results = results.concat(ids);\n                        }\n                    }\n                }\n            }\n        }\n        return results;\n    }\n}\n","import actorActions, { ActorActionsFactory } from './actions/actor.js';\nimport componentActions, { ComponentActionsFactory } from './actions/component.js';\nimport coreActions, { CoreActionsFactory } from './actions/core.js';\nimport entityActions, { EntityActionsFactory } from './actions/entity.js';\nimport symbolActions, { SymbolActionsFactory } from './actions/symbol.js';\n/**\n * A factory function that creates a new instance of the AllActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the AllActions class.\n * @returns {any} A new class that extends the provided Parent class and the CoreActions class.\n */\nexport function AllActionsFactory(Parent = Object) {\n    return ActorActionsFactory(ComponentActionsFactory(CoreActionsFactory(EntityActionsFactory(SymbolActionsFactory(Parent)))));\n}\n/**\n * Combines all the actions from different modules into a single object.\n */\nexport const allActions = {\n    ...actorActions,\n    ...componentActions,\n    ...coreActions,\n    ...entityActions,\n    ...symbolActions\n};\n/**\n * The NodeActions class provides methods for managing nodes in a context.\n */\nexport class NodeActions extends AllActionsFactory() {\n}\nconst __NodeActions__ = new NodeActions();\n/**\n * The actions object combines all the actions from different modules.\n */\nexport const actions = {\n    /**\n     * Handles input for a specific actor in the current context.\n     */\n    actorInput: __NodeActions__.actorInput,\n    /**\n     * Retrieves actors from the current context.\n     */\n    actors: __NodeActions__.actors,\n    /**\n     * Merges actors into the current context.\n     */\n    mergeActors: __NodeActions__.mergeActors,\n    /**\n     * Removes an actor from the current context.\n     */\n    removeActor: __NodeActions__.removeActor,\n    /**\n     * Spawns a new actor in the current context.\n     */\n    spawnActor: __NodeActions__.spawnActor,\n    /**\n     * Changes a component in the current context.\n     */\n    changeComponent: __NodeActions__.changeComponent,\n    /**\n     * Retrieves components from the current context.\n     */\n    components: __NodeActions__.components,\n    /**\n     * Merges components into the current context.\n     */\n    mergeComponents: __NodeActions__.mergeComponents,\n    /**\n     * Removes a component from the current context.\n     */\n    removeComponent: __NodeActions__.removeComponent,\n    /**\n     * Updates an existing component or inserts a new one if it doesn't exist in the current context.\n     */\n    upsertComponent: __NodeActions__.upsertComponent,\n    /**\n     * Processes a batch of payloads in the current context.\n     */\n    batch: __NodeActions__.batch,\n    /**\n     * Creates a new entity in the current context.\n     */\n    createEntity: __NodeActions__.createEntity,\n    /**\n     * Retrieves entities from the current context.\n     */\n    entities: __NodeActions__.entities,\n    /**\n     * Merges entities into the current context.\n     */\n    mergeEntities: __NodeActions__.mergeEntities,\n    /**\n     * Removes an entity from the current context.\n     */\n    removeEntity: __NodeActions__.removeEntity,\n    /**\n     * Adds a symbol to the current context.\n     */\n    addSymbol: __NodeActions__.addSymbol,\n    /**\n     * Fetches a symbol from the current context.\n     */\n    fetchSymbol: __NodeActions__.fetchSymbol,\n    /**\n     * Retrieves a symbol from the current context by its index.\n     */\n    getSymbol: __NodeActions__.getSymbol,\n    /**\n     * Merges a symbol into the current context.\n     */\n    mergeSymbol: __NodeActions__.mergeSymbol,\n    /**\n     * Merges multiple symbols into the current context.\n     */\n    mergeSymbols: __NodeActions__.mergeSymbols,\n    /**\n     * Retrieves a symbol from the current context.\n     */\n    symbol: __NodeActions__.symbol,\n    /**\n     * Retrieves all symbols from the current context.\n     */\n    symbols: __NodeActions__.symbols,\n};\nexport default actions;\n","// import { Context } from './index.js';\nimport * as Constants from './constants.js';\nimport { actions as defaultActions } from './node.js';\n/**\n * The Options class represents the options for a node.\n */\nexport class Options {\n    actions;\n    batchActionPayloadSizes;\n    compressStringsAsInts;\n    defaultSymbols;\n    enableRollback;\n    enableQuerying;\n    enumDefaultSymbols;\n    getActorId;\n    getGroupedValue;\n    indexes;\n    isAuthority;\n    isAsyncStorage;\n    isComponentRelay;\n    isDiffed;\n    isGroupedComponents;\n    isOrdered;\n    isReadOnly;\n    isSymbolLeader;\n    isSymbolRelay;\n    onUpdate;\n    pageSize;\n    responder;\n    skipPending;\n    types;\n    setGroupedValue;\n    updateOptions;\n    worldOptions;\n    // [key: string]: any;\n    /**\n     * Ensures that the provided options are an instance of Options.\n     *\n     * @param {Options | OptionsProps} options - The options for the node.\n     * @param {any} actionsThis - The context for the actions.\n     * @returns {Options} - An instance of Options.\n     */\n    static ensure(options = {}, actionsThis) {\n        return options instanceof Options ? options : new Options(options, actionsThis);\n    }\n    /**\n     * Constructs a new Options object.\n     *\n     * @param {Options | OptionsProps} options - The options for the node.\n     * @param {any} actionsThis - The context for the actions.\n     */\n    constructor(options = {}, actionsThis = null) {\n        const { actions = actionsThis || defaultActions, batchActionPayloadSizes = Constants.batchActionPayloadSizes, compressStringsAsInts = Constants.defaultOptions.compressStringsAsInts, defaultSymbols = Constants.DefaultSymbols, enableRollback = Constants.defaultOptions.enableRollback, enableQuerying = Constants.defaultOptions.enableQuerying, enumDefaultSymbols = Constants.enumDefaultSymbols, getActorId = Constants.defaultGetActorId, getGroupedValue = Constants.defaultGetGroupedValue, indexes = Constants.defaultOptions.indexes, isAuthority = Constants.defaultOptions.isAuthority, isAsyncStorage = Constants.defaultOptions.isAsyncStorage, isComponentRelay = Constants.defaultOptions.isComponentRelay, isDiffed = Constants.defaultOptions.isDiffed, isGroupedComponents = Constants.defaultOptions.isGroupedComponents, isOrdered = Constants.defaultOptions.isOrdered, isReadOnly = Constants.defaultOptions.isReadOnly, isSymbolLeader = Constants.defaultOptions.isSymbolLeader, isSymbolRelay = Constants.defaultOptions.isSymbolRelay, onUpdate = null, pageSize = Constants.defaultOptions.pageSize, responder = Constants.voidResponder, skipPending = Constants.defaultOptions.skipPending, types = Constants.defaultOptions.types, setGroupedValue = Constants.defaultSetGroupedValue, updateOptions: overridenUpdateOptions = {}, worldOptions = null,\n        // ...otherOptions\n         } = options;\n        const updateOptions = {\n            ...Constants.defaultUpdateOptions,\n            ...overridenUpdateOptions\n        };\n        updateOptions.validKeys = !overridenUpdateOptions?.validKeys\n            ? null\n            : {\n                ...Constants.defaultValidKeys,\n                ...(overridenUpdateOptions?.validKeys || {})\n            };\n        this.actions = actions;\n        this.batchActionPayloadSizes = batchActionPayloadSizes;\n        this.compressStringsAsInts = compressStringsAsInts;\n        this.defaultSymbols = defaultSymbols;\n        this.enableRollback = enableRollback;\n        this.enableQuerying = enableQuerying;\n        this.enumDefaultSymbols = enumDefaultSymbols;\n        this.getActorId = getActorId;\n        this.getGroupedValue = getGroupedValue;\n        this.indexes = indexes;\n        this.isAuthority = isAuthority;\n        this.isAsyncStorage = isAsyncStorage;\n        this.isComponentRelay = isComponentRelay;\n        this.isDiffed = isDiffed;\n        this.isGroupedComponents = isGroupedComponents;\n        this.isOrdered = isOrdered;\n        this.isReadOnly = isReadOnly;\n        this.isSymbolLeader = isSymbolLeader;\n        this.isSymbolRelay = isSymbolRelay;\n        this.onUpdate = onUpdate;\n        this.pageSize = pageSize;\n        this.responder = responder;\n        this.skipPending = skipPending;\n        this.types = types;\n        this.setGroupedValue = setGroupedValue;\n        this.updateOptions = updateOptions;\n        this.worldOptions = worldOptions;\n        // Object.assign(this, otherOptions)\n    }\n    /**\n     * Creates a new Options object from the current one.\n     *\n     * @param {Options | OptionsProps} options - The options for the node.\n     * @param {any} actionThis - The context for the actions.\n     */\n    clone() {\n        return new Options({ ...this }, this.actions);\n    }\n    /**\n     * Extends the current Options object.\n     *\n     * @param {Options | OptionsProps | Object} options - The options for the node.\n     * @param {any} actionThis - The context for the actions.\n     */\n    extend(options, actionThis = this.actions) {\n        return new Options({ ...this, ...options }, actionThis);\n    }\n}\nexport default Options;\n","import { now } from './utils.js';\n/**\n * The Ordered class represents a collection of tick values.\n *\n * @property {OrderedData} order - The collection of tick values.\n */\nexport class Ordered {\n    order;\n    /**\n     * Constructs a new Ordered object.\n     *\n     * @param {OrderedData} order - The initial tick values.\n     */\n    constructor(order = {}) {\n        this.order = order;\n    }\n    /**\n     * Changes the tick value of a component.\n     *\n     * @param {string} id - The ID of the component.\n     * @param {string} key - The key of the component.\n     * @param {number} tick - The new tick value.\n     * @returns {boolean} Whether the operation was successful.\n     */\n    changeComponent(id, key, tick) {\n        return this.upsertComponent(id, key, tick);\n    }\n    /**\n     * Resets the tick values.\n     *\n     * @param {OrderedData} order - The new tick values.\n     * @returns {Ordered} The Ordered object.\n     */\n    reset(order = {}) {\n        this.order = order;\n    }\n    /**\n     * Inserts or updates the tick value of a component.\n     *\n     * @param {string} id - The ID of the component.\n     * @param {string} key - The key of the component.\n     * @param {number} tick - The new tick value.\n     * @returns {boolean} Whether the operation was successful.\n     */\n    upsertComponent(id, key, tick) {\n        if (isNaN(tick)) {\n            return false;\n        }\n        this.order = this.order || {};\n        this.order[id] = this.order[id] || {};\n        switch (typeof this.order[id][key]) {\n            case 'number':\n                if (isFinite(this.order[id][key]) && this.order[id][key] <= tick) {\n                    const threshold = 0;\n                    if (tick > (now() + threshold)) {\n                        return false;\n                    }\n                    this.order[id][key] = tick;\n                    return true;\n                }\n                return false;\n            case 'undefined':\n            default:\n                this.order[id][key] = tick;\n                return true;\n        }\n    }\n}\nexport default Ordered;\n","/**\n * The Pending class represents a pending state with removed, updated, and created states.\n *\n * @property {RemovedState} removed - The removed state.\n * @property {UpdatedState} updated - The updated state.\n * @property {CreatedState} created - The created state.\n */\nexport class Pending {\n    /**\n     * Constructs a new Pending object and resets its state.\n     */\n    constructor(isDiffed = false) {\n        this.created = {\n            actors: {},\n            components: {},\n            entities: [],\n            inputs: {}\n        };\n        this.removed = {\n            actors: {},\n            components: {},\n            entities: []\n        };\n        this.updated = {\n            components: {}\n        };\n        this.symbols = [];\n        this.isDiffed = isDiffed;\n    }\n    /**\n     * Adds an actor input to the created inputs state.\n     *\n     * @param {string} id - The ID of the actor.\n     * @param {number} newindex - The index of the new input.\n     */\n    actorInput(id, newindex) {\n        this.created.inputs[id] = this.created.inputs[id] || [];\n        this.created.inputs[id].push(newindex);\n    }\n    /**\n     * Changes a component in the specified pending state.\n     *\n     * @param {string} pendingType - The type of the pending state (removed, updated, or created).\n     * @param {string} id - The ID of the entity.\n     * @param {string} key - The key of the component.\n     */\n    changeComponent(pendingType, id, key) {\n        return this.upsertComponent(pendingType, id, key);\n    }\n    /**\n     * Marks an entity as created in the created state.\n     *\n     * @param {string} id - The ID of the entity to create.\n     */\n    createEntity(id) {\n        this.created.entities.push(id);\n    }\n    /**\n     * Marks an actor as removed in the removed state.\n     *\n     * @param {string} id - The ID of the actor to remove.\n     */\n    removeActor(id) {\n        this.removed.actors[id] = true;\n    }\n    /**\n     * Marks a component as removed in the removed state.\n     *\n     * @param {string} id - The ID of the entity.\n     * @param {string} key - The key of the component to remove.\n     */\n    removeComponent(id, key) {\n        this.removed.components[id] = this.removed.components[id] || {};\n        this.removed.components[id][key] = true;\n    }\n    /**\n     * Marks an entity as removed in the removed state.\n     *\n     * @param {string} id - The ID of the entity to remove.\n     */\n    removeEntity(id) {\n        this.removed.entities.push(id);\n    }\n    /**\n     * Resets the state of the Pending object.\n     */\n    reset() {\n        this.constructor();\n    }\n    /**\n     * Marks an actor as spawned in the created state.\n     *\n     * @param {string} id - The ID of the actor to spawn.\n     */\n    spawnActor(id) {\n        this.created.actors[id] = true;\n    }\n    /**\n     * Inserts or updates a component in the specified pending state.\n     *\n     * @param {string} pendingType - The type of the pending state (created or updated).\n     * @param {string} id - The ID of the entity.\n     * @param {string} key - The key of the component.\n     */\n    upsertComponent(pendingType, id, key) {\n        const pending = pendingType === 'created' ? this.created : this.updated;\n        if (pending) {\n            if (\n            // !this.isDiffed // Diffed updates need to be created.\n            // &&\n            pendingType === 'updated'\n                && this.created.components[id]\n                && this.created.components[id][key]) {\n                // Skip updating a component that was created and updated in the same tick.\n                return;\n            }\n            pending.components[id] = pending.components[id] || {};\n            pending.components[id][key] = true;\n        }\n    }\n    /**\n     * Adds a symbol tuple to the symbols array.\n     *\n     * @param {any} symbolTuple - The symbol tuple to add.\n     */\n    addSymbol(symbolTuple) {\n        this.symbols.push(symbolTuple);\n    }\n    /**\n     * Replaces the symbols array with a new array of symbol tuples.\n     *\n     * @param {any[]} symbols - The new array of symbols.\n     */\n    replaceSymbols(offset, symbols) {\n        if (offset > 0) {\n            const { length } = symbols;\n            const { symbols: _symbols } = this;\n            for (let i = 0; i < length; i++) {\n                const value = symbols[i];\n                const index = i + offset;\n                _symbols[index] = [value, index];\n            }\n        }\n        else {\n            this.symbols = symbols.map((v, i) => [v, i]);\n        }\n    }\n}\nexport default Pending;\n","import { Index } from './index.js';\nimport { \n// SetExperimental,\ndifferenceSets, intersectionSets, unionSets, } from '../utils.js';\n/**\n * The Index class represents an index.\n */\nexport class ComponentsIndex extends Index {\n    constructor(items = {}, _options = {}) {\n        super(items);\n    }\n    /**\n     * The clear method clears the index.\n     */\n    clear() {\n        this.items = {};\n    }\n    /**\n     * The clone method clones the index.\n     */\n    clone() {\n        return new Index(this.items);\n    }\n    /**\n     * The get method gets a value from the index.\n     *\n     * @param {any} value - The value to get from the index.\n     * @returns {any} The value from the index.\n     */\n    get(value) {\n        return this.items[value];\n    }\n    /**\n     * The has method checks if a value is in the index.\n     *\n     * @param {any} value - The value to check in the index.\n     * @param {any} id - The ID of the value to check in the index.\n     * @returns {boolean} True if the value is in the index, false otherwise.\n     */\n    has(value, id) {\n        const ids = this.items[value];\n        if (ids && ids.has(id)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * The remove method removes a value from the index.\n     *\n     * @param {any} value - The value to remove from the index.\n     * @param {any} id - The ID of the value to remove from the index.\n     * @returns {any} The value removed from the index.\n     */\n    remove(value, id) {\n        const ids = this.items[value];\n        if (ids && ids.has(id)) {\n            ids.delete(id);\n            return true;\n        }\n    }\n    /**\n     * The set method sets a value to the index.\n     *\n     * @param {any} value - The value to set to the index.\n     * @param {any} id - The ID to set to the index.\n     * @returns {any} The value being set.\n     */\n    set(value, id) {\n        this.items[value] = this.items[value] || new Set();\n        if (this.items[value].has(id)) {\n            return false;\n        }\n        this.items[value].add(id);\n        return true;\n    }\n    /**\n     * The union method creates an union of two indexes.\n     *\n     * @param {string} key - The key of the index.\n     * @param {Index} other - The other index.\n     * @returns {Index} The union of the indexes.\n     */\n    union(key, other) {\n        return new ComponentsIndex({\n            ...this.items,\n            [key]: unionSets(this.items[key], other.items[key])\n        });\n    }\n    /**\n     * The difference method creates a difference of two indexes.\n     *\n     * @param {string} key - The key of the index.\n     * @param {Index} other - The other index.\n     * @returns {Index} The difference of the indexes.\n     */\n    difference(key, other) {\n        return new ComponentsIndex({\n            ...this.items,\n            [key]: differenceSets(this.items[key], other.items[key])\n        });\n    }\n    /**\n     * The intersection method creates an intersection of two indexes.\n     *\n     * @param {string} key - The key of the index.\n     * @param {Index} other - The other index.\n     * @returns {Index} The intersection of the indexes.\n     */\n    intersection(key, other) {\n        return new ComponentsIndex({\n            ...this.items,\n            [key]: intersectionSets(this.items[key], other.items[key])\n        });\n    }\n    /**\n    * The query method queries the index.\n    *\n    * @param {any} query - The query to use.\n    * @returns {any[]} The result of the query.\n    */\n    query(query) {\n        const { with: with_, without,\n        // where,\n         } = query || {};\n        let matches = new Set();\n        if (with_) {\n            for (const key of with_) {\n                const ids = this.items[key];\n                if (ids) {\n                    matches = unionSets(matches, ids);\n                }\n            }\n        }\n        if (without) {\n            for (const key of without) {\n                const ids = this.items[key];\n                if (ids) {\n                    matches = differenceSets(matches, ids);\n                }\n            }\n        }\n        return matches;\n    }\n}\n","import { SortedIndex } from './indexes/sorted.js';\nimport { SpatialIndex } from './indexes/spatial.js';\nimport { ComponentsIndex } from './indexes/components.js';\nimport { BasicTypes, ArrayTypes } from './types.js';\nimport { binarySearch } from './utils.js';\nimport { paginate } from './utils.js';\nexport * from './emitter.js';\n/**\n * The Indexes interface represents a mapping from keys to any array.\n */\nexport const IndexMap = {\n    sorted: SortedIndex,\n    spatial: SpatialIndex,\n};\n/**\n * The Storage class represents a store with actors, entities, components, and inputs.\n *\n * @property {string[]} actors - The actors in the store.\n * @property {string[]} entities - The entities in the store.\n * @property {Components} components - The components in the store.\n * @property {Inputs} inputs - The inputs in the store.\n * @property {Inputs} inputs - The inputs in the store.\n */\nexport class Storage {\n    // declare world?: any\n    /**\n     * Constructs a new Storage object.\n     *\n     * @param {StorageProps} store - The properties of the store.\n     */\n    constructor(store = {}, options = {}) {\n        const { actors = [], entities = [], components = {}, inputs = {} } = store || {};\n        const { types = {}, indexes = {},\n        // worldOptions,\n         } = options;\n        this.actors = actors || [];\n        this.entities = entities || [];\n        this.components = components || {};\n        this.inputs = inputs || {};\n        this.types = types;\n        this.typeCtors = {};\n        for (let key in types) {\n            let TypeCtor = types[key];\n            if (Array.isArray(TypeCtor)) {\n                TypeCtor = BasicTypes.get(TypeCtor[0]) || ArrayTypes.get(TypeCtor[0]);\n            }\n            else if (typeof TypeCtor === 'string') {\n                TypeCtor = BasicTypes.get(TypeCtor) || ArrayTypes.get(TypeCtor);\n            }\n            if (typeof TypeCtor === 'function') {\n                if (TypeCtor) {\n                    this.typeCtors[key] = TypeCtor;\n                }\n            }\n        }\n        this.componentsIndex = new ComponentsIndex();\n        this.indexes = {};\n        for (let key in indexes) {\n            const { type } = indexes[key];\n            const IndexCtor = IndexMap[type];\n            if (IndexCtor) {\n                this.indexes[key] = {\n                    actors: new IndexCtor([], indexes[key]),\n                    entities: new IndexCtor([], indexes[key]),\n                };\n            }\n        }\n    }\n    /**\n     * Removes an actor ID.\n     *\n     * @param {string} id - The ID of the actor to remove.\n     * @returns {boolean} True if the actor ID was removed, false otherwise.\n     */\n    destroyActor(id) {\n        const actors = this.actors;\n        return this.destroyId(actors, id);\n    }\n    /**\n     * Removes a component.\n     *\n     * @param {string} id - The ID of the component to remove.\n     * @param {string} key - The key of the component to remove.\n     */\n    destroyComponent(id, key) {\n        const prevValue = this.components[id][key];\n        delete this.components[id][key];\n        this.componentsIndex.remove(id, key);\n        if (this.indexes[key]) {\n            const index = this.indexes[key];\n            if (this.isActor(id)) {\n                index.actors.remove(id, prevValue);\n            }\n            else {\n                index.entities.remove(id, prevValue);\n            }\n        }\n    }\n    /**\n     * Removes an entity ID.\n     *\n     * @param {string} id - The ID of the entity to remove.\n     * @returns {boolean} True if the entity ID was removed, false otherwise.\n     */\n    destroyEntity(id) {\n        const entities = this.entities;\n        return this.destroyId(entities, id);\n    }\n    /**\n     * Removes an ID from a list if it exists.\n     *\n     * @param {string[]} list - The list to remove the ID from.\n     * @param {string} id - The ID to remove.\n     * @returns {boolean} True if the ID was removed, false otherwise.\n     */\n    destroyId(list, id) {\n        const [index] = binarySearch(list, id);\n        if (index !== -1) {\n            list.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Fetches a components container for an entity.\n     *\n     * @param {string} id - The ID of the entity.\n     * @returns {Components} The fetched components container.\n     */\n    fetchComponents(id) {\n        this.components[id] = this.components[id] || {};\n        return this.components[id];\n    }\n    /**\n     * Fetches a component.\n     *\n     * @param {string} id - The ID of the component to fetch.\n     * @param {string} key - The key of the component to fetch.\n     * @returns {any} The fetched component.\n     */\n    fetchComponent(id, key) {\n        this.components[id] = this.components[id] || {};\n        return this.components[id][key];\n    }\n    /**\n     * Fetches an actors inputs\n     *\n     * @param {string} id - The ID of the actor.\n     * @returns {InputPayload} The fetched inputs.\n     */\n    fetchInputs(id) {\n        return this.inputs[id];\n    }\n    /**\n     * Fetches an actors input\n     *\n     * @param {string} id - The ID of the actor.\n     * @param {number} index - The index of the input.\n     * @returns {InputPayload} The fetched inputs.\n     */\n    fetchInput(id, index) {\n        this.inputs[id] = this.inputs[id] || [];\n        const input = this.inputs[id][index];\n        if (Array.isArray(input)) {\n            return [{ ...input[0], id }, input[1]];\n        }\n        return { ...input, id };\n    }\n    /**\n     * Gets the actors.\n     *\n     * @param {any} query - The query to use.\n     * @param {number} pageSize - The page size to use.\n     * @returns {string[][]} The actors.\n     */\n    getActors(query = null, pageSize = Infinity) {\n        if (query !== null) {\n            let results = {};\n            for (let key in query) {\n                const index = this.indexes[key];\n                if (index) {\n                    const result = index.actors.query(query[key]);\n                    result.forEach((id) => {\n                        results[id] = true;\n                    });\n                }\n            }\n            const ids = Object.keys(results);\n            return paginate(ids, pageSize);\n        }\n        return paginate(this.actors, pageSize);\n    }\n    /**\n     * Gets the components.\n     *\n     * @param {any} query - The query to use.\n     * @param {number} pageSize - The page size to use.\n     * @returns {Components} The components.\n     */\n    getComponents(query = null, pageSize = Infinity) {\n        let object = this.components;\n        if (query !== null) {\n            const results = {};\n            for (let key of query) {\n                results[key] = this.components[key];\n            }\n            object = results;\n        }\n        const ids = Object.keys(object);\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const components = {};\n            for (let id of page) {\n                components[id] = object[id];\n            }\n            return components;\n        });\n    }\n    /**\n     * Gets the entities.\n     *\n     * @param {any} query - The query to use.\n     * @param {number} pageSize - The page size to use.\n     * @returns {string[]} The entities.\n     */\n    getEntities(query = null, pageSize = Infinity) {\n        if (query !== null) {\n            let results = {};\n            for (let key in query) {\n                const index = this.indexes[key];\n                if (index) {\n                    const result = index.entities.query(query[key]);\n                    result.forEach((id) => {\n                        results[id] = true;\n                    });\n                }\n            }\n            const ids = Object.keys(results);\n            return paginate(ids, pageSize);\n        }\n        return paginate(this.entities, pageSize);\n    }\n    /**\n     * Gets the inputs.\n     *\n     * @returns {Inputs} The inputs.\n     */\n    getInputs(query = null, pageSize = Infinity) {\n        let object = this.inputs;\n        if (query !== null) {\n            const results = {};\n            for (let key of query) {\n                results[key] = this.inputs[key];\n            }\n            object = results;\n        }\n        const ids = Object.keys(object);\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const inputs = {};\n            for (let id of page) {\n                inputs[id] = object[id];\n            }\n            return inputs;\n        });\n    }\n    /**\n     * Checks if an ID is an actor.\n     *\n     * @param {string} id - The ID to check.\n     * @returns {boolean} True if the ID is an actor, false otherwise.\n     */\n    isActor(id) {\n        const actors = this.actors;\n        return actors.indexOf(id) !== -1;\n    }\n    /**\n     * Checks if an ID is an entity.\n     *\n     * @param {string} id - The ID to check.\n     * @returns {boolean} True if the ID is an entity, false otherwise.\n     */\n    isEntity(id) {\n        const entities = this.entities;\n        return entities.indexOf(id) !== -1;\n    }\n    /**\n     * Sets the actors.\n     *\n     * @param {string[]} actors - The actors to set.\n     * @returns {string[]} The actors.\n     */\n    setActors(actors) {\n        this.actors = actors;\n        return actors;\n    }\n    /**\n     * Sets the components.\n     *\n     * @param {Components} components - The components to set.\n     * @returns {Components} The components.\n     */\n    setComponents(components) {\n        this.components = components;\n        return components;\n    }\n    /**\n     * Sets the entities.\n     *\n     * @param {string[]} entities - The entities to set.\n     * @returns {string[]} The entities.\n     */\n    setEntities(entities) {\n        this.entities = entities;\n        return entities;\n    }\n    /**\n     * Sets the inputs.\n     *\n     * @param {Inputs} inputs - The inputs to set.\n     * @returns {Inputs} The inputs.\n     */\n    setInputs(inputs) {\n        this.inputs = inputs;\n        return inputs;\n    }\n    /**\n     * Stores an actor ID.\n     *\n     * @param {string} id - The ID of the actor to store.\n     * @returns {boolean} True if the actor ID was stored, false otherwise.\n     */\n    storeActor(id) {\n        const actors = this.actors;\n        return this.storeId(actors, id);\n    }\n    /**\n     * Stores a component.\n     *\n     * @param {string} id - The ID of the component to store.\n     * @param {string} key - The key of the component to store.\n     * @param {any} value - The value of the component to store.\n     */\n    storeComponent(id, key, value) {\n        const prevValue = this.components[id][key];\n        this.components[id][key] = value;\n        this.componentsIndex.set(id, key);\n        if (this.indexes[key]) {\n            const index = this.indexes[key];\n            if (this.isActor(id)) {\n                index.actors.store(id, prevValue, value);\n            }\n            else {\n                index.entities.store(id, prevValue, value);\n            }\n        }\n    }\n    /**\n     * Stores an entity ID.\n     *\n     * @param {string} id - The ID of the entity to store.\n     * @returns {boolean} True if the entity ID was stored, false otherwise.\n     */\n    storeEntity(id) {\n        const entities = this.entities;\n        return this.storeId(entities, id);\n    }\n    /**\n     * Stores an ID in a list if it doesn't exist already.\n     *\n     * @param {string[]} list - The list to store the ID in.\n     * @param {string} id - The ID to store.\n     * @returns {boolean} True if the ID was stored, false otherwise.\n     */\n    storeId(list, id) {\n        const [index, left] = binarySearch(list, id);\n        if (index === -1) {\n            list.splice(left, 0, id);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Stores an input.\n     *\n     * @param {string} id - The ID of the input to store.\n     * @param {InputPayload} input - The payload of the input to store.\n     * @returns {number} The new index of the stored input.\n     */\n    storeInput(id, input, tick = 0) {\n        const inputs = this.inputs;\n        inputs[id] = inputs[id] || [];\n        const newindex = inputs[id].length;\n        if (input.id === id) {\n            delete input.id;\n        }\n        inputs[id].push(tick ? [input, tick] : input);\n        return newindex;\n    }\n    /**\n     * Queries the store for entities by component.\n     *\n     * @param {any} query - The query to use.\n     * @returns {Set<any>} The entities.\n     */\n    queryComponents(query) {\n        return this.componentsIndex.query(query);\n    }\n}\n","import { createEnum } from './utils.js';\n/**\n * The Symbols class represents a collection of symbols.\n */\nexport class Symbols {\n    _list;\n    _enum;\n    /**\n     * Constructs a new Symbols object.\n     *\n     * @param {object} object - An object containing an optional list of symbols.\n     */\n    constructor(object = {}) {\n        const { _list: symbols = [] } = object;\n        this._list = symbols;\n        this._enum = createEnum(symbols);\n    }\n    /**\n     * Adds a symbol to the Symbols object.\n     *\n     * @param {string} symbol - The symbol to be added.\n     * @returns {number | null} The index of the added symbol, or null if the symbol is not valid.\n     */\n    add(symbol) {\n        if (symbol) {\n            if (Object.prototype.hasOwnProperty.call(this._enum, symbol)) {\n                return this._enum[symbol];\n            }\n            else {\n                const end = this._list.length;\n                this._list[end] = symbol;\n                this._enum[symbol] = end;\n                return end;\n            }\n        }\n        return null;\n    }\n    /**\n     * Copies an enum into the Symbols object.\n     *\n     * @param {Enum} enumObj - The enum to be copied.\n     */\n    copyEnum(enumObj = {}) {\n        for (const symbolTuple of Object.entries(enumObj)) {\n            this.merge(symbolTuple);\n        }\n    }\n    /**\n     * Fetches a symbol and its index based on a payload.\n     *\n     * @param {number | string} payload - The payload, which can be either a symbol or an index.\n     * @returns {[string, number]} A tuple containing the symbol and its index.\n     */\n    fetch(payload) {\n        let index;\n        let symbol;\n        switch (typeof payload) {\n            case 'number':\n                index = payload;\n                symbol = this._list[index] || '';\n                break;\n            case 'string':\n                symbol = payload;\n                index = Object.prototype.hasOwnProperty.call(this._enum, symbol) ? this._enum[symbol] : -1;\n                break;\n        }\n        return [symbol, index];\n    }\n    /**\n     * Finds the index of a symbol.\n     *\n     * @param {string} symbol - The symbol to be found.\n     * @returns {number | undefined} The index of the symbol, or undefined if the symbol is not found.\n     */\n    find(symbol) {\n        return this._enum[symbol];\n    }\n    /**\n     * Gets the symbol at a specific index.\n     *\n     * @param {number} index - The index of the symbol.\n     * @returns {string | undefined} The symbol at the specified index, or undefined if there is no symbol at that index.\n     */\n    get(index) {\n        return this._list[index];\n    }\n    /**\n     * Returns the list of symbols.\n     *\n     * @returns {string[]} The list of symbols.\n     */\n    getSymbols() {\n        return this._list;\n    }\n    /**\n     * Returns the enum of symbols.\n     *\n     * @returns {Enum} The enum of symbols.\n     */\n    getSymbolsEnum() {\n        return this._enum;\n    }\n    /**\n     * Merges a symbol tuple into the Symbols object.\n     *\n     * @param {[string, number]} symbolTuple - The symbol tuple to be merged.\n     */\n    merge(symbolTuple) {\n        const [symbol, index] = symbolTuple;\n        this._list[index] = symbol;\n        this._enum[symbol] = index;\n    }\n    /**\n     * Resets the Symbols object with a new array of symbols.\n     *\n     * @param {string[]} symbolsArray - The new array of symbols.\n     */\n    reset(offset, symbolsArray = []) {\n        if (offset > 0) {\n            const { length } = symbolsArray;\n            const { _list } = this;\n            const { _enum } = this;\n            for (let i = 0; i < length; i++) {\n                const symbol = symbolsArray[i];\n                const index = i + offset;\n                _list[index] = symbol;\n                _enum[symbol] = index;\n            }\n        }\n        else {\n            this._list = symbolsArray;\n            this._enum = createEnum(symbolsArray);\n        }\n    }\n}\nexport default Symbols;\n/**\n * Extracts a symbol from a given index.\n *\n * @param {number | string} index - The index or symbol to be extracted.\n * @param {any} context - The context in which the symbol is to be extracted.\n * @param {any} options - The options for extracting the symbol.\n * @returns {string | number} The extracted symbol.\n */\nexport function extractSymbol(index, context, options) {\n    if (typeof index === 'number') {\n        const { actions } = options;\n        const { getSymbol } = actions;\n        const symbol = getSymbol(index, context, options);\n        if (!symbol) {\n            return '';\n        }\n        index = symbol;\n    }\n    return index;\n}\n/**\n * Ensures that a symbol is indexed.\n *\n * @param {number | string} symbol - The symbol to be indexed.\n * @param {any} context - The context in which the symbol is to be indexed.\n * @param {any} options - The options for indexing the symbol.\n * @returns {number | string} The indexed symbol.\n */\nexport function ensureSymbolIndex(symbol, context, options) {\n    if (typeof symbol === 'string') {\n        const { actions } = options;\n        const { addSymbol } = actions;\n        const index = addSymbol(symbol, context, options);\n        if (typeof index === 'number') {\n            return index;\n        }\n    }\n    return symbol;\n}\n/**\n * Recursively extracts symbols from a given value.\n *\n * @param {string} key - The key associated with the value.\n * @param {any} value - The value from which symbols are to be extracted.\n * @param {any} context - The context in which the symbols are to be extracted.\n * @param {any} options - The options for extracting symbols.\n * @returns {any} The value with extracted symbols.\n */\nexport function recursiveSymbolExtraction(key, value, context, options) {\n    if (key.charAt(0) === '$') {\n        const { actions } = options;\n        const { getSymbol } = actions;\n        const recursiveFix = (value) => {\n            if (Array.isArray(value)) {\n                value = value.map(recursiveFix);\n            }\n            else {\n                switch (typeof value) {\n                    case 'number': {\n                        const symbol = getSymbol(value, context, options);\n                        if (symbol) {\n                            value = symbol;\n                        }\n                        break;\n                    }\n                    case 'object':\n                        for (const key in value) {\n                            value[key] = recursiveFix(value[key]);\n                        }\n                        break;\n                }\n                return value;\n            }\n        };\n        return recursiveFix(value);\n    }\n    return value;\n}\n/**\n * Recursively ensures that symbols in a given value are indexed.\n *\n * @param {string} key - The key associated with the value.\n * @param {any} value - The value in which symbols are to be indexed.\n * @param {any} context - The context in which the symbols are to be indexed.\n * @param {any} options - The options for indexing symbols.\n * @returns {any} The value with indexed symbols.\n */\nexport function recursiveSymbolIndexesEnsured(key, value, context, options) {\n    if (key.charAt(0) === '$') {\n        const { actions } = options;\n        const { addSymbol } = actions;\n        const recursiveFix = (value) => {\n            if (Array.isArray(value)) {\n                value = value.map(recursiveFix);\n            }\n            else {\n                switch (typeof value) {\n                    case 'string': {\n                        const symbol = addSymbol(value, context, options);\n                        if (typeof symbol === 'number') {\n                            value = symbol;\n                        }\n                        break;\n                    }\n                    case 'object':\n                        for (const key in value) {\n                            value[key] = recursiveFix(value[key]);\n                        }\n                        break;\n                }\n                return value;\n            }\n        };\n        return recursiveFix(value);\n    }\n    return value;\n}\n","export const BasicTypes = new Map([\n    // ['eid', Uint32Array],\n    // ['sid', Uint32Array],\n    // ['sym', String],\n    ['str', String],\n    ['num', Number],\n    ['bool', Boolean],\n    ['map', Map],\n    ['set', Set],\n    ['arr', Array],\n]);\nexport const ArrayTypes = new Map([\n    ['i8', Int8Array],\n    ['ui8', Uint8Array],\n    ['ui8c', Uint8ClampedArray],\n    ['i16', Int16Array],\n    ['ui16', Uint16Array],\n    ['i32', Int32Array],\n    ['ui32', Uint32Array],\n    ['f32', Float32Array],\n    ['f64', Float64Array],\n]);\n","import { Options } from './options.js';\nimport { ensureSymbolIndex, recursiveSymbolIndexesEnsured } from './symbols.js';\nimport { ArrayTypes } from './types.js';\nimport { now, concatTypedArray } from './utils.js';\n/**\n * The updater function updates the context based on the provided options.\n *\n * @param {Context} context - The current context.\n * @param {Options | any} options - The options for updating the context.\n * @param {number} tick - The current tick.\n * @returns {Promise<any[]>} A promise that resolves to an array of arrays, where each sub-array represents a batch of updates. This is only relevant if the `batched` option is enabled.\n */\nexport async function updater(context, options, tick = now()) {\n    options = options instanceof Options ? options : new Options(options);\n    const { responder, enumDefaultSymbols, compressStringsAsInts, enableRollback, isOrdered, isDiffed, isGroupedComponents, isAsyncStorage, types, setGroupedValue, updateOptions } = options;\n    const { batched, batchSize, mask, type, validKeys } = updateOptions;\n    if (!context.pending) {\n        return [];\n    }\n    /**\n     * An array of arrays, where each sub-array represents a batch of updates.\n    */\n    const batch = [];\n    /**\n     * An array representing the current batch of updates.\n    */\n    let batchBlock = [];\n    const { created = {}, removed = {}, symbols = [], updated = {} } = context.pending;\n    const store = context.store;\n    /**\n     * Merges the current batch block into the batch array.\n     *\n     * @param {string | number} action - The action associated with the current batch block.\n     */\n    const mergeBatch = (action) => {\n        if (batched && batchBlock.length) {\n            batch.push([action, ...batchBlock]);\n            batchBlock = [];\n        }\n    };\n    /**\n     * Queues a message for later processing.\n     *\n     * @param {string | number} action - The action associated with the message.\n     * @param {any} payload - The payload of the message.\n     */\n    const queueMessage = (action, payload) => {\n        if (batched) {\n            // batchBlock.push(payload)\n            batchBlock = batchBlock.concat(payload);\n            if (batchBlock.length >= batchSize) {\n                mergeBatch(action);\n            }\n        }\n        else {\n            if (compressStringsAsInts) {\n                action = ensureSymbolIndex(action, context, options);\n            }\n            responder([action, payload], type);\n        }\n    };\n    /**\n     * Ensures that a symbol is indexed if the `compressStringsAsInts` option is enabled.\n     *\n     * @param {string | number} symbol - The symbol to be indexed.\n     * @returns {string | number} The indexed symbol, or the original symbol if `compressStringsAsInts` is not enabled.\n     */\n    const ensureSymbol = (symbol) => {\n        if (compressStringsAsInts) {\n            symbol = ensureSymbolIndex(symbol, context, options);\n        }\n        return symbol;\n    };\n    const upsertComponents = async (pendingComponents = {}, state) => {\n        const groups = isGroupedComponents ? {} : null;\n        for (const id in (pendingComponents ?? {})) {\n            const components = isAsyncStorage ? await store.fetchComponents(id) : store.fetchComponents(id);\n            if (!components) {\n                break;\n            }\n            const updatedComponents = pendingComponents ? pendingComponents[id] : {};\n            for (const key in (updatedComponents ?? {})) {\n                if (validKeys && !validKeys[key]) {\n                    break;\n                }\n                const type = types[key] ?? null;\n                const Type = type ? ArrayTypes.get(Array.isArray(type) ? type[0] : type) : null;\n                let group = null;\n                if (groups) {\n                    group = groups[key] = groups[key] ?? {\n                        key,\n                        ids: compressStringsAsInts ? new Uint32Array(0) : [],\n                        intIds: true,\n                        values: Type ? new Type(0) : [],\n                        ticks: new Uint32Array(0),\n                    };\n                }\n                let value = isAsyncStorage ? await store.fetchComponent(id, key) : store.fetchComponent(id, key);\n                if (isDiffed && context.changes && (state === 'updated' || !true)) {\n                    value = context.changes.getValue(id, key, value);\n                }\n                if (compressStringsAsInts) {\n                    value = recursiveSymbolIndexesEnsured(key, value, context, options);\n                }\n                const nid = ensureSymbol(id);\n                const nkey = ensureSymbol(key);\n                if (groups) {\n                    group.ids = compressStringsAsInts\n                        ? concatTypedArray(group.ids, [nid])\n                        : group.ids.concat([id]);\n                    if (nid === id) {\n                        group.intIds = false;\n                    }\n                    group.values = Type\n                        ? concatTypedArray(group.values, setGroupedValue(value, types, key))\n                        : group.values.concat(setGroupedValue(value, types, key));\n                    if (isOrdered) {\n                        group.ticks = concatTypedArray(group.ticks, [isDiffed ? -tick : tick]);\n                    }\n                    continue;\n                }\n                const payload = [nid, nkey, value];\n                if (isOrdered) {\n                    payload.push(isDiffed ? -tick : tick);\n                }\n                if (isDiffed) {\n                    queueMessage(enumDefaultSymbols.changeComponent, payload);\n                }\n                else {\n                    queueMessage(enumDefaultSymbols.upsertComponent, payload);\n                }\n            }\n            // delete pendingComponents[id];\n        }\n        if (groups) {\n            for (const key in groups) {\n                const group = groups[key];\n                const bufferIds = compressStringsAsInts && group.intIds ? new Uint32Array(group.ids) : group.ids;\n                const type = types[key] ?? null;\n                const Type = type ? ArrayTypes.get(Array.isArray(type) ? type[0] : type) : null;\n                const bufferValues = Type ? new Type(group.values) : group.values;\n                let i = 0;\n                const size = bufferIds.length;\n                for (; i < size; i += batchSize) {\n                    const payload = [\n                        bufferIds.slice(i, i + batchSize),\n                        group.key,\n                        bufferValues.slice(i, i + batchSize)\n                    ];\n                    if (isOrdered) {\n                        const bufferTicks = new Uint32Array(group.ticks.slice(i, i + batchSize));\n                        payload.push(bufferTicks);\n                    }\n                    if (isDiffed) {\n                        queueMessage(enumDefaultSymbols.changeComponent, payload);\n                    }\n                    else {\n                        queueMessage(enumDefaultSymbols.upsertComponent, payload);\n                    }\n                }\n            }\n        }\n        mergeBatch(isDiffed ? enumDefaultSymbols.changeComponent : enumDefaultSymbols.upsertComponent);\n    };\n    /**\n     * If the `mask` object does not exist or does not have an `entities` property,\n     * this code block ensures that each entity in the `created.entities` array is indexed,\n     * queues a message to create each entity, merges the batch of messages, and then clears the `created.entities` array.\n     */\n    if (!mask || !mask.entities) {\n        for (const key of created.entities ?? []) {\n            const nkey = ensureSymbol(key);\n            queueMessage(enumDefaultSymbols.createEntity, nkey);\n        }\n        mergeBatch(enumDefaultSymbols.createEntity);\n        created.entities = [];\n    }\n    /**\n     * If the `mask` object does not exist or does not have an `actors` property,\n     * this code block ensures that each actor in the `created.actors` array is indexed,\n     * queues a message to spawn each actor, merges the batch of messages, and then clears the `created.actors` array.\n     */\n    if (!mask || !mask.actors) {\n        for (const id in (created.actors ?? {})) {\n            const nid = ensureSymbol(id);\n            queueMessage(enumDefaultSymbols.spawnActor, nid);\n        }\n        mergeBatch(enumDefaultSymbols.spawnActor);\n        created.actors = {};\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `removed.components` object is indexed,\n     * queues a message to remove each component, merges the batch of messages, and then clears the `removed.components` object.\n     */\n    if (!mask || !mask.entities) {\n        for (const key of removed.entities ?? []) {\n            const nkey = ensureSymbol(key);\n            queueMessage(enumDefaultSymbols.removeEntity, nkey);\n        }\n        mergeBatch(enumDefaultSymbols.removeEntity);\n        removed.entities = [];\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `removed.components` object is indexed,\n     * queues a message to remove each component, merges the batch of messages, and then clears the `removed.components` object.\n     */\n    if (!mask || !mask.actors) {\n        for (const id in (removed.actors ?? {})) {\n            const nid = ensureSymbol(id);\n            queueMessage(enumDefaultSymbols.removeActor, nid);\n        }\n        mergeBatch(enumDefaultSymbols.removeActor);\n        removed.actors = {};\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `removed.components` object is indexed,\n     * queues a message to remove each component, merges the batch of messages, and then clears the `removed.components` object.\n     */\n    if (!mask || !mask.components) {\n        for (const id in (removed.components ?? {})) {\n            const components = removed?.components ? removed.components[id] : null;\n            if (!components) {\n                break;\n            }\n            const nid = ensureSymbol(id);\n            for (const key in components) {\n                if (validKeys && !validKeys[key]) {\n                    break;\n                }\n                const nkey = ensureSymbol(key);\n                const payload = [nid, nkey];\n                queueMessage(enumDefaultSymbols.removeComponent, payload);\n            }\n            // delete removed.components[key]\n        }\n        mergeBatch(enumDefaultSymbols.removeComponent);\n        removed.components = {};\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `created.components` object is indexed,\n     * queues a message to create each component, merges the batch of messages, and then clears the `created.components` object.\n     */\n    if (!mask || !mask.components) {\n        const promise = upsertComponents(created.components, 'created');\n        created.components = {};\n        await promise;\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `updated.components` object is indexed,\n     * queues a message to update each component, merges the batch of messages, and then clears the `updated.components` object.\n     */\n    if (!mask || !mask.components) {\n        const promise = upsertComponents(updated.components, 'updated');\n        updated.components = {};\n        await promise;\n    }\n    /**\n     * If the `mask` object does not exist or does not have an `inputs` property,\n     * this code block ensures that each input in the `created.inputs` object is indexed,\n     * queues a message to create each input, merges the batch of messages, and then clears the `created.inputs` object.\n     */\n    if (!mask || !mask.inputs) {\n        for (const id in (created.inputs ?? {})) {\n            // const nid = ensureSymbol(id)\n            const createdInputs = created?.inputs ? (created.inputs[id] ?? []) : [];\n            for (let i = 0; i < createdInputs.length; i += 1) {\n                const index = createdInputs[i];\n                const payload = isAsyncStorage ? await store.fetchInput(id, index) : store.fetchInput(id, index);\n                const isTuple = Array.isArray(payload);\n                const input = isTuple ? payload[0] : payload;\n                const tick_ = isTuple ? payload[1] : tick;\n                queueMessage(enumDefaultSymbols.actorInput, isTuple || enableRollback ? [input, tick_] : input);\n            }\n            // delete created.inputs[id];\n        }\n        mergeBatch(enumDefaultSymbols.actorInput);\n        created.inputs = {};\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `symbols` property,\n     * this code block ensures that each symbol in the `symbols` array is indexed,\n     * queues a message to add each symbol, merges the batch of messages, and then clears the `symbols` array.\n     */\n    if (!mask || !mask.symbols) {\n        for (const symbolOp of symbols) {\n            if (batched) {\n                batchBlock.push(symbolOp);\n            }\n            else {\n                const message = [enumDefaultSymbols.mergeSymbol, symbolOp];\n                await responder(message, type);\n            }\n            if (batchBlock.length >= batchSize && batchBlock.length) {\n                batch.unshift([enumDefaultSymbols.mergeSymbol].concat(batchBlock));\n                batchBlock = [];\n            }\n        }\n        if (batched && batchBlock.length) {\n            batch.unshift([enumDefaultSymbols.mergeSymbol].concat(batchBlock));\n            batchBlock = [];\n        }\n        context.pending.symbols = [];\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `symbols` property,\n     * this code block ensures that each symbol in the `symbols` array is indexed,\n     * queues a message to add each symbol, merges the batch of messages, and then clears the `symbols` array.\n     */\n    if (batched && batch.length) {\n        for (let i = 0; i < batch.length; i += 1) {\n            const batchSlice = batch[i];\n            if (batchSlice) {\n                await responder([enumDefaultSymbols.batch, batchSlice]);\n                // if (batchSlice.length > 1) {\n                //   responder([enumDefaultSymbols.batch].concat(batchSlice))\n                // } else {\n                //   responder(batchSlice)\n                // }\n            }\n        }\n    }\n    return batch;\n}\nexport default updater;\n","/**\n * @returns {number} The current time in milliseconds.\n */\nexport function now() {\n    return performance.timeOrigin + performance.now();\n}\n/**\n * Concatenates two typed arrays or arrays.\n *\n * @param {TypedArray | any[]} a - The first typed array or array.\n * @param {TypedArray | any[]} b - The second typed array or array.\n * @returns {TypedArray | any[]} The concatenated typed array or array.\n */\nexport function concatTypedArray(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        return a.concat(b);\n    }\n    else if (Array.isArray(a)) {\n        const a_ = new b.constructor(a.length);\n        a_.set(a);\n        a = a_;\n    }\n    else if (Array.isArray(b)) {\n        const b_ = new a.constructor(b.length);\n        b_.set(b);\n        b = b_;\n    }\n    const c = new a.constructor(a.length + b.length);\n    if (c.set) {\n        c.set(a);\n        c.set(b, a.length);\n    }\n    return c;\n}\n/**\n * Creates a union of multiple sets or arrays.\n *\n * @param {...Array<SetOrArray<any>>} sets - The sets or arrays to be united.\n * @returns {Array<string>} The union of the sets or arrays.\n */\nexport function unionSetOrArray(...sets) {\n    const union = {};\n    for (const set of sets) {\n        if (set) {\n            for (const v of set) {\n                union[v] = true;\n            }\n        }\n    }\n    return Object.keys(union);\n}\n/**\n * Creates an union of two sets.\n *\n * @param {SetExperimental} setA - The first set.\n * @param {SetExperimental} setB - The second set.\n * @returns {Set<any>} The union of the sets.\n */\nexport function unionSets(setA, setB) {\n    if (typeof setA.union === 'function') {\n        return setA.union(setA);\n    }\n    const union = new Set();\n    for (const v of setA)\n        union.add(v);\n    for (const v of setB)\n        union.add(v);\n    return union;\n}\n/**\n * Creates an difference of the two sets.\n *\n * @param {SetExperimental} setA - The first set.\n * @param {SetExperimental} setB - The second set.\n * @returns {Set<any>} The difference of the sets.\n */\nexport function differenceSets(setA, setB) {\n    if (typeof setA.difference === 'function') {\n        return setA.difference(setA);\n    }\n    const difference = new Set();\n    for (const v of setA)\n        if (!setB.has(v))\n            difference.add(v);\n    return difference;\n}\n/**\n * Creates an intersection of the two sets.\n *\n * @param {SetExperimental} setA - The first set.\n * @param {SetExperimental} setB - The second set.\n * @returns {Set<any>} The intersection of the sets.\n */\nexport function intersectionSets(setA, setB) {\n    if (typeof setA.intersection === 'function') {\n        return setA.intersection(setA);\n    }\n    const intersection = new Set();\n    for (const v of setA)\n        if (setB.has(v))\n            intersection.add(v);\n    return intersection;\n}\n/**\n * binaryInsert finds the index of where a value should be inserted into a sorted array.\n *\n * @param {any[]} items - The sorted array\n * @param {any} value - The value to insert\n * @param {Function} getValue - The function to get the value from the item\n * @returns {number} The index of where the value should be inserted\n */\nexport function binaryInsert(items, value, getValue = (v) => v) {\n    let low = 0;\n    let high = items.length;\n    while (low < high) {\n        const mid = (low + high) >>> 1;\n        const item = items[mid];\n        const v = getValue(item);\n        if (v < value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\n/**\n * binarySearch finds the index of a value in a sorted array.\n *\n * @param {any[]} items - The sorted array\n * @param {any} target - The value to find\n * @param {Function} getValue - The function to get the value from the item\n * @returns {number[]} The index of the value\n */\nexport function binarySearch(items, target, getValue = (v) => v) {\n    let left = 0;\n    let right = items.length - 1;\n    while (left <= right) {\n        const mid = (left + right) >>> 1;\n        const item = items[mid];\n        const v = getValue(item);\n        if (v === target) {\n            return [mid, left];\n        }\n        else if (v < target) {\n            left = mid + 1;\n        }\n        else {\n            right = mid - 1;\n        }\n    }\n    return [-1, left];\n}\n/**\n * Creates an enum from a set or an array.\n *\n * @param {SetOrArray<any>} set - The set or array from which the enum is to be created.\n * @param {number} offset - The starting value of the enum.\n * @returns {Record<string, number>} The created enum.\n */\nexport function createEnum(set, offset = 0) {\n    const _enum = {};\n    let i = offset;\n    if (set) {\n        for (const v of set) {\n            _enum[v] = i++;\n        }\n    }\n    return _enum;\n}\n/**\n * Creates a tuple from a message.\n *\n * @param {{ action?: any, payload?: any }} message - The message from which the tuple is to be created.\n * @returns {Array<any>} The created tuple.\n */\nexport function messageTuple(message) {\n    return [message?.action, message?.payload];\n}\n/**\n * Split an array into pages\n *\n * @param {any[]} array - The array to be split into pages.\n * @param {number} pageSize - The size of each page.\n * @returns {any[][]} The array of pages.\n */\nexport function paginate(array, pageSize) {\n    const pages = [];\n    let page = [];\n    let i = 0;\n    for (const v of array) {\n        if (i >= pageSize) {\n            pages.push(page);\n            page = [];\n            i = 0;\n        }\n        page.push(v);\n        i++;\n    }\n    if (page.length > 0) {\n        pages.push(page);\n    }\n    return pages;\n}\n/**\n * Determines the type of a value.\n *\n * @param {any} v - The value whose type is to be determined.\n * @returns {string} The type of the value.\n */\nexport function typeOf(v) {\n    const t = typeof v;\n    if (t === 'object') {\n        if (!v) {\n            return 'null';\n        }\n        else if (Array.isArray(v)) {\n            return 'array';\n        }\n    }\n    return t;\n}\n/**\n * Combines two values.\n *\n * @param {any} objA - The first value.\n * @param {any} objB - The second value.\n * @returns {[boolean, any]} A tuple where the first element is a boolean indicating whether the values were combined, and the second element is the combined value.\n */\nexport function combineValues(objA, objB) {\n    return recursiveCombination(objA, objB);\n}\n/**\n * Recursively combines two objects or arrays and returns the result.\n * If the combination is successful, it returns a tuple with a boolean indicating success and the combined object/array.\n * If the combination fails, it returns a tuple with a boolean indicating failure and the second object/array.\n * @param objA - The first object/array to combine.\n * @param objB - The second object/array to combine.\n * @returns A tuple with a boolean indicating success/failure and the combined object/array.\n */\nexport function recursiveCombination(objA, objB) {\n    const typeA = typeOf(objA);\n    const typeB = typeOf(objB);\n    switch (typeB) {\n        case 'bigint':\n        case 'number': {\n            if (typeA !== 'number' && typeA !== 'bigint') {\n                return [false, objB];\n            }\n            return [true, objA + objB];\n        }\n        case 'array': {\n            if (typeA !== 'array') {\n                return [false, objB];\n            }\n            const newArr = [];\n            let combined = true;\n            for (let i = 0; i < objB.length; i += 1) {\n                const [c, value] = recursiveCombination(objA[i], objB[i]);\n                newArr[i] = value;\n                if (c === false) {\n                    combined = false;\n                }\n            }\n            return [combined, newArr];\n        }\n        case 'object': {\n            if (typeA !== 'object') {\n                return [false, objB];\n            }\n            const newObj = {};\n            let combined = true;\n            for (const k in objB) {\n                const [c, value] = recursiveCombination(objA[k], objB[k]);\n                if (c === false) {\n                    combined = false;\n                }\n                newObj[k] = value;\n            }\n            return [combined, newObj];\n        }\n        default:\n            return [false, objB];\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".echo-d.min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t647: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = Object(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this)[\"webpackChunkechoD\"] = Object(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this)[\"webpackChunkechoD\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","/**\n * Emitter\n *\n * @template T\n * @class Emitter\n * @description An Emitter is a class that emits values to its handlers.\n * @property {Function[]} handlers - The handlers of the Emitter.\n * @method emitTo - Adds a handler to the Emitter and returns the handler.\n * @method emit - Emits a value to the handlers of the Emitter.\n * @example\n * const emitter = new Emitter()\n * const handler = emitter.emitTo((value) => {\n *  console.log(value)\n * })\n * emitter.emit('Hello, world!')\n * // => 'Hello, world!'\n */\nexport class Emitter {\n    handlers;\n    /**\n     * Constructs a new Emitter object.\n     */\n    constructor() {\n        this.handlers = [];\n    }\n    /**\n     * Adds a handler to the Emitter and returns the handler.\n     *\n     * @param {Function} handler - The handler to add to the Emitter.\n     * @returns {Function} The handler.\n     */\n    emitTo(handler) {\n        this.handlers.push(handler);\n        return handler;\n    }\n    /**\n     * Emits a value to the handlers of the Emitter.\n     *\n     * @param {T} value - The value to emit to the handlers of the Emitter.\n     */\n    emit(value) {\n        for (const handler of this.handlers) {\n            handler(value);\n        }\n    }\n}\n","import nodeActions, { NodeActions } from './node.js';\nexport class ClientActions extends NodeActions {\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    actors() { }\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    components() { }\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    entities() { }\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    symbol() { }\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    symbols() { }\n}\n/**\n * An object that maps the names of actions.\n */\nexport const actions = {\n    /**\n     * The actions related to nodes, imported from the node module.\n     */\n    ...nodeActions,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    actors: null,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    components: null,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    entities: null,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    symbol: null,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    symbols: null\n};\nexport default actions;\n","/**\n * Exports all the constants.\n */\nexport * from './constants.js';\n// Index Classes\n/**\n * Exports all the indexes-related functions and classes.\n */\nexport * from './indexes/index.js';\n/**\n * Exports all the indexes-related functions and classes.\n */\nexport * from './indexes/sorted.js';\n/**\n * Exports all the indexes-related functions and classes.\n */\nexport * from './indexes/spatial.js';\n// Main Classes\n/**\n * Exports all the actions-related functions and classes.\n */\nexport * from './changes.js';\n/**\n * Exports all the context-related functions and classes.\n*/\nexport * from './context.js';\n/**\n * Exports all the actions-related functions and classes.\n */\nexport * from './emitter.js';\n/**\n * Exports all the handler-related functions and classes.\n */\nexport * from './handler.js';\n/**\n * Exports all the options-related functions and classes.\n */\nexport * from './options.js';\n/**\n * Exports all the actions-related functions and classes.\n */\nexport * from './ordered.js';\n/**\n * Exports all the pending-related functions and classes.\n */\nexport * from './pending.js';\n/**\n * Exports all the store-related functions and classes.\n */\nexport * from './storage.js';\n/**\n * Exports all the symbols-related functions and classes.\n */\nexport * from './symbols.js';\n/**\n * Exports all the types-related functions and classes.\n */\nexport * from './types.js';\n// Utils\n/**\n * Exports all the updater-related functions and classes.\n */\nexport * from './updater.js';\n/**\n * Exports all the utility functions.\n */\nexport * as utils from './utils.js';\n// Node Actions\n/**\n * Exports all the node-related functions and classes.\n */\nexport * as Node from './node.js';\n/**\n * Exports all the client-related functions and classes.\n */\nexport * as Client from './client.js';\n// Action Modules\n/**\n * Exports all the actions-related functions and classes.\n */\nexport * as Actor from './actions/actor.js';\n/**\n * Exports all the component-related functions and classes.\n */\nexport * as Component from './actions/component.js';\n/**\n * Exports all the core-related functions and classes.\n */\nexport * as Core from './actions/core.js';\n/**\n * Exports all the entity-related functions and classes.\n */\nexport * as Entitity from './actions/entity.js';\n/**\n * Exports all the entity-related functions and classes.\n */\nexport * as Symbol from './actions/symbol.js';\n// default export is the Handler class\nimport Handler from './handler.js';\nexport default Handler;\n"],"names":["root","factory","exports","module","define","amd","window","global","self","this","webpackQueues","webpackExports","webpackError","resolveQueue","deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","ActorActionsFactory","Parent","Object","actorInput","payload","context","options","getActorId","compressStringsAsInts","input","tick","Array","isArray","id","actors","responder","isAuthority","isAsyncStorage","pageSize","enableQuerying","enumDefaultSymbols","sendActors","pages","page","mergeActors","ctxActors","getActors","emitTo","removeActor","skipPending","spawnActor","ActorActions","__ActorActions__","actions","ComponentActionsFactory","changeComponent","types","isOrdered","key","value","type","String","components","sendComponents","mergeComponents","ctxComponents","getComponents","removeComponent","upsertComponent","ComponentActions","__ComponentActions__","CoreActionsFactory","batch","CoreActions","EntityActionsFactory","createEntity","entities","sendEntities","mergeEntities","ctxEntities","getEntities","removeEntity","EntityActions","__EntityActions__","SymbolActionsFactory","addSymbol","symbol","fetchSymbol","symbolTuple","mergeSymbol","getSymbol","index","mergeSymbols","offset","symbols","length","resetSymbols","enumSymbols","symbolsEnum","prototype","hasOwnProperty","call","_","symbolsList","paginate","i","SymbolActions","__SymbolActions__","Changes","diffs","constructor","changes","newValue","prevValue","getValue","storedValue","diffedValue","reset","_prevValue","currentScope","store","fetchComponents","storeComponent","diffObject","recursiveDiff","diff","scope","currVal","nextVal","prevType","typeOf","nextType","d","toString","k","Actions","CommonComponents","DefaultSymbols","unionSetOrArray","padEnum","enumActions","createEnum","enumCommonComponents","batchActionPayloadSizes","default","rollback","ordered","defaultOptions","enableRollback","isComponentRelay","isDiffed","isGroupedComponents","isReadOnly","isSymbolLeader","isSymbolRelay","indexes","position","asset","collider","color","hidden","rotation","velocity","spin","size","defaultUpdateOptions","mask","inputs","batched","batchSize","defaultValidKeys","voidResponder","defaultGetActorId","_context","defaultGetGroupedValue","slice","defaultSetGroupedValue","_types","_key","Context","static","_Storage","events","order","pending","allActions","worldOptions","copyEnum","Infinity","query","onUpdate","storeActor","emit","destroyActor","nextOptions","extend","storeEntity","destroyEntity","getGroupedValue","Uint32Array","Error","noUpdateOptions","val","currentValue","fetchComponent","pendingType","nextValue","combineValues","undefined","destroyComponent","nextPayload","getInputs","now","newindex","storeInput","getSymbols","getSymbolsEnum","setSymbols","get","add","onMatch","fetch","merge","replaceSymbols","resetFrame","getSymbolAction","action","defaultSymbols","getActionHandler","handler","oneHandler","message","actionHandler","manyHandler","iterator","payloadSize","Handler","one","extendOptions","many","updater","queryComponents","Index","items","_options","clear","clone","_value","has","_id","remove","set","preValue","_query","SortedIndex","super","item","find","indexOf","low","binaryInsert","ids","lastIndexOf","splice","binaryRemoveID","push","binaryInsertID","SpatialIndex","cellSize","hash","hash2d","hash3d","x","y","Math","floor","z","binarySearch","left","results","o","xx","yy","concat","zz","AllActionsFactory","NodeActions","__NodeActions__","Options","setGroupedValue","updateOptions","actionsThis","overridenUpdateOptions","validKeys","actionThis","Ordered","isNaN","isFinite","threshold","Pending","created","removed","updated","_symbols","map","v","ComponentsIndex","delete","Set","union","other","unionSets","difference","differenceSets","intersection","intersectionSets","with","with_","without","matches","IndexMap","sorted","spatial","Storage","typeCtors","TypeCtor","componentsIndex","IndexCtor","destroyId","isActor","list","fetchInputs","fetchInput","forEach","keys","object","isEntity","setActors","setComponents","setEntities","setInputs","storeId","Symbols","_list","_enum","end","enumObj","entries","symbolsArray","extractSymbol","ensureSymbolIndex","recursiveSymbolExtraction","charAt","recursiveFix","recursiveSymbolIndexesEnsured","BasicTypes","Map","Number","Boolean","ArrayTypes","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Float32Array","Float64Array","async","batchBlock","mergeBatch","queueMessage","ensureSymbol","upsertComponents","pendingComponents","state","groups","updatedComponents","Type","group","intIds","values","ticks","nid","nkey","concatTypedArray","bufferIds","bufferValues","bufferTicks","promise","createdInputs","isTuple","tick_","symbolOp","unshift","batchSlice","performance","timeOrigin","a","b","a_","b_","c","sets","setA","setB","high","mid","target","right","messageTuple","array","t","objA","objB","recursiveCombination","typeA","newArr","combined","newObj","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","Symbol","queue","fn","r","body","hasAwait","currentDeps","outerResolve","reject","depQueues","Promise","resolve","rej","deps","dep","then","obj","e","ret","wrapDeps","getResult","fnQueue","q","err","O","result","chunkIds","priority","notFulfilled","fulfilled","j","every","getPrototypeOf","mode","__esModule","ns","create","def","current","getOwnPropertyNames","definition","defineProperty","enumerable","f","chunkId","all","reduce","promises","u","g","globalThis","Function","prop","l","url","done","script","needAttach","scripts","document","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","appendChild","toStringTag","scriptUrl","importScripts","location","currentScript","replace","p","installedChunks","installedChunkData","error","errorType","realSrc","name","request","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","Emitter","handlers","ClientActions","node"],"sourceRoot":""}