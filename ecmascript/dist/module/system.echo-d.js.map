{"version":3,"file":"system.echo-d.js","mappings":";;;;;;;;;;;;;;;;;;;AAAwC;AACA;AACjC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8CAA8C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACO,4BAA4B,gDAAO;AAC1C,sDAAsD,gDAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://echo-d/./lib/extra/system.js"],"sourcesContent":["import { Handler } from '../handler.js';\nimport { Storage } from '../storage.js';\nexport class System {\n    static query(handler, query) {\n        return handler.queryComponents(query);\n    }\n    constructor(handler, name = '', components, exclude = new Set()) {\n        this.name = name || this.constructor.name;\n        this.handler = handler;\n        this.exclude = exclude;\n        this.components = components;\n    }\n    query() {\n        this.entities = System.query(this.handler, { with: this.components, without: this.exclude });\n        return this.entities;\n    }\n    execute(fn, data = null) {\n        const entities = this.query();\n        if (typeof data === 'function') {\n            data = data(this);\n        }\n        for (const entity of entities) {\n            fn(this, entity, data);\n        }\n    }\n}\nexport function executeSystems(systems, fn, data = null) {\n    for (const system of systems) {\n        system.execute(fn, data);\n    }\n}\nexport function filterSystems(names, systems, lowercase = true) {\n    return systems.filter(system => {\n        const name = system.name || system.constructor.name || '';\n        return names.includes(lowercase && name ? name.toLowerCase() : name);\n    });\n}\nexport class SystemHandler extends Handler {\n    constructor(context, options, actions, _Storage = Storage) {\n        super(context, options, actions, _Storage);\n        this.systems = [];\n    }\n    createSystem(name = '', components, exclude = new Set(), _System = System) {\n        const system = new _System(this, name, components, exclude);\n        this.systems.push(system);\n        return system;\n    }\n    removeSystem(system) {\n        const index = this.systems.indexOf(system);\n        if (index !== -1) {\n            this.systems.splice(index, 1);\n        }\n    }\n    executeSystems(fn, data = null, systems = this.systems) {\n        if (typeof systems === 'function') {\n            systems = systems(this);\n        }\n        if (typeof data === 'function') {\n            data = data(this);\n        }\n        executeSystems(systems, fn, data);\n    }\n    filterSystems(names, lowercase = true, systems = this.systems) {\n        if (typeof systems === 'function') {\n            systems = systems(this);\n        }\n        return filterSystems(names, systems, lowercase);\n    }\n}\n"],"names":[],"sourceRoot":""}