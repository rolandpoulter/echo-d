{"version":3,"file":"lib.echo-d.js","mappings":";;;;;;;;;;;;;;;;;AAAwC;AACM;AAC9C;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA,eAAe,sBAAsB;AACrC,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,kBAAkB,uDAAc;AAChC,gBAAgB,iDAAiD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,uFAAuF;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,iDAAiD;AACjE;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,uBAAuB;AACtC;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,iDAAiD;AACjE;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;AC9JiB;AACiC;AACzE;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,0CAA0C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAa;AAC9B;AACA;AACA;AACA,kBAAkB,0DAAa;AAC/B;AACA;AACA;AACA;AACA;AACA,wBAAwB,sEAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,uFAAuF;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAa;AAC9B;AACA;AACA;AACA,kBAAkB,0DAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,uBAAuB;AACtC;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,0CAA0C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAa;AAC9B;AACA;AACA;AACA,kBAAkB,0DAAa;AAC/B;AACA;AACA;AACA;AACA;AACA,wBAAwB,sEAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;ACrLqB;AACJ;AACxC;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,QAAQ,wDAAW;AACnB;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;ACpCiB;AACM;AAC9C;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA,iBAAiB,0DAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,uBAAuB;AACtC;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,uFAAuF;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,uBAAuB;AACtC;AACA;AACA,4BAA4B,uDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,uBAAuB;AACtC;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,qCAAqC;AACrD;AACA;AACA;AACA;AACA,iBAAiB,0DAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;ACrHiB;AACD;AACvC;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,gCAAgC;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,6EAA6E;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB,eAAe,eAAe;AAC9B;AACA;AACA,4BAA4B,uDAAc;AAC1C,gBAAgB,8EAA8E;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mDAAQ;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;AC7Ja;AACpC;AACA;AACA;AACA,cAAc,SAAS;AACvB,cAAc,qBAAqB;AACnC;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,KAAK;AACpB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iDAAM;AACnC,6BAA6B,iDAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;AC9G8B;AAC9C,4BAA4B,iDAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,OAAO,gDAAW;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDkC;AACzD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,uBAAuB,0DAAe;AAC7C;AACA;AACA;AACO,mBAAmB;AAC1B;AACA;AACA;AACO,oBAAoB,qDAAU;AACrC;AACA;AACA;AACO,6BAA6B,qDAAU;AAC9C;AACA;AACA;AACO,2BAA2B,qDAAU;AAC5C;AACA;AACA;AACO;AACP,kBAAkB,yBAAyB;AAC3C,uBAAuB,wBAAwB;AAC/C;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gBAAgB;AACpC,uBAAuB,gBAAgB;AACvC,oBAAoB,gBAAgB;AACpC,qBAAqB,gBAAgB;AACrC,oBAAoB,iBAAiB;AACrC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,KAAK;AAChB,aAAa,oBAAoB;AACjC;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,KAAK;AAClB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,KAAK;AAClB;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChLuC;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACvC;AACA;AACA;AACA,aAAa,KAAK;AAClB,aAAa,SAAS;AACtB,aAAa,gBAAgB;AAC7B,aAAa,gBAAgB;AAC7B,aAAa,gBAAgB;AAC7B;AACO;AACP;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB,iBAAiB,SAAS;AAC1B;AACA,+CAA+C,gDAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,eAAe;AAC9B,eAAe,SAAS;AACxB;AACA,4BAA4B,sBAAsB,gDAAO;AACzD,gBAAgB;AAChB;AACA,WAAW;AACX,kBAAkB,uDAAc,8BAA8B,gDAAU;AACxE,gBAAgB,4HAA4H;AAC5I;AACA,6BAA6B,gDAAO;AACpC;AACA;AACA;AACA;AACA;AACA,+BAA+B,gDAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gDAAO;AAC1C;AACA;AACA,mCAAmC,gDAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gDAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,oBAAoB;AACpC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,iBAAiB,sCAAsC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mBAAmB;AAClC,eAAe,QAAQ;AACvB,eAAe,aAAa;AAC5B,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,qEAAqE;AACrF;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,wDAAa;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,qEAAqE;AACrF;AACA;AACA;AACA;AACA,qDAAqD,gBAAgB;AACrE,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,sCAAsC;AACtD;AACA;AACA;AACA,SAAS;AACT,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,iBAAiB,8BAA8B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,cAAc;AAC7B,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA,gBAAgB,UAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAiD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,SAAS;AACxB,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAwC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAuD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAuD;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;AC/lBvB;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,YAAY;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC7CuC;AACA;AACA;AACA;AACvC;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,+BAA+B;AAC1C,aAAa,iBAAiB;AAC9B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC;AACO;AACP,iCAAiC,gDAAO,iBAAiB,gDAAO;AAChE,YAAY,0BAA0B;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC;AACO;AACP,iCAAiC,gDAAO,iBAAiB,gDAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,SAAS;AACpB,WAAW,uBAAuB;AAClC;AACO;AACP,iCAAiC,gDAAO,iBAAiB,gDAAO;AAChE,YAAY,qDAAqD;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,oBAAoB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB;AACA,sDAAsD,gDAAO;AAC7D,uBAAuB,uDAAc;AACrC,uBAAuB,uDAAc;AACrC;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB;AACA;AACA,eAAe,oDAAO;AACtB;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;ACzPY;AAG+B;AAClE;AACA;AACA;AACO,8BAA8B,4CAAK;AAC1C,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,KAAK;AACpB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,KAAK;AACpB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,KAAK;AACpB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,mBAAmB,oDAAS;AAC5B,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,mBAAmB,yDAAc;AACjC,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,mBAAmB,2DAAgB;AACnC,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc,KAAK;AACnB,gBAAgB,OAAO;AACvB;AACA;AACA,gBAAgB;AAChB;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yDAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/IA;AACA;AACA;AACO;AACP;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,KAAK;AACpB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,KAAK;AACpB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,KAAK;AACpB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB,aAAa,GAAG;AAChB,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC9EmC;AACQ;AAC3C;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,UAAU;AACvB;AACA;AACA,gBAAgB,uDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,UAAU;AACvB;AACA;AACA,gBAAgB,uDAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,0BAA0B,4CAAK;AACtC,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3ImC;AACQ;AAC3C;AACA;AACA;AACO,2BAA2B,4CAAK;AACvC,8BAA8B,eAAe,IAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA,sEAAsE,WAAW;AACjF;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,IAAI;AACnB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD,sCAAsC,gBAAgB;AACtD,0CAA0C,gBAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChKuE;AACY;AACf;AACM;AACA;AAC1E;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP,WAAW,sEAAmB,CAAC,8EAAuB,CAAC,oEAAkB,CAAC,wEAAoB,CAAC,wEAAoB;AACnH;AACA;AACA;AACA;AACO;AACP,OAAO,yDAAY;AACnB,OAAO,6DAAgB;AACvB,OAAO,wDAAW;AAClB,OAAO,0DAAa;AACpB,OAAO,0DAAa;AACpiEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;AC3HvB,YAAY,UAAU;AACsB;AACU;AACtD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,KAAK;AACpB,iBAAiB,SAAS;AAC1B;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,KAAK;AACpB;AACA,4BAA4B;AAC5B,gBAAgB,yBAAyB,6CAAc,4BAA4B,kEAAiC,0BAA0B,+EAA8C,mBAAmB,yDAAwB,mBAAmB,wEAAuC,mBAAmB,wEAAuC,uBAAuB,6DAA4B,eAAe,4DAA2B,oBAAoB,iEAAgC,YAAY,iEAAgC,gBAAgB,qEAAoC,mBAAmB,wEAAuC,qBAAqB,0EAAyC,aAAa,kEAAiC,wBAAwB,6EAA4C,cAAc,mEAAkC,eAAe,oEAAmC,mBAAmB,wEAAuC,kBAAkB,uEAAsC,8BAA8B,kEAAiC,cAAc,wDAAuB,gBAAgB,qEAAoC,UAAU,+DAA8B,oBAAoB,iEAAgC,4CAA4C;AAC1yC;AACA,WAAW;AACX;AACA,eAAe,+DAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAA0B;AAC7C,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,KAAK;AACpB;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;AACA;AACA,eAAe,iCAAiC;AAChD,eAAe,KAAK;AACpB;AACA;AACA,6BAA6B,qBAAqB;AAClD;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;ACjHvB;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,iBAAiB,SAAS;AAC1B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;AClEvB;AACA;AACA;AACA,cAAc,cAAc;AAC5B,cAAc,cAAc;AAC5B,cAAc,cAAc;AAC5B;AACO;AACP;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,sBAAsB;AACtB,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,oBAAoB,oBAAoB;AACxC,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;;AC3I2B;AACE;AACM;AAClB;AACE;AACJ;AACT;AAC7B;AACA;AACA;AACO;AACP,YAAY,2DAAW;AACvB,aAAa,6DAAY;AACzB;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB,cAAc,UAAU;AACxB,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACO;AACP;AACA;AACA;AACA;AACA,eAAe,cAAc;AAC7B;AACA,0BAA0B,cAAc;AACxC,gBAAgB,2CAA2C,gBAAgB;AAC3E,gBAAgB,UAAU,cAAc;AACxC;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qDAAc;AACzC;AACA;AACA,2BAA2B,qDAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mEAAe;AAClD;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA,wBAAwB,uDAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB,mDAAQ;AAC3B;AACA,eAAe,mDAAQ;AACvB;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,eAAe,QAAQ;AACvB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mBAAmB,mDAAQ;AAC3B;AACA,eAAe,mDAAQ;AACvB;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA,8BAA8B,uDAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,cAAc;AAC7B,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,KAAK;AACpB,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC5XwC;AACxC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,2BAA2B;AAC3B,gBAAgB,sBAAsB;AACtC;AACA,qBAAqB,qDAAU;AAC/B;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,eAAe;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA,oBAAoB,SAAS;AAC7B,oBAAoB,QAAQ;AAC5B,oBAAoB,QAAQ;AAC5B,4BAA4B,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qDAAU;AACnC;AACA;AACA;AACA,iEAAe,OAAO,EAAC;AACvB;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,iBAAiB;AAC9B;AACO;AACP;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,iBAAiB;AAC9B;AACO;AACP;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACO;AACP;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5PO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnBuC;AACyC;AACxC;AACxC;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB;AACO;AACP,iCAAiC,gDAAO,iBAAiB,gDAAO;AAChE,YAAY,wJAAwJ;AACpK,YAAY,4CAA4C;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY,cAAc,+BAA+B;AACrE;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8DAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,qBAAqB,8DAAiB;AACtC;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0EAA6B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,qDAAc;AAClD;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AChUvB;AACA;AACA;AACA,WAAW,2BAA2B;AACtC,aAAa,eAAe;AAC5B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,iBAAiB;AAC5B,aAAa,UAAU;AACvB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,iBAAiB;AAC5B,aAAa,UAAU;AACvB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,iBAAiB;AAC5B,aAAa,UAAU;AACvB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,WAAW,UAAU;AACrB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,WAAW,UAAU;AACrB,aAAa,UAAU;AACvB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iBAAiB;AAC5B,WAAW,QAAQ;AACnB,aAAa,wBAAwB;AACrC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+BAA+B;AAC5C,aAAa,YAAY;AACzB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,gBAAgB;AAC7B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;SCxPA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,IAAI;UACJ;UACA;UACA,IAAI;UACJ;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,CAAC;UACD;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,EAAE;UACF;UACA,sGAAsG;UACtG;UACA;UACA;UACA;UACA;UACA;UACA;UACA,GAAG;UACH;UACA;UACA;UACA;UACA;UACA,GAAG;UACH;UACA,EAAE;UACF;UACA;;;;;UChEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,sDAAsD;UACtD,sCAAsC,iEAAiE;UACvG;UACA;UACA;UACA;UACA;UACA;;;;;UCzBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AAC+B;AAC/B;AACA;AACA;AACA;AACmC;AACnC;AACA;AACA;AACoC;AACpC;AACA;AACA;AACqC;AACrC;AACA;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AAC2B;AAC3B;AACA;AACA;AACA;AAC6B;AAC7B;AACA;AACA;AACoC;AACpC;AACA;AACA;AACA;AACkC;AAClC;AACA;AACA;AACsC;AACtC;AACA;AACA;AACA;AAC4C;AAC5C;AACA;AACA;AACoD;AACpD;AACA;AACA;AAC0C;AAC1C;AACA;AACA;AACgD;AAChD;AACA;AACA;AAC8C;AAC9C;AACmC;AACnC,iEAAe,mDAAO,EAAC","sources":["webpack://echo-d/./lib/actions/actor.js","webpack://echo-d/./lib/actions/component.js","webpack://echo-d/./lib/actions/core.js","webpack://echo-d/./lib/actions/entity.js","webpack://echo-d/./lib/actions/symbol.js","webpack://echo-d/./lib/changes.js","webpack://echo-d/./lib/client.js","webpack://echo-d/./lib/constants.js","webpack://echo-d/./lib/context.js","webpack://echo-d/./lib/emitter.js","webpack://echo-d/./lib/handler.js","webpack://echo-d/./lib/indexes/components.js","webpack://echo-d/./lib/indexes/index.js","webpack://echo-d/./lib/indexes/sorted.js","webpack://echo-d/./lib/indexes/spatial.js","webpack://echo-d/./lib/node.js","webpack://echo-d/./lib/options.js","webpack://echo-d/./lib/ordered.js","webpack://echo-d/./lib/pending.js","webpack://echo-d/./lib/storage.js","webpack://echo-d/./lib/symbols.js","webpack://echo-d/./lib/types.js","webpack://echo-d/./lib/updater.js","webpack://echo-d/./lib/utils.js","webpack://echo-d/webpack/bootstrap","webpack://echo-d/webpack/runtime/async module","webpack://echo-d/webpack/runtime/create fake namespace object","webpack://echo-d/webpack/runtime/define property getters","webpack://echo-d/webpack/runtime/hasOwnProperty shorthand","webpack://echo-d/webpack/runtime/make namespace object","webpack://echo-d/./lib/index.js"],"sourcesContent":["import { Options } from '../options.js';\nimport { extractSymbol } from '../symbols.js';\n/**\n * Creates a new instance of the ActorActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the ActorActions class.\n * @returns {any} - A new class that extends the provided Parent class and the ActorActions class.\n */\nexport const ActorActionsFactory = (Parent = Object) => class ActorActions extends Parent {\n    /**\n     * Handles input for a specific actor in the current context.\n     *\n     * @param {any[] | InputPayload} payload - The payload containing the actor's id and the input to be handled.\n     * @param {Context} context - The current context in which the actor input is to be handled.\n     * @param {Options | any} options - The options for handling the actor input. If an instance of Options is not provided, a new one will be created.\n     */\n    actorInput(payload, context, options) {\n        options = Options.ensure(options, this);\n        const { skipPending, getActorId, compressStringsAsInts } = options;\n        let input;\n        let tick = 0;\n        if (Array.isArray(payload)) {\n            input = payload[0];\n            tick = payload[1];\n        }\n        else {\n            input = payload;\n        }\n        let id = getActorId(input?.id, context);\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        if (!input?.id) {\n            input.id = id;\n        }\n        context.actorInput(id, input, tick, skipPending);\n    }\n    /**\n     * Retrieves actors from the current context and sends them to the responder.\n     *\n     * @param {any} payload - This parameter is not used in the function.\n     * @param {Context} context - The current context from which the actors are retrieved.\n     * @param {Options | any} options - The options for retrieving actors. If an instance of Options is not provided, a new one will be created.\n     */\n    actors(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, isAuthority, isAsyncStorage, pageSize, enableQuerying, enumDefaultSymbols } = options;\n        if (!isAuthority) {\n            return;\n        }\n        const sendActors = (pages) => {\n            // send pages to responder\n            for (const page of pages) {\n                responder([enumDefaultSymbols.mergeActors, page]);\n            }\n        };\n        const ctxActors = context.getActors(enableQuerying ? payload : null, pageSize);\n        if (isAsyncStorage) {\n            ctxActors.emitTo(sendActors);\n        }\n        else {\n            sendActors(ctxActors);\n        }\n    }\n    /**\n     * Merges actors into the current context.\n     *\n     * @param {any[]} payload - The payload containing the actors to be merged.\n     * @param {Context} context - The current context in which the actors are to be merged.\n     * @param {Options | any} options - The options for merging. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeActors(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        context.mergeActors(payload, options);\n    }\n    /**\n     * Removes an actor from the current context.\n     *\n     * @param {any} id - The identifier for the actor to be removed.\n     * @param {Context} context - The current context from which the actor is to be removed.\n     * @param {Options | any} options - The options for removing the actor. If an instance of Options is not provided, a new one will be created.\n     */\n    removeActor(id, context, options) {\n        options = options = Options.ensure(options, this);\n        const { skipPending, getActorId, compressStringsAsInts } = options;\n        id = getActorId(id, context);\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        context.removeActor(id, skipPending);\n    }\n    /**\n     * Spawns a new actor in the current context.\n     *\n     * @param {any} id - The identifier for the actor to be spawned.\n     * @param {Context} context - The current context in which the actor is to be spawned.\n     * @param {OptionsExtended | any} options - The options for spawning the actor. If an instance of Options is not provided, a new one will be created.\n     */\n    spawnActor(id, context, options) {\n        options = options = Options.ensure(options, this);\n        const { skipPending, getActorId, compressStringsAsInts } = options;\n        id = getActorId(id, context);\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        context.spawnActor(id, skipPending);\n    }\n};\n/**\n * Class representing actions that can be performed on actors.\n * This class encapsulates the logic for merging, spawning, removing, and handling input for actors.\n */\nexport class ActorActions extends ActorActionsFactory() {\n}\nconst __ActorActions__ = new ActorActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the ActorActions class.\n */\nexport const actions = {\n    /**\n     * Handles input for a specific actor in the current context.\n     */\n    actorInput: __ActorActions__.actorInput,\n    /**\n     * Retrieves actors from the current context.\n     */\n    actors: __ActorActions__.actors,\n    /**\n     * Merges actors into the current context.\n     */\n    mergeActors: __ActorActions__.mergeActors,\n    /**\n     * Removes an actor from the current context.\n     */\n    removeActor: __ActorActions__.removeActor,\n    /**\n     * Spawns a new actor in the current context.\n     */\n    spawnActor: __ActorActions__.spawnActor\n};\nexport default actions;\n","import { Options } from '../options.js';\nimport { extractSymbol, recursiveSymbolExtraction } from '../symbols.js';\n/**\n * Creates a new instance of the ComponentActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the ComponentActions class.\n * @returns {any} - A new class that extends the provided Parent class and the ComponentActions class.\n */\nexport const ComponentActionsFactory = (Parent = Object) => class ComponentActions extends Parent {\n    /**\n     * Changes a component in the current context.\n     *\n     * @param {any[]} payload - The payload containing the component's id, key, and the new value.\n     * @param {Context} context - The current context in which the component is to be changed.\n     * @param {Options | any} options - The options for changing the component. If an instance of Options is not provided, a new one will be created.\n     */\n    changeComponent(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { compressStringsAsInts, types, isOrdered } = options;\n        let [id, key, value] = payload;\n        let tick = isOrdered ? payload[3] : 0;\n        if (id === undefined || id === null || id === '' ||\n            key === undefined || key === null || key === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (!id) {\n                return;\n            }\n            key = extractSymbol(key, context, options);\n            if (!key) {\n                return;\n            }\n            const type = types[key];\n            if (type && (type === String || type[0] === String)) {\n                value = recursiveSymbolExtraction(key, value, context, options);\n                if (!value) {\n                    return;\n                }\n            }\n        }\n        context.changeComponent(id, key, value, tick, options);\n    }\n    /**\n     * Retrieves components from the current context and sends them to the responder.\n     *\n     * @param {any} payload - The payload containing the request for components.\n     * @param {Context} context - The current context from which the components are retrieved.\n     * @param {Options | any} options - The options for retrieving components. If an instance of Options is not provided, a new one will be created.\n     */\n    components(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, isAuthority, isAsyncStorage, pageSize, enableQuerying, enumDefaultSymbols } = options;\n        if (!isAuthority) {\n            return;\n        }\n        const sendComponents = (pages) => {\n            // return responder([enumDefaultSymbols.mergeComponents, components])\n            // send pages to responder\n            for (const page of pages) {\n                responder([\n                    enumDefaultSymbols.mergeComponents,\n                    page\n                ]);\n            }\n        };\n        const ctxComponents = context.getComponents(enableQuerying ? payload : null, pageSize);\n        if (isAsyncStorage) {\n            ctxComponents.emitTo(sendComponents);\n        }\n        else {\n            sendComponents(ctxComponents);\n        }\n    }\n    /**\n     * Merges components into the current context.\n     *\n     * @param {any[]} payload - The payload containing the components to be merged.\n     * @param {Context} context - The current context in which the components are to be merged.\n     * @param {Options | any} options - The options for merging. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeComponents(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        context.mergeComponents(payload, options);\n    }\n    /**\n     * Removes a component from the current context.\n     *\n     * @param {any[]} payload - The payload containing the component's id and key to be removed.\n     * @param {Context} context - The current context from which the component is to be removed.\n     * @param {Options | any} options - The options for removing the component. If an instance of Options is not provided, a new one will be created.\n     */\n    removeComponent(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { compressStringsAsInts } = options;\n        let [id, key] = payload;\n        if (id === undefined || id === null || id === '' ||\n            key === undefined || key === null || key === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (!id) {\n                return;\n            }\n            key = extractSymbol(key, context, options);\n            if (!key) {\n                return;\n            }\n        }\n        context.removeComponent(id, key, options);\n    }\n    /**\n     * Inserts a new component or updates an existing one in the current context.\n     *\n     * @param {any[]} payload - The payload containing the component's id, key, and the new value.\n     * @param {Context} context - The current context in which the component is to be upserted.\n     * @param {OptionsExtended | any} options - The options for upserting the component. If an instance of Options is not provided, a new one will be created.\n     */\n    upsertComponent(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { compressStringsAsInts, types, isOrdered } = options;\n        let [id, key, value] = payload;\n        let tick = isOrdered ? payload[3] : 0;\n        if (id === undefined || id === null || id === '' ||\n            key === undefined || key === null || key === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (!id) {\n                return;\n            }\n            key = extractSymbol(key, context, options);\n            if (!key) {\n                return;\n            }\n            const type = types[key];\n            if (type && (type === String || type[0] === String)) {\n                value = recursiveSymbolExtraction(key, value, context, options);\n                if (!value) {\n                    return;\n                }\n            }\n        }\n        context.upsertComponent(id, key, value, tick, options);\n    }\n};\n/**\n * Class representing actions that can be performed on components.\n * This class encapsulates the logic for merging, retrieving, and changing components.\n */\nexport class ComponentActions extends ComponentActionsFactory() {\n}\nconst __ComponentActions__ = new ComponentActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the ComponentActions class.\n */\nexport const actions = {\n    /**\n     * Changes a component in the current context.\n     */\n    changeComponent: __ComponentActions__.changeComponent,\n    /**\n     * Retrieves components from the current context.\n     */\n    components: __ComponentActions__.components,\n    /**\n     * Merges components into the current context.\n     */\n    mergeComponents: __ComponentActions__.mergeComponents,\n    /**\n     * Removes a component from the current context.\n     */\n    removeComponent: __ComponentActions__.removeComponent,\n    /**\n     * Updates an existing component or inserts a new one if it doesn't exist in the current context.\n     */\n    upsertComponent: __ComponentActions__.upsertComponent\n};\nexport default actions;\n","import { manyHandler } from '../handler.js';\nimport { Options } from '../options.js';\n/**\n * Creates a new instance of the CoreActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the CoreActions class.\n * @returns {any} - A new class that extends the provided Parent class and the CoreActions class.\n */\nexport const CoreActionsFactory = (Parent = Object) => class CoreActions extends Parent {\n    /**\n     * Processes a batch of payloads in the current context.\n     *\n     * @param {any[]} payload - The array of payloads to be processed.\n     * @param {Context} context - The current context in which the payloads are to be processed.\n     * @param {Options | any} options - The options for processing the payloads. If an instance of Options is not provided, a new one will be created.\n     */\n    batch(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        manyHandler(payload, context, options);\n    }\n};\n/**\n * The CoreActions class provides the core functionality for managing actions in your application.\n */\nexport class CoreActions extends CoreActionsFactory() {\n}\nconst __CoreActions__ = new CoreActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the CoreActions class.\n */\nexport const actions = {\n    /**\n     * Processes a batch of payloads in the current context.\n     */\n    batch: __CoreActions__.batch\n};\nexport default actions;\n","import { Options } from '../options.js';\nimport { extractSymbol } from '../symbols.js';\n/**\n * Creates a new instance of the EntityActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the EntityActions class.\n * @returns {any} - A new class that extends the provided Parent class and the EntityActions class.\n */\nexport const EntityActionsFactory = (Parent = Object) => class EntityActions extends Parent {\n    /**\n     * Creates a new entity in the current context.\n     *\n     * @param {any} id - The identifier for the entity to be created.\n     * @param {Context} context - The current context in which the entity is to be created.\n     * @param {Options | any} options - The options for creating the entity. If an instance of Options is not provided, a new one will be created.\n     */\n    createEntity(id, context, options) {\n        options = options = Options.ensure(options, this);\n        const { skipPending, compressStringsAsInts } = options;\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        context.createEntity(id, skipPending);\n    }\n    /**\n     * Retrieves entities from the current context.\n     *\n     * @param {any} payload - This parameter is not used in the method.\n     * @param {Context} context - The current context from which the entities are retrieved.\n     * @param {OptionsExtended | any} options - The options for retrieving entities. If an instance of Options is not provided, a new one will be created.\n     */\n    entities(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, isAuthority, isAsyncStorage, pageSize, enableQuerying, enumDefaultSymbols } = options;\n        if (!isAuthority) {\n            return;\n        }\n        const sendEntities = (pages) => {\n            for (const page of pages) {\n                responder([enumDefaultSymbols.mergeEntities, page]);\n            }\n        };\n        const ctxEntities = context.getEntities(enableQuerying ? payload : null, pageSize);\n        if (isAsyncStorage) {\n            ctxEntities.emitTo(sendEntities);\n        }\n        else {\n            sendEntities(ctxEntities);\n        }\n    }\n    /**\n     * Merges entities into the current context.\n     *\n     * @param {any[]} payload - The payload containing the entities to be merged.\n     * @param {Context} context - The current context in which the entities are to be merged.\n     * @param {OptionsExtended | any} options - The options for merging. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeEntities(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        context.mergeEntities(payload, options);\n    }\n    /**\n     * Removes an entity from the current context.\n     *\n     * @param {any} id - The identifier for the entity to be removed.\n     * @param {Context} context - The current context from which the entity is to be removed.\n     * @param {OptionsExtended | any} options - The options for removing the entity. If an instance of Options is not provided, a new one will be created.\n     */\n    removeEntity(id, context, options) {\n        options = options = Options.ensure(options, this);\n        const { skipPending, compressStringsAsInts } = options;\n        if (id === undefined || id === null || id === '') {\n            return;\n        }\n        if (compressStringsAsInts) {\n            id = extractSymbol(id, context, options);\n            if (id === '') {\n                return;\n            }\n        }\n        context.removeEntity(id, skipPending);\n    }\n};\n/**\n * Class representing actions that can be performed on entities.\n * This class encapsulates the logic for creating, merging, and removing entities.\n */\nexport class EntityActions extends EntityActionsFactory() {\n}\nconst __EntityActions__ = new EntityActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the EntityActions class.\n */\nexport const actions = {\n    /**\n     * Creates a new entity in the current context.\n     */\n    createEntity: __EntityActions__.createEntity,\n    /**\n     * Retrieves entities from the current context.\n     */\n    entities: __EntityActions__.entities,\n    /**\n     * Merges entities into the current context.\n     */\n    mergeEntities: __EntityActions__.mergeEntities,\n    /**\n     * Removes an entity from the current context.\n     */\n    removeEntity: __EntityActions__.removeEntity\n};\nexport default actions;\n","import { Options } from '../options.js';\nimport { paginate } from '../utils.js';\n/**\n * Creates a new instance of the SymbolActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the SymbolActions class.\n * @returns {any} - A new class that extends the provided Parent class and the SymbolActions class.\n */\nexport const SymbolActionsFactory = (Parent = Object) => class SymbolActions extends Parent {\n    /**\n     * Adds a symbol to the current context.\n     *\n     * @param {any} symbol - The symbol to be added.\n     * @param {Context} context - The current context to which the symbol is to be added.\n     * @param {Options | any} options - The options for adding the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    addSymbol(symbol, context, options) {\n        options = options = Options.ensure(options, this);\n        return context.addSymbol(symbol, options);\n    }\n    /**\n     * Fetches a symbol for the current context.\n     *\n     * @param {string | number} payload - The payload containing the symbol to be fetched.\n     * @param {Context} context - The current context from which the symbol is to be fetched.\n     * @param {Options | any} options - The options for fetching the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    fetchSymbol(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, enumDefaultSymbols } = options;\n        return context.fetchSymbol(payload, options, (symbolTuple) => {\n            responder([enumDefaultSymbols.mergeSymbol, symbolTuple]);\n        });\n    }\n    /**\n     * Retrieves a symbol from the current context by its index.\n     *\n     * @param {number} index - The index of the symbol to be retrieved.\n     * @param {Context} context - The current context from which the symbol is to be retrieved.\n     * @param {Options | any} options - The options for retrieving the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    getSymbol(index, context, options) {\n        options = options = Options.ensure(options, this);\n        return context.getSymbol(index, options);\n    }\n    /**\n     * Merges a symbol into the current context.\n     *\n     * @param {[string, number]} payload - The payload containing the symbol to be merged.\n     * @param {Context} context - The current context into which the symbol is to be merged.\n     * @param {Options | any} options - The options for merging the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeSymbol(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        context.mergeSymbol(payload, options);\n    }\n    /**\n     * Merges multiple symbols into the current context.\n     *\n     * @param {any[]} payload - The payload containing the symbols to be merged.\n     * @param {Context} context - The current context into which the symbols are to be merged.\n     * @param {Options | any} options - The options for merging the symbols. If an instance of Options is not provided, a new one will be created.\n     */\n    mergeSymbols(payload, context, options) {\n        options = options = Options.ensure(options, this);\n        const [offset, symbols] = payload;\n        if (payload && payload.length) {\n            context.resetSymbols(offset, symbols, options);\n        }\n    }\n    /**\n     * Retrieves a symbol from the current context.\n     *\n     * @param {any} symbol - The symbol to be retrieved.\n     * @param {Context} context - The current context from which the symbol is to be retrieved.\n     * @param {Options | any} options - The options for retrieving the symbol. If an instance of Options is not provided, a new one will be created.\n     */\n    symbol(symbol, context, options) {\n        options = options = Options.ensure(options, this);\n        const { actions, responder, isAuthority, enumDefaultSymbols, compressStringsAsInts } = options;\n        if (!isAuthority || !compressStringsAsInts) {\n            return;\n        }\n        const enumSymbols = context.symbolsEnum ?? {};\n        let index = Object.prototype.hasOwnProperty.call(enumSymbols, symbol) ? enumSymbols[symbol] : -1;\n        if (index === -1) {\n            index = actions.addSymbol(symbol, context, options);\n        }\n        if (index !== -1) {\n            responder([enumDefaultSymbols.mergeSymbol, [symbol, index]]);\n        }\n    }\n    /**\n     * Retrieves all symbols from the current context.\n     *\n     * @param {any} _ - This parameter is not used.\n     * @param {Context} context - The current context from which the symbols are to be retrieved.\n     * @param {Options | any} options - The options for retrieving the symbols. If an instance of Options is not provided, a new one will be created.\n     */\n    symbols(_, context, options) {\n        options = options = Options.ensure(options, this);\n        const { responder, isAuthority, pageSize, enumDefaultSymbols, compressStringsAsInts } = options;\n        if (!isAuthority || !compressStringsAsInts) {\n            return;\n        }\n        const symbols = context.symbolsList;\n        if (symbols && symbols.length) {\n            // responder([enumDefaultSymbols.mergeSymbols, 0, symbols])\n            const pages = paginate(symbols, pageSize);\n            let i = 0;\n            // send pages to responder\n            for (const page of pages) {\n                responder([enumDefaultSymbols.mergeSymbols, i, page]);\n                i += pageSize;\n            }\n        }\n    }\n};\n/**\n * The SymbolActions class provides methods for managing symbols in a context.\n */\nexport class SymbolActions extends SymbolActionsFactory() {\n}\nconst __SymbolActions__ = new SymbolActions();\n/**\n * An object that maps the names of actions to their corresponding methods in the SymbolActions class.\n */\nexport const actions = {\n    /**\n     * Adds a symbol to the current context.\n     */\n    addSymbol: __SymbolActions__.addSymbol,\n    /**\n     * Fetches a symbol from the current context.\n     */\n    fetchSymbol: __SymbolActions__.fetchSymbol,\n    /**\n     * Retrieves a symbol from the current context by its index.\n     */\n    getSymbol: __SymbolActions__.getSymbol,\n    /**\n     * Merges a symbol into the current context.\n     */\n    mergeSymbol: __SymbolActions__.mergeSymbol,\n    /**\n     * Merges multiple symbols into the current context.\n     */\n    mergeSymbols: __SymbolActions__.mergeSymbols,\n    /**\n     * Retrieves a symbol from the current context.\n     */\n    symbol: __SymbolActions__.symbol,\n    /**\n     * Retrieves all symbols from the current context.\n     */\n    symbols: __SymbolActions__.symbols\n};\nexport default actions;\n","import { typeOf } from './utils.js';\n/**\n * The Changes class provides methods for managing changes in a context.\n *\n * @property {Context} context - The context in which changes are to be managed.\n * @property {Record<string, any>} diffs - The diffs of the changes.\n */\nexport class Changes {\n    context;\n    diffs;\n    /**\n     * Creates a new instance of the Changes class.\n     *\n     * @param {Context} context - The context in which changes are to be managed.\n     * @param {ChangesInput} changes - An optional initial set of changes.\n     */\n    constructor(context, changes) {\n        this.context = context;\n        this.diffs = changes?.diffs || {};\n    }\n    /**\n     * Changes a component in the current context.\n     *\n     * @param {string} id - The ID of the component to be changed.\n     * @param {string} key - The key of the property to be changed.\n     * @param {any} newValue - The new value of the property.\n     */\n    changeComponent(id, key, newValue) {\n        return this.upsertComponent(id, key, newValue);\n    }\n    /**\n     * Retrieves the changes of a value.\n     *\n     * @param {string} id - The ID of the component.\n     * @param {string} key - The key of the property.\n     * @returns {Record<string, any>} The diffs.\n     */\n    getValue(id, key) {\n        return this.diffs[id]?.[key];\n    }\n    /**\n     * Resets the changes to a new set of changes or an empty object if no changes are provided.\n     *\n     * @param {ChangesInput} changes - The new set of changes.\n     * @returns {Changes} The instance of the Changes class.\n     */\n    reset(changes) {\n        this.diffs = changes?.diffs || {};\n        return this;\n    }\n    /**\n     * Updates an existing component or inserts a new one if it doesn't exist in the current context.\n     *\n     * @param {string} id - The ID of the component to be updated or inserted.\n     * @param {string} key - The key of the property to be updated or inserted.\n     * @param {any} newValue - The new value of the property.\n     * @returns {any} The new value.\n     */\n    upsertComponent(id, key, newValue) {\n        this.diffs[id] = this.diffs[id] || {};\n        const context = this.context;\n        const components = context.components;\n        const currentScope = components[id];\n        let diffObject = this.diffs[id];\n        const recursiveDiff = (key, diff, scope, nextVal) => {\n            if (!scope) {\n                return [diff, nextVal];\n            }\n            const prevType = typeOf(scope[key]);\n            const nextType = typeOf(nextVal);\n            if (prevType !== nextType) {\n                diff[key] = nextVal;\n                diff = diff[key];\n                return [diff, nextVal];\n            }\n            switch (nextType) {\n                case 'bigint':\n                case 'number': {\n                    const v1 = scope[key];\n                    const v2 = nextVal;\n                    const d = v2 - v1;\n                    scope[key] = v2;\n                    diff[key] = d;\n                    break;\n                }\n                case 'array':\n                    diff = diff[key];\n                    scope = scope[key];\n                    for (let i = 0; i < nextVal.length; i += 1) {\n                        recursiveDiff(i.toString(), diff, scope, nextVal[i]);\n                    }\n                    break;\n                case 'object':\n                    diff = diff[key];\n                    scope = scope[key];\n                    for (const k of Object.keys(nextVal)) {\n                        recursiveDiff(k, diff, scope, nextVal[k]);\n                    }\n                    break;\n                default:\n                    diff[key] = nextVal;\n            }\n            diff = diff[key];\n            nextVal = nextVal[key];\n            return [diff, nextVal];\n        };\n        [diffObject, newValue] = recursiveDiff(key, diffObject, currentScope, newValue);\n        return newValue;\n    }\n}\nexport default Changes;\n","import nodeActions, { NodeActions } from './node.js';\nexport class ClientActions extends NodeActions {\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    actors() { }\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    components() { }\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    entities() { }\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    symbol() { }\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    symbols() { }\n}\n/**\n * An object that maps the names of actions.\n */\nexport const actions = {\n    /**\n     * The actions related to nodes, imported from the node module.\n     */\n    ...nodeActions,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    actors: null,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    components: null,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    entities: null,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    symbol: null,\n    /**\n     * Disable actions that should not be handled on the client.\n     */\n    symbols: null\n};\nexport default actions;\n","import { unionSetOrArray, createEnum } from './utils.js';\n/**\n * An array of action names.\n */\nexport const Actions = [\n    'actorInput',\n    'actors',\n    'addSymbol',\n    'batch',\n    'changeComponent',\n    'components',\n    'createEntity',\n    'entities',\n    'fetchSymbol',\n    'getSymbol',\n    'mergeActors',\n    'mergeComponents',\n    'mergeEntities',\n    'mergeSymbols',\n    'mergeSymbol',\n    'removeActor',\n    'removeComponent',\n    'removeEntity',\n    'spawnActor',\n    'symbol',\n    'symbols',\n    // 'tick',\n    // 'tock',\n    'upsertComponent'\n];\n/**\n * An array of common component names.\n */\nexport const CommonComponents = [\n    'asset',\n    'collider',\n    'color',\n    'hidden',\n    'position',\n    'rotation',\n    'velocity',\n    'spin'\n];\n/**\n * A set of default symbols, which is the union of Actions and CommonComponents.\n */\nexport const DefaultSymbols = unionSetOrArray(Actions, CommonComponents);\n/**\n * Padding for the enum.\n */\nexport const padEnum = 0; // 10;\n/**\n * An enum of action names.\n */\nexport const enumActions = createEnum(Actions, padEnum);\n/**\n * An enum of common component names.\n */\nexport const enumCommonComponents = createEnum(CommonComponents, Actions.length + padEnum);\n/**\n * An enum of default symbols.\n */\nexport const enumDefaultSymbols = createEnum(DefaultSymbols, padEnum);\n/**\n * An object that maps action names to their payload sizes.\n */\nexport const batchActionPayloadSizes = {\n    actorInput: { default: 1, rollback: 2 },\n    changeComponent: { default: 3, ordered: 4 },\n    mergeSymbols: 2,\n    removeComponent: 2,\n    upsertComponent: { default: 3, ordered: 4 }\n};\n/**\n * Default options for the application.\n */\nexport const defaultOptions = {\n    compressStringsAsInts: true,\n    enableRollback: !true,\n    enableQuerying: !true,\n    isAuthority: true,\n    isAsyncStorage: false,\n    isComponentRelay: true,\n    isDiffed: false,\n    isGroupedComponents: !true,\n    isOrdered: !true,\n    isReadOnly: false,\n    isSymbolLeader: false,\n    isSymbolRelay: false,\n    pageSize: 100,\n    skipPending: false,\n    indexes: {\n        // asset: { type: 'sorted' },\n        // collider: { type: 'sorted' },\n        // color: { type: 'sorted' },\n        // hidden: { type: 'sorted' },\n        position: { type: 'spatial' },\n    },\n    types: {\n        asset: 'str',\n        collider: 'str',\n        color: 'str',\n        hidden: 'bool',\n        position: ['f32', 3],\n        rotation: ['f32', 3],\n        velocity: ['f32', 3],\n        spin: ['f32', 3],\n    }\n};\n/**\n * Default options for updates.\n */\nexport const defaultUpdateOptions = {\n    mask: {\n        actors: true,\n        entities: true,\n        components: true,\n        inputs: true,\n        symbols: true\n    } && null,\n    type: true,\n    batched: true,\n    batchSize: 100\n};\n/**\n * An object that maps keys to their validity.\n */\nexport const defaultValidKeys = {\n    collider: true,\n    color: true,\n    hidden: true,\n    position: true,\n    rotation: true,\n    velocity: true,\n    spin: true\n};\n/**\n * A responder function that does nothing and returns nothing.\n */\nexport function voidResponder() { }\n/**\n * A function that retrieves the actor ID from a payload.\n *\n * @param {string} id - The payload from which the actor ID is to be retrieved.\n * @param {any} _context - The current context. This parameter is not used.\n * @returns {string | undefined} The actor ID, or undefined if it cannot be found.\n */\nexport function defaultGetActorId(id, _context) {\n    return id;\n}\n/**\n * A function that retrieves the grouped value from a payload.\n *\n * @param {any | any[]} value - The payload from which the grouped value is to be retrieved.\n * @param {number} i - The index of the payload.\n * @param {Object} types - An object containing the types.\n * @param {string} key - The key of the grouped value.\n * @returns {any} The value from the group.\n */\nexport function defaultGetGroupedValue(value, i, types, key) {\n    const type = types[key];\n    if (Array.isArray(type)) {\n        return value.slice(i * type[1], (i + 1) * type[1]);\n    }\n    return value[i];\n}\n/**\n * A function that sets the grouped value in a payload.\n *\n * @param {any} value - The payload in which the grouped value is to be set.\n * @param {Object} _types - An object containing the types.\n * @param {string} _key - The key of the grouped value.\n * @returns {any} The value from the group.\n */\nexport function defaultSetGroupedValue(value, _types, _key) {\n    return value;\n}\n","import { Changes } from './changes.js';\nimport { Options } from './options.js';\nimport { Ordered } from './ordered.js';\nimport { Pending } from './pending.js';\nimport { Symbols } from './symbols.js';\nimport { Storage } from './storage.js';\nimport { combineValues } from './utils.js';\nimport { allActions } from './node.js';\n/**\n * The Context class provides methods for managing the context.\n*\n* @property {any} events - The events.\n* @property {Storage} store - The store.\n* @property {Ordered | null} order - The order.\n* @property {Changes | null} changes - The changes.\n* @property {Pending | null} pending - The pending.\n*/\nexport class Context {\n    /**\n     * Ensures that the given context is an instance of the Context class.\n     *\n     * @param {Context | ContextProps} context - The context to ensure.\n     * @param {Options | any} options - The options for ensuring the context.\n     * @param {Storage} _Storage - The store.\n     * @returns {Context} The context.\n     */\n    static ensure(context, options, _Storage = Storage) {\n        if (context instanceof Context) {\n            return context;\n        }\n        return new Context(context, options, _Storage);\n    }\n    /**\n     * Creates a new instance of the Context class.\n     *\n     * @param {Context | ContextProps} context - The context properties.\n     * @param {Options | any} options - The context options.\n     * @param {Storage} _Storage - The store.\n     */\n    constructor(context = {}, options, _Storage = Storage) {\n        const { events = null, store = null, order = null, changes = null, symbols = null, pending = null,\n        // ...otherProps\n         } = context;\n        options = Options.ensure(options, options?.actions || allActions);\n        const { isOrdered, isDiffed, isReadOnly, compressStringsAsInts, enableQuerying, enumDefaultSymbols, worldOptions, indexes, types, } = options;\n        if (isOrdered) {\n            this.order = new Ordered(order);\n        }\n        else {\n            this.order = null;\n        }\n        if (isDiffed) {\n            this.changes = new Changes(this, changes);\n        }\n        else {\n            this.changes = null;\n        }\n        if (compressStringsAsInts) {\n            if (symbols) {\n                this.symbols = new Symbols(symbols);\n            }\n            else {\n                this.symbols = new Symbols();\n                this.symbols.copyEnum(enumDefaultSymbols);\n            }\n        }\n        else {\n            this.symbols = null;\n        }\n        if (isReadOnly) {\n            this.pending = null;\n        }\n        else {\n            this.pending = pending || new Pending();\n        }\n        this.events = events;\n        this.store = store || new _Storage(store, {\n            types,\n            indexes: enableQuerying ? indexes : null,\n            worldOptions\n        });\n        // Object.assign(this, otherProps)\n    }\n    /**\n     * Gets the actors from the store.\n     *\n     * @returns The actors from the store.\n     */\n    get actors() {\n        return this.getActors(null, Infinity);\n    }\n    /**\n     * Gets the actors from the store with the given query.\n     *\n     * @param {any} query - The query for getting the actors.\n     * @param {number} pageSize - The page size for getting the actors.\n     * @returns {Emitter<string[][]> | string[][]} The actors from the store.\n     */\n    getActors(query, pageSize) {\n        return this.store.getActors(query, pageSize);\n    }\n    /**\n     * Spawns an actor with the given id and options.\n     *\n     * @param {string} id - The id of the actor to spawn.\n     * @param {Options} options - The options for spawning the actor.\n     */\n    spawnActor(id, options) {\n        const { skipPending, onUpdate } = options;\n        const added = this.store.storeActor(id);\n        if (added) {\n            if (!skipPending && this.pending) {\n                this.pending.spawnActor(id);\n            }\n            if (this.events) {\n                this.events.emit('spawnActor', id);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Removes an actor with the given id and options.\n     *\n     * @param {string} id - The id of the actor to remove.\n     * @param {Options} options - The options for removing the actor.\n     */\n    removeActor(id, options) {\n        const { skipPending, onUpdate } = options;\n        const removed = this.store.destroyActor(id);\n        if (removed) {\n            if (!skipPending && this.pending) {\n                this.pending.removeActor(id);\n            }\n            if (this.events) {\n                this.events.emit('removeActor', id);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Merges actors with the given payload and options.\n     *\n     * @param {any[]} payload - The payload of the actors to merge.\n     * @param {Options} options - The options for merging the actors.\n     */\n    mergeActors(payload, options) {\n        const { actions, onUpdate } = options;\n        const nextOptions = options.extend({\n            onUpdate: null\n        });\n        for (const id of payload) {\n            actions.spawnActor(id, this, nextOptions);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Gets the entities from the store.\n     *\n     * @returns The entities from the store.\n     */\n    get entities() {\n        return this.getEntities(null, Infinity);\n    }\n    /**\n     * Gets the entities from the store with the given query.\n     *\n     * @param {any} query - The query for getting the entities.\n     * @param {number} pageSize - The page size for getting the entities.\n     * @returns {Emitter<string[][]> | string[][]} The entities from the store.\n     */\n    getEntities(query, pageSize) {\n        return this.store.getEntities(query, pageSize);\n    }\n    /**\n     * Creates an entity with the given id and options.\n     *\n     * @param {string} id - The id of the entity to create.\n     * @param {Options} options - The options for creating the entity.\n     */\n    createEntity(id, options) {\n        const { skipPending, onUpdate } = options;\n        const added = this.store.storeEntity(id);\n        if (added) {\n            if (!skipPending && this.pending) {\n                this.pending.createEntity(id);\n            }\n            if (this.events) {\n                this.events.emit('createEntity', id);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Removes an entity with the given id and options.\n     *\n     * @param {string} id - The id of the entity to remove.\n     * @param {Options} options - The options for removing the entity.\n     */\n    removeEntity(id, options) {\n        const { skipPending, onUpdate } = options;\n        const removed = this.store.destroyEntity(id);\n        if (removed) {\n            if (!skipPending && this.pending) {\n                this.pending.removeEntity(id);\n            }\n            if (this.events) {\n                this.events.emit('removeEntity', id);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Merges entities with the given payload and options.\n     *\n     * @param {string[]} payload - The payload of the entities to merge.\n     * @param {Options} options - The options for merging the entities.\n     */\n    mergeEntities(payload, options) {\n        const { actions, onUpdate } = options;\n        const nextOptions = options.extend({\n            onUpdate: null\n        });\n        for (const id of payload) {\n            actions.createEntity(id, this, nextOptions);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Gets the components from the store.\n     *\n     * @returns The components from the store.\n     */\n    get components() {\n        return this.getComponents(null, Infinity);\n    }\n    /**\n     * Gets the components from the store with the given query.\n     *\n     * @param {any} query - The query for getting the components.\n     * @param {number} pageSize - The page size for getting the components.\n     * @returns {Emitter<Components[]> | Components[]} The components from the store.\n     */\n    getComponents(query, pageSize) {\n        return this.store.getComponents(query, pageSize);\n    }\n    /**\n     * Changes a component with the given id, key, value, and options.\n     *\n     * @param {string | string[]} id - The id of the component to change.\n     * @param {string} key - The key of the component to change.\n     * @param {any | any[]} value - The value to change in the component.\n     * @param {number} tick - The tick value for the component. Defaults to 0.\n     * @param {Options} options - The options for changing the component.\n     */\n    changeComponent(id, key, value, tick = 0, options) {\n        const { skipPending, isGroupedComponents, getGroupedValue, types, onUpdate } = options;\n        if (Array.isArray(id)) {\n            if (!isGroupedComponents) {\n                throw new Error('Cannot change grouped components without isGroupedComponents option');\n            }\n            const noUpdateOptions = options.extend({ onUpdate: null });\n            for (let i = 0; i < id.length; i++) {\n                this.changeComponent(id[i], key, getGroupedValue(value, i, types, key), tick, noUpdateOptions);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n            return;\n        }\n        const currentValue = this.store.fetchComponent(id, key);\n        const pendingType = typeof currentValue === 'undefined' ? 'created' : 'updated';\n        if (this.order) {\n            const isValidOrder = this.order.changeComponent(id, key, tick);\n            if (!isValidOrder && !this.changes) {\n                // return\n            }\n        }\n        let nextValue;\n        if (pendingType === 'created') {\n            nextValue = value;\n        }\n        else {\n            [/* combined */ , nextValue] = combineValues(currentValue, value);\n        }\n        if (this.changes) {\n            this.changes.changeComponent(id, key, nextValue);\n        }\n        else {\n            this.store.storeComponent(id, key, nextValue);\n        }\n        if (!skipPending && this.pending) {\n            this.pending.changeComponent(pendingType, id, key);\n        }\n        if (this.events) {\n            this.events.emit('changeComponent', id, key);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Upserts a component with the given id, key, value, and options.\n     *\n     * @param {string} id[] - The id of the component to upsert.\n     * @param {string} key - The key of the component to upsert.\n     * @param {any} value - The value to upsert in the component.\n     * @param {number} tick - The tick value for the component. Defaults to 0.\n     * @param {Options} options - The options for upserting the component.\n     */\n    upsertComponent(id, key, value, tick = 0, options) {\n        const { skipPending, isGroupedComponents, getGroupedValue, types, onUpdate } = options;\n        if (Array.isArray(id)) {\n            if (!isGroupedComponents) {\n                throw new Error('Cannot upsert grouped components without isGroupedComponents option');\n            }\n            const noUpdateOptions = options.extend({ onUpdate: null });\n            for (let i = 0; i < id.length; i++) {\n                this.upsertComponent(id[i], key, getGroupedValue(value, i, types, key), tick, noUpdateOptions);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n            return;\n        }\n        const currentValue = this.store.fetchComponent(id, key);\n        const pendingType = typeof currentValue === 'undefined' ? 'created' : 'updated';\n        if (currentValue !== value) {\n            if (this.order) {\n                const isValidOrder = this.order.upsertComponent(id, key, tick);\n                if (!isValidOrder && !this.changes) {\n                    return;\n                }\n            }\n            if (this.changes) {\n                this.changes.upsertComponent(id, key, value);\n            }\n            else {\n                this.store.storeComponent(id, key, value);\n            }\n            if (!skipPending && this.pending) {\n                this.pending.upsertComponent(pendingType, id, key);\n            }\n            if (this.events) {\n                this.events.emit('upsertComponent', id, key);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Removes a component with the given id, key, and options.\n     *\n     * @param {string} id - The id of the component to remove.\n     * @param {string} key - The key of the component to remove.\n     * @param {Options} options - The options for removing the component.\n     */\n    removeComponent(id, key, options) {\n        const { skipPending, onUpdate } = options;\n        const currentValue = this.store.fetchComponent(id, key);\n        if (currentValue !== undefined) {\n            this.store.destroyComponent(id, key);\n            if (!skipPending && this.pending) {\n                this.pending.removeComponent(id, key);\n            }\n            if (this.events) {\n                this.events.emit('removeComponent', id, key);\n            }\n            if (onUpdate) {\n                onUpdate();\n            }\n        }\n    }\n    /**\n     * Merges components with the given payload and options.\n     *\n     * @param {any} payload - The payload of the components to merge.\n     * @param {Options} options - The options for merging the components.\n     */\n    mergeComponents(payload, options) {\n        const { actions, onUpdate, isComponentRelay } = options;\n        const nextOptions = options.extend({\n            skipPending: !isComponentRelay,\n            onUpdate: null\n        });\n        for (const id of Object.keys(payload ?? {})) {\n            for (const key of Object.keys(payload[id])) {\n                const value = payload[id][key];\n                const nextPayload = [id, key, value];\n                actions.upsertComponent(nextPayload, this, nextOptions);\n            }\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Gets the inputs from the store.\n     *\n     * @returns The inputs from the store.\n     */\n    get inputs() {\n        return this.getInputs(null, Infinity);\n    }\n    /**\n     * Gets the inputs from the store with the given query.\n     *\n     * @param {any} query - The query for getting the inputs.\n     * @param {number} pageSize - The page size for getting the inputs.\n     * @returns {Emitter<Inputs[]> | Inputs[]} The inputs from the store.\n     */\n    getInputs(query, pageSize) {\n        return this.store.getInputs(query, pageSize);\n    }\n    /**\n     * Handles actor input with the given id, payload, and options.\n     *\n     * @param {string} id - The id of the actor.\n     * @param {InputPayload} input - The payload for the actor input.\n     * @param {number} tick - The tick value for the actor input. Defaults to 0.\n     * @param {Options} options - The options for handling the actor input.\n     */\n    actorInput(id, input, tick = 0, options) {\n        const { skipPending, onUpdate } = options;\n        const newindex = this.store.storeInput(id, input, tick);\n        if (!skipPending && this.pending) {\n            this.pending.actorInput(id, newindex, tick);\n        }\n        if (this.events) {\n            this.events.emit('actorInput', id, input, newindex, tick);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Gets the list of symbols.\n     *\n     * @returns The list of symbols.\n     */\n    get symbolsList() {\n        return this.symbols?.getSymbols();\n    }\n    /**\n     * Gets the enum of symbols.\n     *\n     * @returns The enum of symbols.\n     */\n    get symbolsEnum() {\n        return this.symbols?.getSymbolsEnum();\n    }\n    /**\n     * Sets the symbols with the given symbols.\n     *\n     * @param {any} symbols - The symbols to set.\n     */\n    setSymbols(symbols) {\n        this.symbols?.reset(symbols);\n    }\n    /**\n     * Gets a symbol with the given index and options.\n     *\n     * @param {number} index - The index of the symbol to get.\n     * @param {Options} options - The options for getting the symbol.\n     * @returns The symbol.\n     */\n    getSymbol(index, options) {\n        const { actions } = options;\n        const symbol = this.symbols?.get(index);\n        if (!symbol) {\n            const symbolTuple = actions.fetchSymbol(symbol, this, options);\n            return symbolTuple[0];\n        }\n        return symbol;\n    }\n    /**\n     * Adds a symbol with the given symbol and options.\n     *\n     * @param {string} symbol - The symbol to add.\n     * @param {Options} options - The options for adding the symbol.\n     * @returns The index of the added symbol or null if the symbol could not be added.\n     */\n    addSymbol(symbol, options) {\n        if (this.symbols === null) {\n            return null;\n        }\n        const { actions, isSymbolLeader, skipPending, onUpdate } = options;\n        const enumSymbols = this.symbolsEnum ?? {};\n        let index = Object.prototype.hasOwnProperty.call(enumSymbols, symbol) ? enumSymbols[symbol] : -1;\n        if (index === -1) {\n            if (isSymbolLeader) {\n                index = this.symbols.add(symbol) ?? -1;\n                if (!skipPending && this.pending) {\n                    this.pending.addSymbol([symbol, index]);\n                }\n                if (onUpdate) {\n                    onUpdate();\n                }\n            }\n            else if (actions.fetchSymbol) {\n                const symbolTuple = actions.fetchSymbol(symbol, this, options);\n                index = symbolTuple[1];\n            }\n        }\n        if (index === -1) {\n            return null;\n        }\n        return index;\n    }\n    /**\n     * Fetches a symbol with the given payload, options, and match function.\n     *\n     * @param {string | number} payload - The payload for fetching the symbol.\n     * @param {Options} options - The options for fetching the symbol.\n     * @param {Function} onMatch - The function to call when a match is found.\n     * @returns The fetched symbol tuple.\n     */\n    fetchSymbol(payload, options, onMatch) {\n        if (this.symbols === null) {\n            return null;\n        }\n        const { isSymbolLeader, skipPending, onUpdate } = options;\n        const symbolTuple = this.symbols.fetch(payload);\n        if (symbolTuple[0] && symbolTuple[1] !== -1) {\n            if (onMatch) {\n                onMatch(symbolTuple);\n            }\n        }\n        else {\n            if (isSymbolLeader) {\n                const index = this.symbols.add(symbolTuple[0]);\n                symbolTuple[1] = index;\n                if (!skipPending && this.pending) {\n                    this.pending.addSymbol(symbolTuple);\n                }\n                if (onUpdate) {\n                    onUpdate();\n                }\n            }\n        }\n        return symbolTuple;\n    }\n    /**\n     * Merges a symbol with the given payload and options.\n     *\n     * @param {[string, number]} payload - The payload for merging the symbol.\n     * @param {Options} options - The options for merging the symbol.\n     */\n    mergeSymbol(payload, options) {\n        if (this.symbols === null) {\n            return null;\n        }\n        const { isSymbolLeader, isSymbolRelay, skipPending, onUpdate } = options;\n        this.symbols.merge(payload);\n        if ((isSymbolLeader || isSymbolRelay) && !skipPending && this.pending) {\n            this.pending.addSymbol(payload);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Resets symbols with the given payload and options.\n     *\n     * @param {any[]} payload - The payload for resetting the symbols.\n     * @param {Options} options - The options for resetting the symbols.\n     */\n    resetSymbols(offset = 0, symbols, options) {\n        if (this.symbols === null) {\n            return null;\n        }\n        const { isSymbolLeader, isSymbolRelay, skipPending, onUpdate } = options;\n        this.symbols.reset(offset, symbols);\n        if ((isSymbolLeader || isSymbolRelay) && !skipPending && this.pending) {\n            this.pending.replaceSymbols(offset, symbols);\n        }\n        if (onUpdate) {\n            onUpdate();\n        }\n    }\n    /**\n     * Resets the current frame state.\n     */\n    resetFrame() {\n        if (this.pending) {\n            this.pending.reset();\n        }\n        if (this.order) {\n            this.order.reset();\n        }\n        if (this.changes) {\n            this.changes.reset();\n        }\n    }\n}\nexport default Context;\n","/**\n * Emitter\n *\n * @template T\n * @class Emitter\n * @description An Emitter is a class that emits values to its handlers.\n * @property {Function[]} handlers - The handlers of the Emitter.\n * @method emitTo - Adds a handler to the Emitter and returns the handler.\n * @method emit - Emits a value to the handlers of the Emitter.\n * @example\n * const emitter = new Emitter()\n * const handler = emitter.emitTo((value) => {\n *  console.log(value)\n * })\n * emitter.emit('Hello, world!')\n * // => 'Hello, world!'\n */\nexport class Emitter {\n    handlers;\n    /**\n     * Constructs a new Emitter object.\n     */\n    constructor() {\n        this.handlers = [];\n    }\n    /**\n     * Adds a handler to the Emitter and returns the handler.\n     *\n     * @param {Function} handler - The handler to add to the Emitter.\n     * @returns {Function} The handler.\n     */\n    emitTo(handler) {\n        this.handlers.push(handler);\n        return handler;\n    }\n    /**\n     * Emits a value to the handlers of the Emitter.\n     *\n     * @param {T} value - The value to emit to the handlers of the Emitter.\n     */\n    emit(value) {\n        for (const handler of this.handlers) {\n            handler(value);\n        }\n    }\n}\n","import { Context } from './context.js';\nimport { Options } from './options.js';\nimport { Storage } from './storage.js';\nimport { updater } from './updater.js';\n/**\n * Gets the symbol action.\n *\n * @param {string | number} action - The action.\n * @param {Record<number, string> | null} defaultSymbols - The default symbols.\n * @returns {number | string} The symbol action.\n */\nexport function getSymbolAction(action, defaultSymbols) {\n    if (defaultSymbols && typeof action === 'number' && defaultSymbols[action]) {\n        action = defaultSymbols[action];\n    }\n    return action;\n}\n/**\n * Gets the action handler.\n *\n * @param {Context} context - The context.\n * @param {OptionsExtended | any} options - The options.\n */\nexport function getActionHandler(context, options) {\n    options = options instanceof Options ? options : new Options(options);\n    const { actions, defaultSymbols } = options;\n    return (action) => {\n        action = getSymbolAction(action, defaultSymbols);\n        const handler = (payload) => {\n            if (actions[action]) {\n                actions[action](payload, context, options);\n            }\n        };\n        handler.action = action;\n        return handler;\n    };\n}\n/**\n * Handles a single message.\n *\n * @param {Message | any[]} message - The message to handle.\n * @param {Context} context - The context for the handler.\n * @param {OptionsExtended | any} options - The options for the handler.\n*/\nexport function oneHandler(message, context, options) {\n    options = options instanceof Options ? options : new Options(options);\n    const actionHandler = getActionHandler(context, options);\n    if (Array.isArray(message)) {\n        actionHandler(message[0])(message[1]);\n    }\n    else if (message) {\n        actionHandler(message.action)(message.payload);\n    }\n}\nexport const handler = manyHandler;\n/**\n * Handles multiple messages.\n *\n * @param {Message | any[]} message - The messages to handle.\n * @param {Context} context - The context for the handler.\n * @param {OptionsExtended | any} options - The options for the handler.\n */\nexport function manyHandler(message, context, options) {\n    options = options instanceof Options ? options : new Options(options);\n    const { batchActionPayloadSizes, isOrdered, enableRollback } = options;\n    const actionHandler = getActionHandler(context, options);\n    const iterator = (payload, handler, offset = 0) => {\n        const action = handler.action;\n        let payloadSize = batchActionPayloadSizes[action] || 1;\n        if (payloadSize && typeof payloadSize === 'object') {\n            if (payloadSize.ordered && isOrdered) {\n                payloadSize = payloadSize.ordered;\n            }\n            else if (payloadSize.rollback && enableRollback) {\n                payloadSize = payloadSize.rollback;\n            }\n            else {\n                payloadSize = payloadSize.default;\n            }\n        }\n        for (let i = offset; i < payload.length; i += payloadSize) {\n            if (batchActionPayloadSizes === 1) {\n                handler(payload[i], context, options);\n            }\n            else if (batchActionPayloadSizes) {\n                handler(payload.slice(i, i + payloadSize), context, options);\n            }\n            else {\n                // console.warn('BATCH MISMATCH')\n            }\n        }\n    };\n    if (Array.isArray(message)) {\n        const handler = actionHandler(message[0]);\n        iterator(message, handler, 1);\n    }\n    else if (message) {\n        const handler = actionHandler(message.action);\n        iterator(message.payload, handler);\n    }\n}\n/**\n * The Handler class. It handles messages.\n */\nexport class Handler {\n    context;\n    options;\n    /**\n     * Creates a new Handler instance.\n     *\n     * @param {Context | any} context - The context for the handler.\n     * @param {Options | any} options - The options for the handler.\n     * @param {Object} actions - The actions for the handler.\n     * @param {Storage} _Storage - The storage for the handler.\n     */\n    constructor(context, options, actions, _Storage = Storage) {\n        this.options = Options.ensure(options, actions);\n        this.context = Context.ensure(context, options, _Storage);\n    }\n    /**\n     * Handles a single message.\n     *\n     * @param {Message | any[]} message - The message to handle.\n     */\n    one(message, extendOptions) {\n        return oneHandler(message, this.context, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Handles multiple messages.\n     *\n     * @param {Message | any[]} message - The messages to handle.\n     */\n    many(message, extendOptions) {\n        return manyHandler(message, this.context, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Gets the action handler.\n     */\n    getActionHandler() {\n        return getActionHandler(this.context, this.options);\n    }\n    /**\n     * Gets the symbol action.\n     *\n     * @param {string | number} action - The action.\n     */\n    getSymbolAction(action) {\n        return getSymbolAction(action, this.options.defaultSymbols);\n    }\n    /**\n     * Updates other nodes in the network.\n     *\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     * @param {number} tick - The tick for updating.\n     */\n    updater(extendOptions, tick = Date.now()) {\n        return updater(this.context, extendOptions ? this.options.extend(extendOptions) : this.options, tick);\n    }\n    /**\n     * Spawns an actor.\n     *\n     * @param {string} id - The ID of the actor to spawn.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    spawnActor(id, extendOptions) {\n        return this.context.spawnActor(id, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Despawns an actor.\n     *\n     * @param {string} id - The ID of the actor to despawn.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    removeActor(id, extendOptions) {\n        return this.context.removeActor(id, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Updates an actor with an input.\n     *\n     * @param {string} id - The ID of the actor to update.\n     * @param {any} input - The input for updating.\n     * @param {number} tick - The tick for updating.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    actorInput(id, input, tick = Date.now(), extendOptions) {\n        return this.context.actorInput(id, input, tick, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Creates an entity.\n     *\n     * @param {string} id - The ID of the entity to create.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    createEntity(id, extendOptions) {\n        return this.context.createEntity(id, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Removes an entity.\n     *\n     * @param {string} id - The ID of the entity to remove.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    removeEntity(id, extendOptions) {\n        return this.context.removeEntity(id, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Sets a component to an entity.\n     *\n     * @param {string} id - The ID of the entity to add the component to.\n     * @param {string} key - The key of the component to add.\n     * @param {any} value - The value of the component to add.\n     * @param {number} tick - The tick for updating.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    upsertComponent(id, key, value, tick = Date.now(), extendOptions) {\n        return this.context.upsertComponent(id, key, value, tick, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Changes a component of an entity.\n     *\n     * @param {string} id - The ID of the entity to change the component of.\n     * @param {string} key - The key of the component to change.\n     * @param {any} value - The value of the component to change.\n     * @param {number} tick - The tick for updating.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    changeComponent(id, key, value, tick = Date.now(), extendOptions) {\n        return this.context.changeComponent(id, key, value, tick, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Removes a component from an entity.\n     *\n     * @param {string} id - The ID of the entity to remove the component from.\n     * @param {string} key - The key of the component to remove.\n     * @param {Options | any} extendOptions - Custom options to extend the options for the handler.\n     */\n    removeComponent(id, key, extendOptions) {\n        return this.context.removeComponent(id, key, extendOptions ? this.options.extend(extendOptions) : this.options);\n    }\n    /**\n     * Queries components.\n     *\n     * @param {any} query - The query for querying components.\n     * @returns {Set<any>} The components queried.\n     */\n    queryComponents(query) {\n        return this.context.store.queryComponents(query);\n    }\n}\nexport default Handler;\n","import { Index } from './index.js';\nimport { \n// SetExperimental,\ndifferenceSets, intersectionSets, unionSets, } from '../utils.js';\n/**\n * The Index class represents an index.\n */\nexport class ComponentsIndex extends Index {\n    constructor(items = {}, _options = {}) {\n        super(items);\n    }\n    /**\n     * The clear method clears the index.\n     */\n    clear() {\n        this.items = {};\n    }\n    /**\n     * The clone method clones the index.\n     */\n    clone() {\n        return new Index(this.items);\n    }\n    /**\n     * The get method gets a value from the index.\n     *\n     * @param {any} value - The value to get from the index.\n     * @returns {any} The value from the index.\n     */\n    get(value) {\n        return this.items[value];\n    }\n    /**\n     * The has method checks if a value is in the index.\n     *\n     * @param {any} value - The value to check in the index.\n     * @param {any} id - The ID of the value to check in the index.\n     * @returns {boolean} True if the value is in the index, false otherwise.\n     */\n    has(value, id) {\n        const ids = this.items[value];\n        if (ids && ids.has(id)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * The remove method removes a value from the index.\n     *\n     * @param {any} value - The value to remove from the index.\n     * @param {any} id - The ID of the value to remove from the index.\n     * @returns {any} The value removed from the index.\n     */\n    remove(value, id) {\n        const ids = this.items[value];\n        if (ids && ids.has(id)) {\n            ids.delete(id);\n            return true;\n        }\n    }\n    /**\n     * The set method sets a value to the index.\n     *\n     * @param {any} value - The value to set to the index.\n     * @param {any} id - The ID to set to the index.\n     * @returns {any} The value being set.\n     */\n    set(value, id) {\n        this.items[value] = this.items[value] || new Set();\n        if (this.items[value].has(id)) {\n            return false;\n        }\n        this.items[value].add(id);\n        return true;\n    }\n    /**\n     * The union method creates an union of two indexes.\n     *\n     * @param {string} key - The key of the index.\n     * @param {Index} other - The other index.\n     * @returns {Index} The union of the indexes.\n     */\n    union(key, other) {\n        return new ComponentsIndex({\n            ...this.items,\n            [key]: unionSets(this.items[key], other.items[key])\n        });\n    }\n    /**\n     * The difference method creates a difference of two indexes.\n     *\n     * @param {string} key - The key of the index.\n     * @param {Index} other - The other index.\n     * @returns {Index} The difference of the indexes.\n     */\n    difference(key, other) {\n        return new ComponentsIndex({\n            ...this.items,\n            [key]: differenceSets(this.items[key], other.items[key])\n        });\n    }\n    /**\n     * The intersection method creates an intersection of two indexes.\n     *\n     * @param {string} key - The key of the index.\n     * @param {Index} other - The other index.\n     * @returns {Index} The intersection of the indexes.\n     */\n    intersection(key, other) {\n        return new ComponentsIndex({\n            ...this.items,\n            [key]: intersectionSets(this.items[key], other.items[key])\n        });\n    }\n    /**\n    * The query method queries the index.\n    *\n    * @param {any} query - The query to use.\n    * @returns {any[]} The result of the query.\n    */\n    query(query) {\n        const { with: with_, without,\n        // where,\n         } = query || {};\n        let matches = new Set();\n        if (with_) {\n            for (const key of with_) {\n                const ids = this.items[key];\n                if (ids) {\n                    matches = unionSets(matches, ids);\n                }\n            }\n        }\n        if (without) {\n            for (const key of without) {\n                const ids = this.items[key];\n                if (ids) {\n                    matches = differenceSets(matches, ids);\n                }\n            }\n        }\n        return matches;\n    }\n}\n","/**\n * The Index class represents an index.\n */\nexport class Index {\n    items;\n    constructor(items = null, _options = {}) {\n        this.items = items;\n    }\n    /**\n     * The clear method clears the index.\n     */\n    clear() {\n        this.items = null;\n    }\n    /**\n     * The clone method clones the index.\n     */\n    clone() {\n        return new Index(this.items);\n    }\n    /**\n     * The get method gets a value from the index.\n     *\n     * @param {any} _value - The value to get from the index.\n     * @returns {any} The value from the index.\n     */\n    get(_value) { }\n    /**\n     * The has method checks if a value is in the index.\n     *\n     * @param {any} _value - The value to check in the index.\n     * @param {any} _id - The ID of the value to check in the index.\n     * @returns {boolean} True if the value is in the index, false otherwise.\n     */\n    has(_value, _id) {\n        return false;\n    }\n    /**\n     * The remove method removes a value from the index.\n     *\n     * @param {any} _value - The value to remove from the index.\n     * @param {any} _id - The ID of the value to remove from the index.\n     * @returns {any} The value removed from the index.\n     */\n    remove(_value, _id) { }\n    /**\n     * The set method sets a value to the index.\n     *\n     * @param {any} _value - The value to set to the index.\n     * @param {any} _id - The ID to set to the index.\n     * @returns {any} The value being set.\n     */\n    set(_value, _id) {\n        return null;\n    }\n    /**\n   * The store method stores a value to the index.\n   *\n   * @param {ID} id - The ID of the value to store.\n   * @param {V} preValue - The previous value to store to the index.\n   * @param {V} value - The value to store to the index.\n   * @returns The value being stored.\n   */\n    store(id, preValue, value) {\n        if (preValue) {\n            this.remove(preValue, id);\n        }\n        return this.set(value, id);\n    }\n    /**\n     * The query method queries the index.\n     *\n     * @param {any} _query - The query to use.\n     * @returns {any[]} The result of the query.\n     */\n    query(_query) {\n        return [];\n    }\n}\n","import { Index } from './index.js';\nimport { binaryInsert } from '../utils.js';\n/**\n * binaryInsertID inserts an ID value into a sorted array.\n *\n * @param {any[]} items - The sorted array\n * @param {any} value - The value to insert\n * @param {any} id - The ID of the value to insert\n * @returns {number[]} The index of the inserted value\n */\nfunction binaryInsertID(items, value, id) {\n    const low = binaryInsert(items, value, (item) => item[0]);\n    const item = items[low];\n    const v = item[0];\n    if (v === value) {\n        const ids = item[1];\n        const i = ids.indexOf(id);\n        if (i === -1) {\n            ids.push(id);\n            return [low, ids.length - 1];\n        }\n        else {\n            // return [low, i]\n        }\n    }\n    else {\n        const ids = [id];\n        items.splice(low, 0, [value, ids]);\n        return [low, 0];\n    }\n    return [-1, -1];\n}\n/**\n * binaryRemove removes a value from a sorted array.\n *\n * @param {any[]} items - The sorted array\n * @param {any} value - The value to remove\n * @param {any} id - The ID of the value to remove\n * @returns {number[]} The index of the removed value\n */\nfunction binaryRemoveID(items, value, id) {\n    const low = binaryInsert(items, value, (item) => item[0]);\n    const item = items[low];\n    const v = item[0];\n    if (v === value) {\n        const ids = item[1];\n        const i = ids.lastIndexOf(id);\n        if (i !== -1) {\n            ids.splice(i, 1);\n            if (ids.length === 0) {\n                items.splice(low, 1);\n            }\n            return [low, i];\n        }\n    }\n    return [-1, -1];\n}\n/**\n * SortedIndex class represents a sorted index.\n */\nexport class SortedIndex extends Index {\n    constructor(items = [], _options = {}) {\n        super(items);\n    }\n    /**\n     * The clear method clears the index.\n     */\n    clear() {\n        this.items = [];\n    }\n    /**\n     * The clone method clones the index.\n     */\n    clone() {\n        return new SortedIndex(this.items);\n    }\n    /**\n     * The get method gets a value from the index.\n     *\n     * @param {V} value - The value to get from the index.\n     * @returns {ID[]} The value from the index.\n     */\n    get(value) {\n        const item = this.items.find((item) => item[0] === value);\n        if (item) {\n            return item[1];\n        }\n        return [];\n    }\n    /**\n     * The has method checks if a value is in the index.\n     *\n     * @param {V} value - The value to check in the index.\n     * @param {ID} id - The ID of the value to check in the index.\n     * @returns {boolean} True if the value is in the index, false otherwise.\n     */\n    has(value, id) {\n        const item = this.items.find((item) => item[0] === value);\n        if (id === undefined) {\n            return !!item;\n        }\n        if (item) {\n            const ids = item[1];\n            return ids.indexOf(id) !== -1;\n        }\n        return false;\n    }\n    /**\n     * The remove method removes a value from the index.\n     *\n     * @param {T} value - The value to remove from the index.\n     * @returns {number[]} The value removed from the index.\n     */\n    remove(value, id) {\n        const indexes = binaryRemoveID(this.items, value, id);\n        return indexes;\n        // return indexes[0] === -1 || indexes[1] === -1 ? null : value \n    }\n    /**\n     * The set method sets a value to the index.\n     *\n     * @param {T} value - The value to set to the index.\n     * @param {ID} id - The ID of the value to set to the index.\n     * @returns {number[]} The index of the value being set.\n     */\n    set(value, id) {\n        const indexes = binaryInsertID(this.items, value, id);\n        return indexes;\n    }\n    /**\n     * The query method queries the manager.\n     *\n     * @param {V} query - The query to use.\n     * @returns {ID[]} The result of the query.\n     */\n    query(query) {\n        // if (query && typeof query === 'object') {}\n        return this.get(query);\n    }\n}\n","import { Index } from './index.js';\nimport { binarySearch } from '../utils.js';\n/**\n * The SpatialIndex class represents a spatial index.\n */\nexport class SpatialIndex extends Index {\n    constructor(items = [], { cellSize = 5 } = {}) {\n        super(items);\n        this.cellSize = cellSize;\n    }\n    /**\n     * The clear method clears the index.\n     */\n    clear() {\n        this.items = [];\n    }\n    /**\n     * The clone method clones the index.\n     */\n    clone() {\n        return new SpatialIndex(this.items);\n    }\n    /**\n     * The get method gets a value from the index.\n     *\n     * @param {V} value - The value to get from the index.\n     * @returns {ID[]} The value from the index.\n     */\n    get(value) {\n        const hash = this.hash(value);\n        this.items[hash] = this.items[hash] || [];\n        const ids = this.items[hash];\n        if (ids) {\n            return ids;\n        }\n        return [];\n    }\n    /**\n     * The has method checks if a value is in the index.\n     *\n     * @param {V} value - The value to check in the index.\n     * @param {ID} id - The ID of the value to check in the index.\n     * @returns {boolean} True if the value is in the index, false otherwise.\n     */\n    has(value, id) {\n        const hash = this.hash(value);\n        this.items[hash] = this.items[hash] || [];\n        const ids = this.items[hash];\n        if (id === undefined) {\n            return !!ids;\n        }\n        if (ids) {\n            return ids.indexOf(id) !== -1;\n        }\n        return false;\n    }\n    /**\n     * The hash method hashes 2D or 3D value.\n     * @param {number[]} value - The 2D or 3D value to hash.\n     * @returns {number} The hash of the value.\n     */\n    hash(value) {\n        if (value.length === 2) {\n            return this.hash2d(value[0], value[1]);\n        }\n        return this.hash3d(value[0], value[1], value[2]);\n    }\n    /**\n     * The hash2d method hashes a 2D value.\n     * @param {number} x - The X value to hash.\n     * @param {number} y - The Y value to hash.\n     * @returns {number} The hash of the 3D value.\n     */\n    hash2d(x = 0, y = 0) {\n        const ix = Math.floor((x + 1000) / this.cellSize), iy = Math.floor((y + 1000) / this.cellSize);\n        return ((ix * 73856093) ^ (iy * 19349663)); // % 5000; // 5000 is size of hash table.\n    }\n    /**\n     * The hash3d method hashes a 3D value.\n     * @param {number} x - The X value to hash.\n     * @param {number} y - The Y value to hash.\n     * @param {number} z - The Z value to hash.\n     * @returns {number} The hash of the 3D value.\n     */\n    hash3d(x = 0, y = 0, z = 0) {\n        const ix = Math.floor((x + 1000) / this.cellSize), iy = Math.floor((y + 1000) / this.cellSize), iz = Math.floor((z + 1000) / this.cellSize);\n        return ((ix * 73856093) ^ (iy * 19349663) ^ (iz * 83492791)); // % 5000; // 5000 is size of hash table.\n    }\n    /**\n     * The remove method removes a value from the index.\n     *\n     * @param {T} value - The value to remove from the index.\n     * @returns {number[]} The value removed from the index.\n     */\n    remove(value, id) {\n        const hash = this.hash(value);\n        this.items[hash] = this.items[hash] || [];\n        const ids = this.items[hash];\n        const [index] = binarySearch(ids, id);\n        if (index === -1) {\n            ids.splice(index, 1);\n        }\n        if (ids.length === 0) {\n            delete this.items[hash];\n        }\n        return [hash, index];\n    }\n    /**\n     * The set method sets a value to the index.\n     *\n     * @param {T} value - The value to set to the index.\n     * @param {ID} id - The ID of the value to set to the index.\n     * @returns {number[]} The index of the value being set.\n     */\n    set(value, id) {\n        const hash = this.hash(value);\n        this.items[hash] = this.items[hash] || [];\n        const ids = this.items[hash];\n        const [index, left] = binarySearch(ids, id);\n        if (index === -1) {\n            ids.splice(left, 0, id);\n        }\n        return [hash, index];\n    }\n    /**\n     * The query method queries the manager.\n     *\n     * @param {V} query - The query to use.\n     * @returns {ID[]} The result of the query.\n     */\n    query(query) {\n        let results = [];\n        const o = this.cellSize;\n        const dims = query.length === 2 ? 2 : 3;\n        if (dims === 2) {\n            const [x, y] = query;\n            for (let xx = -o * 2; xx < o * 2 + o; xx += o) {\n                for (let yy = -o * 2; yy < o * 2 + o; yy += o) {\n                    const ids = this.items[this.hash2d(x + xx, y + yy)];\n                    if (ids !== undefined) {\n                        results = results.concat(ids);\n                    }\n                }\n            }\n        }\n        else {\n            const [x, y, z] = query;\n            for (let xx = -o * 2; xx < o * 2 + o; xx += o) {\n                for (let yy = -o * 2; yy < o * 2 + o; yy += o) {\n                    for (let zz = -o * 2; zz < o * 2 + o; zz += o) {\n                        const ids = this.items[this.hash3d(x + xx, y + yy, z + zz)];\n                        if (ids !== undefined) {\n                            results = results.concat(ids);\n                        }\n                    }\n                }\n            }\n        }\n        return results;\n    }\n}\n","import actorActions, { ActorActionsFactory } from './actions/actor.js';\nimport componentActions, { ComponentActionsFactory } from './actions/component.js';\nimport coreActions, { CoreActionsFactory } from './actions/core.js';\nimport entityActions, { EntityActionsFactory } from './actions/entity.js';\nimport symbolActions, { SymbolActionsFactory } from './actions/symbol.js';\n/**\n * A factory function that creates a new instance of the AllActions class that extends the provided Parent class\n *\n * @param {any} Parent - The class to be extended by the AllActions class.\n * @returns {any} A new class that extends the provided Parent class and the CoreActions class.\n */\nexport function AllActionsFactory(Parent = Object) {\n    return ActorActionsFactory(ComponentActionsFactory(CoreActionsFactory(EntityActionsFactory(SymbolActionsFactory(Parent)))));\n}\n/**\n * Combines all the actions from different modules into a single object.\n */\nexport const allActions = {\n    ...actorActions,\n    ...componentActions,\n    ...coreActions,\n    ...entityActions,\n    ...symbolActions\n};\n/**\n * The NodeActions class provides methods for managing nodes in a context.\n */\nexport class NodeActions extends AllActionsFactory() {\n}\nconst __NodeActions__ = new NodeActions();\n/**\n * The actions object combines all the actions from different modules.\n */\nexport const actions = {\n    /**\n     * Handles input for a specific actor in the current context.\n     */\n    actorInput: __NodeActions__.actorInput,\n    /**\n     * Retrieves actors from the current context.\n     */\n    actors: __NodeActions__.actors,\n    /**\n     * Merges actors into the current context.\n     */\n    mergeActors: __NodeActions__.mergeActors,\n    /**\n     * Removes an actor from the current context.\n     */\n    removeActor: __NodeActions__.removeActor,\n    /**\n     * Spawns a new actor in the current context.\n     */\n    spawnActor: __NodeActions__.spawnActor,\n    /**\n     * Changes a component in the current context.\n     */\n    changeComponent: __NodeActions__.changeComponent,\n    /**\n     * Retrieves components from the current context.\n     */\n    components: __NodeActions__.components,\n    /**\n     * Merges components into the current context.\n     */\n    mergeComponents: __NodeActions__.mergeComponents,\n    /**\n     * Removes a component from the current context.\n     */\n    removeComponent: __NodeActions__.removeComponent,\n    /**\n     * Updates an existing component or inserts a new one if it doesn't exist in the current context.\n     */\n    upsertComponent: __NodeActions__.upsertComponent,\n    /**\n     * Processes a batch of payloads in the current context.\n     */\n    batch: __NodeActions__.batch,\n    /**\n     * Creates a new entity in the current context.\n     */\n    createEntity: __NodeActions__.createEntity,\n    /**\n     * Retrieves entities from the current context.\n     */\n    entities: __NodeActions__.entities,\n    /**\n     * Merges entities into the current context.\n     */\n    mergeEntities: __NodeActions__.mergeEntities,\n    /**\n     * Removes an entity from the current context.\n     */\n    removeEntity: __NodeActions__.removeEntity,\n    /**\n     * Adds a symbol to the current context.\n     */\n    addSymbol: __NodeActions__.addSymbol,\n    /**\n     * Fetches a symbol from the current context.\n     */\n    fetchSymbol: __NodeActions__.fetchSymbol,\n    /**\n     * Retrieves a symbol from the current context by its index.\n     */\n    getSymbol: __NodeActions__.getSymbol,\n    /**\n     * Merges a symbol into the current context.\n     */\n    mergeSymbol: __NodeActions__.mergeSymbol,\n    /**\n     * Merges multiple symbols into the current context.\n     */\n    mergeSymbols: __NodeActions__.mergeSymbols,\n    /**\n     * Retrieves a symbol from the current context.\n     */\n    symbol: __NodeActions__.symbol,\n    /**\n     * Retrieves all symbols from the current context.\n     */\n    symbols: __NodeActions__.symbols,\n};\nexport default actions;\n","// import { Context } from './index.js';\nimport * as Constants from './constants.js';\nimport { actions as defaultActions } from './node.js';\n/**\n * The Options class represents the options for a node.\n */\nexport class Options {\n    actions;\n    batchActionPayloadSizes;\n    compressStringsAsInts;\n    defaultSymbols;\n    enableRollback;\n    enableQuerying;\n    enumDefaultSymbols;\n    getActorId;\n    getGroupedValue;\n    indexes;\n    isAuthority;\n    isAsyncStorage;\n    isComponentRelay;\n    isDiffed;\n    isGroupedComponents;\n    isOrdered;\n    isReadOnly;\n    isSymbolLeader;\n    isSymbolRelay;\n    onUpdate;\n    pageSize;\n    responder;\n    skipPending;\n    types;\n    setGroupedValue;\n    updateOptions;\n    worldOptions;\n    // [key: string]: any;\n    /**\n     * Ensures that the provided options are an instance of Options.\n     *\n     * @param {Options | OptionsProps} options - The options for the node.\n     * @param {any} actionsThis - The context for the actions.\n     * @returns {Options} - An instance of Options.\n     */\n    static ensure(options = {}, actionsThis) {\n        return options instanceof Options ? options : new Options(options, actionsThis);\n    }\n    /**\n     * Constructs a new Options object.\n     *\n     * @param {Options | OptionsProps} options - The options for the node.\n     * @param {any} actionsThis - The context for the actions.\n     */\n    constructor(options = {}, actionsThis = null) {\n        const { actions = actionsThis || defaultActions, batchActionPayloadSizes = Constants.batchActionPayloadSizes, compressStringsAsInts = Constants.defaultOptions.compressStringsAsInts, defaultSymbols = Constants.DefaultSymbols, enableRollback = Constants.defaultOptions.enableRollback, enableQuerying = Constants.defaultOptions.enableQuerying, enumDefaultSymbols = Constants.enumDefaultSymbols, getActorId = Constants.defaultGetActorId, getGroupedValue = Constants.defaultGetGroupedValue, indexes = Constants.defaultOptions.indexes, isAuthority = Constants.defaultOptions.isAuthority, isAsyncStorage = Constants.defaultOptions.isAsyncStorage, isComponentRelay = Constants.defaultOptions.isComponentRelay, isDiffed = Constants.defaultOptions.isDiffed, isGroupedComponents = Constants.defaultOptions.isGroupedComponents, isOrdered = Constants.defaultOptions.isOrdered, isReadOnly = Constants.defaultOptions.isReadOnly, isSymbolLeader = Constants.defaultOptions.isSymbolLeader, isSymbolRelay = Constants.defaultOptions.isSymbolRelay, onUpdate = null, pageSize = Constants.defaultOptions.pageSize, responder = Constants.voidResponder, skipPending = Constants.defaultOptions.skipPending, types = Constants.defaultOptions.types, setGroupedValue = Constants.defaultSetGroupedValue, updateOptions: overridenUpdateOptions = {}, worldOptions = null,\n        // ...otherOptions\n         } = options;\n        const updateOptions = {\n            ...Constants.defaultUpdateOptions,\n            ...overridenUpdateOptions\n        };\n        updateOptions.validKeys = !overridenUpdateOptions?.validKeys\n            ? null\n            : {\n                ...Constants.defaultValidKeys,\n                ...(overridenUpdateOptions?.validKeys || {})\n            };\n        this.actions = actions;\n        this.batchActionPayloadSizes = batchActionPayloadSizes;\n        this.compressStringsAsInts = compressStringsAsInts;\n        this.defaultSymbols = defaultSymbols;\n        this.enableRollback = enableRollback;\n        this.enableQuerying = enableQuerying;\n        this.enumDefaultSymbols = enumDefaultSymbols;\n        this.getActorId = getActorId;\n        this.getGroupedValue = getGroupedValue;\n        this.indexes = indexes;\n        this.isAuthority = isAuthority;\n        this.isAsyncStorage = isAsyncStorage;\n        this.isComponentRelay = isComponentRelay;\n        this.isDiffed = isDiffed;\n        this.isGroupedComponents = isGroupedComponents;\n        this.isOrdered = isOrdered;\n        this.isReadOnly = isReadOnly;\n        this.isSymbolLeader = isSymbolLeader;\n        this.isSymbolRelay = isSymbolRelay;\n        this.onUpdate = onUpdate;\n        this.pageSize = pageSize;\n        this.responder = responder;\n        this.skipPending = skipPending;\n        this.types = types;\n        this.setGroupedValue = setGroupedValue;\n        this.updateOptions = updateOptions;\n        this.worldOptions = worldOptions;\n        // Object.assign(this, otherOptions)\n    }\n    /**\n     * Creates a new Options object from the current one.\n     *\n     * @param {Options | OptionsProps} options - The options for the node.\n     * @param {any} actionThis - The context for the actions.\n     */\n    clone() {\n        return new Options({ ...this }, this.actions);\n    }\n    /**\n     * Extends the current Options object.\n     *\n     * @param {Options | OptionsProps | Object} options - The options for the node.\n     * @param {any} actionThis - The context for the actions.\n     */\n    extend(options, actionThis = this.actions) {\n        return new Options({ ...this, ...options }, actionThis);\n    }\n}\nexport default Options;\n","/**\n * The Ordered class represents a collection of tick values.\n *\n * @property {OrderedData} order - The collection of tick values.\n */\nexport class Ordered {\n    order;\n    /**\n     * Constructs a new Ordered object.\n     *\n     * @param {OrderedData} order - The initial tick values.\n     */\n    constructor(order = {}) {\n        this.order = order;\n    }\n    /**\n     * Changes the tick value of a component.\n     *\n     * @param {string} id - The ID of the component.\n     * @param {string} key - The key of the component.\n     * @param {number} tick - The new tick value.\n     * @returns {boolean} Whether the operation was successful.\n     */\n    changeComponent(id, key, tick) {\n        return this.upsertComponent(id, key, tick);\n    }\n    /**\n     * Resets the tick values.\n     *\n     * @param {OrderedData} order - The new tick values.\n     * @returns {Ordered} The Ordered object.\n     */\n    reset(order = {}) {\n        this.order = order;\n    }\n    /**\n     * Inserts or updates the tick value of a component.\n     *\n     * @param {string} id - The ID of the component.\n     * @param {string} key - The key of the component.\n     * @param {number} tick - The new tick value.\n     * @returns {boolean} Whether the operation was successful.\n     */\n    upsertComponent(id, key, tick) {\n        if (isNaN(tick)) {\n            return false;\n        }\n        this.order[id] = this.order[id] || {};\n        switch (typeof this.order[id][key]) {\n            case 'number':\n                if (isFinite(this.order[id][key]) && this.order[id][key] < tick) {\n                    const threshold = 0;\n                    if (tick > (Date.now() + threshold)) {\n                        return false;\n                    }\n                    this.order[id][key] = tick;\n                    return true;\n                }\n                return false;\n            case 'undefined':\n            default:\n                this.order[id][key] = tick;\n                return true;\n        }\n    }\n}\nexport default Ordered;\n","/**\n * The Pending class represents a pending state with removed, updated, and created states.\n *\n * @property {RemovedState} removed - The removed state.\n * @property {UpdatedState} updated - The updated state.\n * @property {CreatedState} created - The created state.\n */\nexport class Pending {\n    /**\n     * Constructs a new Pending object and resets its state.\n     */\n    constructor() {\n        this.created = {\n            actors: {},\n            components: {},\n            entities: [],\n            inputs: {}\n        };\n        this.removed = {\n            actors: {},\n            components: {},\n            entities: []\n        };\n        this.updated = {\n            components: {}\n        };\n        this.symbols = [];\n    }\n    /**\n     * Adds an actor input to the created inputs state.\n     *\n     * @param {string} id - The ID of the actor.\n     * @param {number} newindex - The index of the new input.\n     * @param {number} tick - The tick of the new input.\n     */\n    actorInput(id, newindex, tick = 0) {\n        this.created.inputs[id] = this.created.inputs[id] || [];\n        this.created.inputs[id].push(tick ? [newindex, tick] : newindex);\n    }\n    /**\n     * Changes a component in the specified pending state.\n     *\n     * @param {string} pendingType - The type of the pending state (removed, updated, or created).\n     * @param {string} id - The ID of the entity.\n     * @param {string} key - The key of the component.\n     */\n    changeComponent(pendingType, id, key) {\n        return this.upsertComponent(pendingType, id, key);\n    }\n    /**\n     * Marks an entity as created in the created state.\n     *\n     * @param {string} id - The ID of the entity to create.\n     */\n    createEntity(id) {\n        this.created.entities.push(id);\n    }\n    /**\n     * Marks an actor as removed in the removed state.\n     *\n     * @param {string} id - The ID of the actor to remove.\n     */\n    removeActor(id) {\n        this.removed.actors[id] = true;\n    }\n    /**\n     * Marks a component as removed in the removed state.\n     *\n     * @param {string} id - The ID of the entity.\n     * @param {string} key - The key of the component to remove.\n     */\n    removeComponent(id, key) {\n        this.removed.components[id] = this.removed.components[id] || {};\n        this.removed.components[id][key] = true;\n    }\n    /**\n     * Marks an entity as removed in the removed state.\n     *\n     * @param {string} id - The ID of the entity to remove.\n     */\n    removeEntity(id) {\n        this.removed.entities.push(id);\n    }\n    /**\n     * Resets the state of the Pending object.\n     */\n    reset() {\n        this.constructor();\n    }\n    /**\n     * Marks an actor as spawned in the created state.\n     *\n     * @param {string} id - The ID of the actor to spawn.\n     */\n    spawnActor(id) {\n        this.created.actors[id] = true;\n    }\n    /**\n     * Inserts or updates a component in the specified pending state.\n     *\n     * @param {string} pendingType - The type of the pending state (created or updated).\n     * @param {string} id - The ID of the entity.\n     * @param {string} key - The key of the component.\n     */\n    upsertComponent(pendingType, id, key) {\n        const pending = pendingType === 'created' ? this.created : this.updated;\n        if (pending) {\n            pending.components[id] = pending.components[id] || {};\n            pending.components[id][key] = true;\n        }\n    }\n    /**\n     * Adds a symbol tuple to the symbols array.\n     *\n     * @param {any} symbolTuple - The symbol tuple to add.\n     */\n    addSymbol(symbolTuple) {\n        this.symbols.push(symbolTuple);\n    }\n    /**\n     * Replaces the symbols array with a new array of symbol tuples.\n     *\n     * @param {any[]} symbols - The new array of symbols.\n     */\n    replaceSymbols(offset, symbols) {\n        if (offset > 0) {\n            const { length } = symbols;\n            const { symbols: _symbols } = this;\n            for (let i = 0; i < length; i++) {\n                const value = symbols[i];\n                const index = i + offset;\n                _symbols[index] = [value, index];\n            }\n        }\n        else {\n            this.symbols = symbols.map((v, i) => [v, i]);\n        }\n    }\n}\nexport default Pending;\n","import { SortedIndex } from './indexes/sorted.js';\nimport { SpatialIndex } from './indexes/spatial.js';\nimport { ComponentsIndex } from './indexes/components.js';\nimport { ArrayTypes } from './types.js';\nimport { binarySearch } from './utils.js';\nimport { paginate } from './utils.js';\nexport * from './emitter.js';\n/**\n * The Indexes interface represents a mapping from keys to any array.\n */\nexport const TypeMap = {\n    sorted: SortedIndex,\n    spatial: SpatialIndex,\n};\n/**\n * The Storage class represents a store with actors, entities, components, and inputs.\n *\n * @property {string[]} actors - The actors in the store.\n * @property {string[]} entities - The entities in the store.\n * @property {Components} components - The components in the store.\n * @property {Inputs} inputs - The inputs in the store.\n * @property {Inputs} inputs - The inputs in the store.\n */\nexport class Storage {\n    // declare world?: any\n    /**\n     * Constructs a new Storage object.\n     *\n     * @param {StorageProps} store - The properties of the store.\n     */\n    constructor(store = {}, options = {}) {\n        const { actors = [], entities = [], components = {}, inputs = {} } = store || {};\n        const { types = {}, indexes = {},\n        // worldOptions,\n         } = options;\n        this.actors = actors || [];\n        this.entities = entities || [];\n        this.components = components || {};\n        this.inputs = inputs || {};\n        this.types = types;\n        this.typeCtors = {};\n        for (let key in types) {\n            let TypeCtor = types[key];\n            if (Array.isArray(TypeCtor)) {\n                TypeCtor = ArrayTypes.get(TypeCtor[0]);\n            }\n            else if (typeof TypeCtor === 'string') {\n                TypeCtor = ArrayTypes.get(TypeCtor);\n            }\n            if (typeof TypeCtor === 'function') {\n                if (TypeCtor) {\n                    this.typeCtors[key] = TypeCtor;\n                }\n            }\n        }\n        this.componentsIndex = new ComponentsIndex();\n        this.indexes = {};\n        for (let key in indexes) {\n            const { type } = indexes[key];\n            const IndexCtor = TypeMap[type];\n            if (IndexCtor) {\n                this.indexes[key] = {\n                    actors: new IndexCtor([], indexes[key]),\n                    entities: new IndexCtor([], indexes[key]),\n                };\n            }\n        }\n    }\n    /**\n     * Removes an actor ID.\n     *\n     * @param {string} id - The ID of the actor to remove.\n     * @returns {boolean} True if the actor ID was removed, false otherwise.\n     */\n    destroyActor(id) {\n        const actors = this.actors;\n        return this.destroyId(actors, id);\n    }\n    /**\n     * Removes a component.\n     *\n     * @param {string} id - The ID of the component to remove.\n     * @param {string} key - The key of the component to remove.\n     */\n    destroyComponent(id, key) {\n        const prevValue = this.components[id][key];\n        delete this.components[id][key];\n        this.componentsIndex.remove(id, key);\n        if (this.indexes[key]) {\n            const index = this.indexes[key];\n            if (this.isActor(id)) {\n                index.actors.remove(id, prevValue);\n            }\n            else {\n                index.entities.remove(id, prevValue);\n            }\n        }\n    }\n    /**\n     * Removes an entity ID.\n     *\n     * @param {string} id - The ID of the entity to remove.\n     * @returns {boolean} True if the entity ID was removed, false otherwise.\n     */\n    destroyEntity(id) {\n        const entities = this.entities;\n        return this.destroyId(entities, id);\n    }\n    /**\n     * Removes an ID from a list if it exists.\n     *\n     * @param {string[]} list - The list to remove the ID from.\n     * @param {string} id - The ID to remove.\n     * @returns {boolean} True if the ID was removed, false otherwise.\n     */\n    destroyId(list, id) {\n        const [index] = binarySearch(list, id);\n        if (index !== -1) {\n            list.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Fetches a components container for an entity.\n     *\n     * @param {string} id - The ID of the entity.\n     * @returns {Components} The fetched components container.\n     */\n    fetchComponents(id) {\n        return this.components[id];\n    }\n    /**\n     * Fetches a component.\n     *\n     * @param {string} id - The ID of the component to fetch.\n     * @param {string} key - The key of the component to fetch.\n     * @returns {any} The fetched component.\n     */\n    fetchComponent(id, key) {\n        this.components[id] = this.components[id] || {};\n        return this.components[id][key];\n    }\n    /**\n     * Gets the actors.\n     *\n     * @param {any} query - The query to use.\n     * @param {number} pageSize - The page size to use.\n     * @returns {string[][]} The actors.\n     */\n    getActors(query = null, pageSize = Infinity) {\n        if (query !== null) {\n            let results = {};\n            for (let key of Object.keys(query)) {\n                const index = this.indexes[key];\n                if (index) {\n                    const result = index.actors.query(query[key]);\n                    result.forEach((id) => {\n                        results[id] = true;\n                    });\n                }\n            }\n            const ids = Object.keys(results);\n            return paginate(ids, pageSize);\n        }\n        return paginate(this.actors, pageSize);\n    }\n    /**\n     * Gets the components.\n     *\n     * @param {any} query - The query to use.\n     * @param {number} pageSize - The page size to use.\n     * @returns {Components} The components.\n     */\n    getComponents(query = null, pageSize = Infinity) {\n        let object = this.components;\n        if (query !== null) {\n            const results = {};\n            for (let key of query) {\n                results[key] = this.components[key];\n            }\n            object = results;\n        }\n        const ids = Object.keys(object);\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const components = {};\n            for (let id of page) {\n                components[id] = object[id];\n            }\n            return components;\n        });\n    }\n    /**\n     * Gets the entities.\n     *\n     * @param {any} query - The query to use.\n     * @param {number} pageSize - The page size to use.\n     * @returns {string[]} The entities.\n     */\n    getEntities(query = null, pageSize = Infinity) {\n        if (query !== null) {\n            let results = {};\n            for (let key of Object.keys(query)) {\n                const index = this.indexes[key];\n                if (index) {\n                    const result = index.entities.query(query[key]);\n                    result.forEach((id) => {\n                        results[id] = true;\n                    });\n                }\n            }\n            const ids = Object.keys(results);\n            return paginate(ids, pageSize);\n        }\n        return paginate(this.entities, pageSize);\n    }\n    /**\n     * Gets the inputs.\n     *\n     * @returns {Inputs} The inputs.\n     */\n    getInputs(query = null, pageSize = Infinity) {\n        let object = this.inputs;\n        if (query !== null) {\n            const results = {};\n            for (let key of query) {\n                results[key] = this.inputs[key];\n            }\n            object = results;\n        }\n        const ids = Object.keys(object);\n        const pages = paginate(ids, pageSize);\n        return pages.map((page) => {\n            const inputs = {};\n            for (let id of page) {\n                inputs[id] = object[id];\n            }\n            return inputs;\n        });\n    }\n    /**\n     * Checks if an ID is an actor.\n     *\n     * @param {string} id - The ID to check.\n     * @returns {boolean} True if the ID is an actor, false otherwise.\n     */\n    isActor(id) {\n        const actors = this.actors;\n        return actors.indexOf(id) !== -1;\n    }\n    /**\n     * Checks if an ID is an entity.\n     *\n     * @param {string} id - The ID to check.\n     * @returns {boolean} True if the ID is an entity, false otherwise.\n     */\n    isEntity(id) {\n        const entities = this.entities;\n        return entities.indexOf(id) !== -1;\n    }\n    /**\n     * Sets the actors.\n     *\n     * @param {string[]} actors - The actors to set.\n     * @returns {string[]} The actors.\n     */\n    setActors(actors) {\n        this.actors = actors;\n        return actors;\n    }\n    /**\n     * Sets the components.\n     *\n     * @param {Components} components - The components to set.\n     * @returns {Components} The components.\n     */\n    setComponents(components) {\n        this.components = components;\n        return components;\n    }\n    /**\n     * Sets the entities.\n     *\n     * @param {string[]} entities - The entities to set.\n     * @returns {string[]} The entities.\n     */\n    setEntities(entities) {\n        this.entities = entities;\n        return entities;\n    }\n    /**\n     * Sets the inputs.\n     *\n     * @param {Inputs} inputs - The inputs to set.\n     * @returns {Inputs} The inputs.\n     */\n    setInputs(inputs) {\n        this.inputs = inputs;\n        return inputs;\n    }\n    /**\n     * Stores an actor ID.\n     *\n     * @param {string} id - The ID of the actor to store.\n     * @returns {boolean} True if the actor ID was stored, false otherwise.\n     */\n    storeActor(id) {\n        const actors = this.actors;\n        return this.storeId(actors, id);\n    }\n    /**\n     * Stores a component.\n     *\n     * @param {string} id - The ID of the component to store.\n     * @param {string} key - The key of the component to store.\n     * @param {any} value - The value of the component to store.\n     */\n    storeComponent(id, key, value) {\n        const prevValue = this.components[id][key];\n        this.components[id][key] = value;\n        this.componentsIndex.set(id, key);\n        if (this.indexes[key]) {\n            const index = this.indexes[key];\n            if (this.isActor(id)) {\n                index.actors.store(id, prevValue, value);\n            }\n            else {\n                index.entities.store(id, prevValue, value);\n            }\n        }\n    }\n    /**\n     * Stores an entity ID.\n     *\n     * @param {string} id - The ID of the entity to store.\n     * @returns {boolean} True if the entity ID was stored, false otherwise.\n     */\n    storeEntity(id) {\n        const entities = this.entities;\n        return this.storeId(entities, id);\n    }\n    /**\n     * Stores an ID in a list if it doesn't exist already.\n     *\n     * @param {string[]} list - The list to store the ID in.\n     * @param {string} id - The ID to store.\n     * @returns {boolean} True if the ID was stored, false otherwise.\n     */\n    storeId(list, id) {\n        const [index, left] = binarySearch(list, id);\n        if (index === -1) {\n            list.splice(left, 0, id);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Stores an input.\n     *\n     * @param {string} id - The ID of the input to store.\n     * @param {InputPayload} input - The payload of the input to store.\n     * @returns {number} The new index of the stored input.\n     */\n    storeInput(id, input, tick = 0) {\n        const inputs = this.inputs;\n        inputs[id] = inputs[id] || [];\n        const newindex = inputs[id].length;\n        inputs[id].push(tick ? [input, tick] : input);\n        return newindex;\n    }\n    /**\n     * Queries the store for entities by component.\n     *\n     * @param {any} query - The query to use.\n     * @returns {Set<any>} The entities.\n     */\n    queryComponents(query) {\n        return this.componentsIndex.query(query);\n    }\n}\n","import { createEnum } from './utils.js';\n/**\n * The Symbols class represents a collection of symbols.\n */\nexport class Symbols {\n    _list;\n    _enum;\n    /**\n     * Constructs a new Symbols object.\n     *\n     * @param {object} object - An object containing an optional list of symbols.\n     */\n    constructor(object = {}) {\n        const { _list: symbols = [] } = object;\n        this._list = symbols;\n        this._enum = createEnum(symbols);\n    }\n    /**\n     * Adds a symbol to the Symbols object.\n     *\n     * @param {string} symbol - The symbol to be added.\n     * @returns {number | null} The index of the added symbol, or null if the symbol is not valid.\n     */\n    add(symbol) {\n        if (symbol) {\n            if (Object.prototype.hasOwnProperty.call(this._enum, symbol)) {\n                return this._enum[symbol];\n            }\n            else {\n                const end = this._list.length;\n                this._list[end] = symbol;\n                this._enum[symbol] = end;\n                return end;\n            }\n        }\n        return null;\n    }\n    /**\n     * Copies an enum into the Symbols object.\n     *\n     * @param {Enum} enumObj - The enum to be copied.\n     */\n    copyEnum(enumObj = {}) {\n        for (const symbolTuple of Object.entries(enumObj)) {\n            this.merge(symbolTuple);\n        }\n    }\n    /**\n     * Fetches a symbol and its index based on a payload.\n     *\n     * @param {number | string} payload - The payload, which can be either a symbol or an index.\n     * @returns {[string, number]} A tuple containing the symbol and its index.\n     */\n    fetch(payload) {\n        let index;\n        let symbol;\n        switch (typeof payload) {\n            case 'number':\n                index = payload;\n                symbol = this._list[index] || '';\n                break;\n            case 'string':\n                symbol = payload;\n                index = Object.prototype.hasOwnProperty.call(this._enum, symbol) ? this._enum[symbol] : -1;\n                break;\n        }\n        return [symbol, index];\n    }\n    /**\n     * Finds the index of a symbol.\n     *\n     * @param {string} symbol - The symbol to be found.\n     * @returns {number | undefined} The index of the symbol, or undefined if the symbol is not found.\n     */\n    find(symbol) {\n        return this._enum[symbol];\n    }\n    /**\n     * Gets the symbol at a specific index.\n     *\n     * @param {number} index - The index of the symbol.\n     * @returns {string | undefined} The symbol at the specified index, or undefined if there is no symbol at that index.\n     */\n    get(index) {\n        return this._list[index];\n    }\n    /**\n     * Returns the list of symbols.\n     *\n     * @returns {string[]} The list of symbols.\n     */\n    getSymbols() {\n        return this._list;\n    }\n    /**\n     * Returns the enum of symbols.\n     *\n     * @returns {Enum} The enum of symbols.\n     */\n    getSymbolsEnum() {\n        return this._enum;\n    }\n    /**\n     * Merges a symbol tuple into the Symbols object.\n     *\n     * @param {[string, number]} symbolTuple - The symbol tuple to be merged.\n     */\n    merge(symbolTuple) {\n        const [symbol, index] = symbolTuple;\n        this._list[index] = symbol;\n        this._enum[symbol] = index;\n    }\n    /**\n     * Resets the Symbols object with a new array of symbols.\n     *\n     * @param {string[]} symbolsArray - The new array of symbols.\n     */\n    reset(offset, symbolsArray = []) {\n        if (offset > 0) {\n            const { length } = symbolsArray;\n            const { _list } = this;\n            const { _enum } = this;\n            for (let i = 0; i < length; i++) {\n                const symbol = symbolsArray[i];\n                const index = i + offset;\n                _list[index] = symbol;\n                _enum[symbol] = index;\n            }\n        }\n        else {\n            this._list = symbolsArray;\n            this._enum = createEnum(symbolsArray);\n        }\n    }\n}\nexport default Symbols;\n/**\n * Extracts a symbol from a given index.\n *\n * @param {number | string} index - The index or symbol to be extracted.\n * @param {any} context - The context in which the symbol is to be extracted.\n * @param {any} options - The options for extracting the symbol.\n * @returns {string | number} The extracted symbol.\n */\nexport function extractSymbol(index, context, options) {\n    if (typeof index === 'number') {\n        const { actions } = options;\n        const { getSymbol } = actions;\n        const symbol = getSymbol(index, context, options);\n        if (!symbol) {\n            return '';\n        }\n        index = symbol;\n    }\n    return index;\n}\n/**\n * Ensures that a symbol is indexed.\n *\n * @param {number | string} symbol - The symbol to be indexed.\n * @param {any} context - The context in which the symbol is to be indexed.\n * @param {any} options - The options for indexing the symbol.\n * @returns {number | string} The indexed symbol.\n */\nexport function ensureSymbolIndex(symbol, context, options) {\n    if (typeof symbol === 'string') {\n        const { actions } = options;\n        const { addSymbol } = actions;\n        const index = addSymbol(symbol, context, options);\n        if (typeof index === 'number') {\n            return index;\n        }\n    }\n    return symbol;\n}\n/**\n * Recursively extracts symbols from a given value.\n *\n * @param {string} key - The key associated with the value.\n * @param {any} value - The value from which symbols are to be extracted.\n * @param {any} context - The context in which the symbols are to be extracted.\n * @param {any} options - The options for extracting symbols.\n * @returns {any} The value with extracted symbols.\n */\nexport function recursiveSymbolExtraction(key, value, context, options) {\n    if (key.charAt(0) === '$') {\n        const { actions } = options;\n        const { getSymbol } = actions;\n        const recursiveFix = (value) => {\n            if (Array.isArray(value)) {\n                value = value.map(recursiveFix);\n            }\n            else {\n                switch (typeof value) {\n                    case 'number': {\n                        const symbol = getSymbol(value, context, options);\n                        if (symbol) {\n                            value = symbol;\n                        }\n                        break;\n                    }\n                    case 'object':\n                        for (const key of Object.keys(value)) {\n                            value[key] = recursiveFix(value[key]);\n                        }\n                        break;\n                }\n                return value;\n            }\n        };\n        return recursiveFix(value);\n    }\n    return value;\n}\n/**\n * Recursively ensures that symbols in a given value are indexed.\n *\n * @param {string} key - The key associated with the value.\n * @param {any} value - The value in which symbols are to be indexed.\n * @param {any} context - The context in which the symbols are to be indexed.\n * @param {any} options - The options for indexing symbols.\n * @returns {any} The value with indexed symbols.\n */\nexport function recursiveSymbolIndexesEnsured(key, value, context, options) {\n    if (key.charAt(0) === '$') {\n        const { actions } = options;\n        const { addSymbol } = actions;\n        const recursiveFix = (value) => {\n            if (Array.isArray(value)) {\n                value = value.map(recursiveFix);\n            }\n            else {\n                switch (typeof value) {\n                    case 'string': {\n                        const symbol = addSymbol(value, context, options);\n                        if (typeof symbol === 'number') {\n                            value = symbol;\n                        }\n                        break;\n                    }\n                    case 'object':\n                        for (const key of Object.keys(value)) {\n                            value[key] = recursiveFix(value[key]);\n                        }\n                        break;\n                }\n                return value;\n            }\n        };\n        return recursiveFix(value);\n    }\n    return value;\n}\n","export const ArrayTypes = new Map([\n    // ['eid', Uint32Array],\n    // ['sid', Uint32Array],\n    // ['sym', String],\n    ['i8', Int8Array],\n    ['ui8', Uint8Array],\n    ['ui8c', Uint8ClampedArray],\n    ['i16', Int16Array],\n    ['ui16', Uint16Array],\n    ['i32', Int32Array],\n    ['ui32', Uint32Array],\n    ['f32', Float32Array],\n    ['f64', Float64Array],\n    // ['str', String],\n    // ['num', Number],\n    // ['bool', Boolean],\n    // ['map', Map],\n    // ['set', Set],\n    // ['arr', Array],\n]);\n","import { Options } from './options.js';\nimport { ensureSymbolIndex, recursiveSymbolIndexesEnsured } from './symbols.js';\nimport { ArrayTypes } from './types.js';\n/**\n * The updater function updates the context based on the provided options.\n *\n * @param {Context} context - The current context.\n * @param {Options | any} options - The options for updating the context.\n * @param {number} tick - The current tick.\n */\nexport async function updater(context, options, tick = Date.now()) {\n    options = options instanceof Options ? options : new Options(options);\n    const { responder, enumDefaultSymbols, compressStringsAsInts, enableRollback, isOrdered, isDiffed, isGroupedComponents, types, setGroupedValue, updateOptions } = options;\n    const { batched, batchSize, mask, type, validKeys } = updateOptions;\n    if (!context.pending) {\n        return;\n    }\n    /**\n     * An array of arrays, where each sub-array represents a batch of updates.\n     */\n    const batch = [];\n    /**\n     * An array representing the current batch of updates.\n     */\n    let batchBlock = [];\n    const { created = {}, removed = {}, symbols = [], updated = {} } = context.pending;\n    /**\n     * Merges the current batch block into the batch array.\n     *\n     * @param {string | number} action - The action associated with the current batch block.\n     */\n    const mergeBatch = (action) => {\n        if (batched && batchBlock.length) {\n            batch.push([action, ...batchBlock]);\n            batchBlock = [];\n        }\n    };\n    /**\n     * Queues a message for later processing.\n     *\n     * @param {string | number} action - The action associated with the message.\n     * @param {any} payload - The payload of the message.\n     */\n    const queueMessage = (action, payload) => {\n        if (batched) {\n            // batchBlock.push(payload)\n            batchBlock = batchBlock.concat(payload);\n            if (batchBlock.length >= batchSize) {\n                mergeBatch(action);\n            }\n        }\n        else {\n            if (compressStringsAsInts) {\n                action = ensureSymbolIndex(action, context, options);\n            }\n            responder([action, payload], type);\n        }\n    };\n    /**\n     * Ensures that a symbol is indexed if the `compressStringsAsInts` option is enabled.\n     *\n     * @param {string | number} symbol - The symbol to be indexed.\n     * @returns {string | number} The indexed symbol, or the original symbol if `compressStringsAsInts` is not enabled.\n     */\n    const ensureSymbol = (symbol) => {\n        if (compressStringsAsInts) {\n            symbol = ensureSymbolIndex(symbol, context, options);\n        }\n        return symbol;\n    };\n    const upsertComponents = async (pendingComponents = {}) => {\n        const store = context.store;\n        const groups = isGroupedComponents ? {} : null;\n        for (const id of Object.keys(pendingComponents)) {\n            const components = store.fetchComponents(id);\n            if (!components) {\n                break;\n            }\n            const updatedComponents = pendingComponents ? pendingComponents[id] : {};\n            for (const key of Object.keys(updatedComponents[id] ?? {})) {\n                if (validKeys && !validKeys[key]) {\n                    break;\n                }\n                let group = null;\n                if (groups) {\n                    group = groups[key] = groups[key] ?? {\n                        key,\n                        ids: [],\n                        values: [],\n                        ticks: []\n                    };\n                }\n                let value;\n                if (isDiffed && context.changes) {\n                    value = context.changes.getValue(id, key);\n                }\n                else {\n                    // TODO: support async fetchComponent\n                    value = store.fetchComponent(id, key);\n                    if (value instanceof Promise) {\n                        value = await value;\n                    }\n                }\n                if (compressStringsAsInts) {\n                    value = recursiveSymbolIndexesEnsured(key, value, context, options);\n                }\n                const nid = ensureSymbol(id);\n                const nkey = ensureSymbol(key);\n                if (groups) {\n                    group.ids.push(nid);\n                    group.values.push(setGroupedValue(value, types, key));\n                    if (isOrdered) {\n                        group.ticks.push(isDiffed ? -tick : tick);\n                    }\n                    continue;\n                }\n                const payload = [nid, nkey, value];\n                if (isOrdered) {\n                    payload.push(isDiffed ? -tick : tick);\n                }\n                if (isDiffed) {\n                    queueMessage(enumDefaultSymbols.changeComponent, payload);\n                }\n                else {\n                    queueMessage(enumDefaultSymbols.upsertComponent, payload);\n                }\n            }\n            // delete pendingComponents[id];\n        }\n        if (groups) {\n            for (const key of Object.keys(groups)) {\n                const group = groups[key];\n                const bufferIds = compressStringsAsInts ? new Uint32Array(group.ids) : group.ids;\n                const type = types[key] ?? null;\n                const Type = type ? ArrayTypes.get(Array.isArray(type) ? type[0] : type) : null;\n                const bufferValues = Type ? new Type(group.values) : group.values;\n                let i = 0;\n                const size = bufferIds.length;\n                for (; i < size; i += batchSize) {\n                    const payload = [\n                        bufferIds.slice(i, i + batchSize),\n                        group.key,\n                        bufferValues.slice(i, i + batchSize)\n                    ];\n                    if (isOrdered) {\n                        const bufferTicks = new Uint32Array(group.ticks.slice(i, i + batchSize));\n                        payload.push(bufferTicks);\n                    }\n                    if (isDiffed) {\n                        queueMessage(enumDefaultSymbols.changeComponent, payload);\n                    }\n                    else {\n                        queueMessage(enumDefaultSymbols.upsertComponent, payload);\n                    }\n                }\n            }\n        }\n        mergeBatch(isDiffed ? enumDefaultSymbols.changeComponent : enumDefaultSymbols.upsertComponent);\n    };\n    /**\n     * If the `mask` object does not exist or does not have an `entities` property,\n     * this code block ensures that each entity in the `created.entities` array is indexed,\n     * queues a message to create each entity, merges the batch of messages, and then clears the `created.entities` array.\n     */\n    if (!mask || !mask.entities) {\n        for (const key of created.entities ?? []) {\n            const nkey = ensureSymbol(key);\n            queueMessage(enumDefaultSymbols.createEntity, nkey);\n        }\n        mergeBatch(enumDefaultSymbols.createEntity);\n        created.entities = [];\n    }\n    /**\n     * If the `mask` object does not exist or does not have an `actors` property,\n     * this code block ensures that each actor in the `created.actors` array is indexed,\n     * queues a message to spawn each actor, merges the batch of messages, and then clears the `created.actors` array.\n     */\n    if (!mask || !mask.actors) {\n        for (const id of Object.keys(created.actors ?? {})) {\n            const nid = ensureSymbol(id);\n            queueMessage(enumDefaultSymbols.spawnActor, nid);\n        }\n        mergeBatch(enumDefaultSymbols.spawnActor);\n        created.actors = {};\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `removed.components` object is indexed,\n     * queues a message to remove each component, merges the batch of messages, and then clears the `removed.components` object.\n     */\n    if (!mask || !mask.entities) {\n        for (const key of removed.entities ?? []) {\n            const nkey = ensureSymbol(key);\n            queueMessage(enumDefaultSymbols.removeEntity, nkey);\n        }\n        mergeBatch(enumDefaultSymbols.removeEntity);\n        removed.entities = [];\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `removed.components` object is indexed,\n     * queues a message to remove each component, merges the batch of messages, and then clears the `removed.components` object.\n     */\n    if (!mask || !mask.actors) {\n        for (const id of Object.keys(removed.actors ?? {})) {\n            const nid = ensureSymbol(id);\n            queueMessage(enumDefaultSymbols.removeActor, nid);\n        }\n        mergeBatch(enumDefaultSymbols.removeActor);\n        removed.actors = {};\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `removed.components` object is indexed,\n     * queues a message to remove each component, merges the batch of messages, and then clears the `removed.components` object.\n     */\n    if (!mask || !mask.components) {\n        for (const id of Object.keys(removed.components ?? {})) {\n            const components = removed?.components ? removed.components[id] : null;\n            if (!components) {\n                break;\n            }\n            const nid = ensureSymbol(id);\n            for (const key of Object.keys(components)) {\n                if (validKeys && !validKeys[key]) {\n                    break;\n                }\n                const nkey = ensureSymbol(key);\n                const payload = [nid, nkey];\n                queueMessage(enumDefaultSymbols.removeComponent, payload);\n            }\n            // delete removed.components[key]\n        }\n        mergeBatch(enumDefaultSymbols.removeComponent);\n        removed.components = {};\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `created.components` object is indexed,\n     * queues a message to create each component, merges the batch of messages, and then clears the `created.components` object.\n     */\n    if (!mask || !mask.components) {\n        const promise = upsertComponents(created.components);\n        created.components = {};\n        await promise;\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `components` property,\n     * this code block ensures that each component in the `updated.components` object is indexed,\n     * queues a message to update each component, merges the batch of messages, and then clears the `updated.components` object.\n     */\n    if (!mask || !mask.components) {\n        const promise = upsertComponents(updated.components);\n        updated.components = {};\n        await promise;\n    }\n    /**\n     * If the `mask` object does not exist or does not have an `inputs` property,\n     * this code block ensures that each input in the `created.inputs` object is indexed,\n     * queues a message to create each input, merges the batch of messages, and then clears the `created.inputs` object.\n     */\n    if (!mask || !mask.inputs) {\n        for (const id of Object.keys(created.inputs ?? {})) {\n            // const nid = ensureSymbol(id)\n            const createdInputs = created?.inputs ? created.inputs[id] : [];\n            for (const index of (createdInputs ?? [])) {\n                const payload = createdInputs ? createdInputs[index] : null;\n                const input = payload;\n                // const input = { ...payload, id };\n                queueMessage(enumDefaultSymbols.actorInput, enableRollback ? [input, tick] : input);\n            }\n            // delete created.inputs[id];\n        }\n        mergeBatch(enumDefaultSymbols.actorInput);\n        created.inputs = {};\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `symbols` property,\n     * this code block ensures that each symbol in the `symbols` array is indexed,\n     * queues a message to add each symbol, merges the batch of messages, and then clears the `symbols` array.\n     */\n    if (!mask || !mask.symbols) {\n        for (const symbolOp of symbols) {\n            if (batched) {\n                batchBlock.push(symbolOp);\n            }\n            else {\n                const message = [enumDefaultSymbols.mergeSymbol, symbolOp];\n                responder(message, type);\n            }\n            if (batchBlock.length >= batchSize && batchBlock.length) {\n                batch.unshift([enumDefaultSymbols.mergeSymbol].concat(batchBlock));\n                batchBlock = [];\n            }\n        }\n        if (batched && batchBlock.length) {\n            batch.unshift([enumDefaultSymbols.mergeSymbol].concat(batchBlock));\n            batchBlock = [];\n        }\n        context.pending.symbols = [];\n    }\n    /**\n     * If the `mask` object does not exist or does not have a `symbols` property,\n     * this code block ensures that each symbol in the `symbols` array is indexed,\n     * queues a message to add each symbol, merges the batch of messages, and then clears the `symbols` array.\n     */\n    if (batched && batch.length) {\n        for (let i = 0; i < batch.length; i += 1) {\n            const batchSlice = batch[i];\n            if (batchSlice) {\n                responder([enumDefaultSymbols.batch, batchSlice]);\n                // if (batchSlice.length > 1) {\n                //   responder([enumDefaultSymbols.batch].concat(batchSlice))\n                // } else {\n                //   responder(batchSlice)\n                // }\n            }\n        }\n    }\n}\nexport default updater;\n","/**\n * Creates a union of multiple sets or arrays.\n *\n * @param {...Array<SetOrArray<any>>} sets - The sets or arrays to be united.\n * @returns {Array<string>} The union of the sets or arrays.\n */\nexport function unionSetOrArray(...sets) {\n    const union = {};\n    for (const set of sets) {\n        if (set) {\n            for (const v of set) {\n                union[v] = true;\n            }\n        }\n    }\n    return Object.keys(union);\n}\n/**\n * Creates an union of two sets.\n *\n * @param {SetExperimental} setA - The first set.\n * @param {SetExperimental} setB - The second set.\n * @returns {Set<any>} The union of the sets.\n */\nexport function unionSets(setA, setB) {\n    if (typeof setA.union === 'function') {\n        return setA.union(setA);\n    }\n    const union = new Set();\n    for (const v of setA)\n        union.add(v);\n    for (const v of setB)\n        union.add(v);\n    return union;\n}\n/**\n * Creates an difference of the two sets.\n *\n * @param {SetExperimental} setA - The first set.\n * @param {SetExperimental} setB - The second set.\n * @returns {Set<any>} The difference of the sets.\n */\nexport function differenceSets(setA, setB) {\n    if (typeof setA.difference === 'function') {\n        return setA.difference(setA);\n    }\n    const difference = new Set();\n    for (const v of setA)\n        if (!setB.has(v))\n            difference.add(v);\n    return difference;\n}\n/**\n * Creates an intersection of the two sets.\n *\n * @param {SetExperimental} setA - The first set.\n * @param {SetExperimental} setB - The second set.\n * @returns {Set<any>} The intersection of the sets.\n */\nexport function intersectionSets(setA, setB) {\n    if (typeof setA.intersection === 'function') {\n        return setA.intersection(setA);\n    }\n    const intersection = new Set();\n    for (const v of setA)\n        if (setB.has(v))\n            intersection.add(v);\n    return intersection;\n}\n/**\n * binaryInsert finds the index of where a value should be inserted into a sorted array.\n *\n * @param {any[]} items - The sorted array\n * @param {any} value - The value to insert\n * @param {Function} getValue - The function to get the value from the item\n * @returns {number} The index of where the value should be inserted\n */\nexport function binaryInsert(items, value, getValue = (v) => v) {\n    let low = 0;\n    let high = items.length;\n    while (low < high) {\n        const mid = (low + high) >>> 1;\n        const item = items[mid];\n        const v = getValue(item);\n        if (v < value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\n/**\n * binarySearch finds the index of a value in a sorted array.\n *\n * @param {any[]} items - The sorted array\n * @param {any} target - The value to find\n * @param {Function} getValue - The function to get the value from the item\n * @returns {number[]} The index of the value\n */\nexport function binarySearch(items, target, getValue = (v) => v) {\n    let left = 0;\n    let right = items.length - 1;\n    while (left <= right) {\n        const mid = (left + right) >>> 1;\n        const item = items[mid];\n        const v = getValue(item);\n        if (v === target) {\n            return [mid, left];\n        }\n        else if (v < target) {\n            left = mid + 1;\n        }\n        else {\n            right = mid - 1;\n        }\n    }\n    return [-1, left];\n}\n/**\n * Creates an enum from a set or an array.\n *\n * @param {SetOrArray<any>} set - The set or array from which the enum is to be created.\n * @param {number} offset - The starting value of the enum.\n * @returns {Record<string, number>} The created enum.\n */\nexport function createEnum(set, offset = 0) {\n    const _enum = {};\n    let i = offset;\n    if (set) {\n        for (const v of set) {\n            _enum[v] = i++;\n        }\n    }\n    return _enum;\n}\n/**\n * Creates a tuple from a message.\n *\n * @param {{ action?: any, payload?: any }} message - The message from which the tuple is to be created.\n * @returns {Array<any>} The created tuple.\n */\nexport function messageTuple(message) {\n    return [message?.action, message?.payload];\n}\n/**\n * Split an array into pages\n *\n * @param {any[]} array - The array to be split into pages.\n * @param {number} pageSize - The size of each page.\n * @returns {any[][]} The array of pages.\n */\nexport function paginate(array, pageSize) {\n    const pages = [];\n    let page = [];\n    let i = 0;\n    for (const v of array) {\n        if (i >= pageSize) {\n            pages.push(page);\n            page = [];\n            i = 0;\n        }\n        page.push(v);\n        i++;\n    }\n    return pages;\n}\n/**\n * Determines the type of a value.\n *\n * @param {any} v - The value whose type is to be determined.\n * @returns {string} The type of the value.\n */\nexport function typeOf(v) {\n    const t = typeof v;\n    if (t === 'object') {\n        if (!v) {\n            return 'null';\n        }\n        else if (Array.isArray(v)) {\n            return 'array';\n        }\n    }\n    return t;\n}\n/**\n * Combines two values.\n *\n * @param {any} objA - The first value.\n * @param {any} objB - The second value.\n * @returns {[boolean, any]} A tuple where the first element is a boolean indicating whether the values were combined, and the second element is the combined value.\n */\nexport function combineValues(objA, objB) {\n    return recursiveCombination(objA, objB);\n}\n/**\n * Recursively combines two objects or arrays and returns the result.\n * If the combination is successful, it returns a tuple with a boolean indicating success and the combined object/array.\n * If the combination fails, it returns a tuple with a boolean indicating failure and the second object/array.\n * @param objA - The first object/array to combine.\n * @param objB - The second object/array to combine.\n * @returns A tuple with a boolean indicating success/failure and the combined object/array.\n */\nexport function recursiveCombination(objA, objB) {\n    const typeA = typeOf(objA);\n    const typeB = typeOf(objB);\n    switch (typeB) {\n        case 'bigint':\n        case 'number': {\n            if (typeA !== 'number' && typeA !== 'bigint') {\n                return [false, objB];\n            }\n            return [true, objA + objB];\n        }\n        case 'array': {\n            if (typeA !== 'array') {\n                return [false, objB];\n            }\n            const newArr = [];\n            let combined = true;\n            for (let i = 0; i < objB.length; i += 1) {\n                const [c, value] = recursiveCombination(objA[i], objB[i]);\n                newArr[i] = value;\n                if (c === false) {\n                    combined = false;\n                }\n            }\n            return [combined, newArr];\n        }\n        case 'object': {\n            if (typeA !== 'object') {\n                return [false, objB];\n            }\n            const newObj = {};\n            let combined = true;\n            for (const k of Object.keys(objB)) {\n                const [c, value] = recursiveCombination(objA[k], objB[k]);\n                if (c === false) {\n                    combined = false;\n                }\n                newObj[k] = value;\n            }\n            return [combined, newObj];\n        }\n        default:\n            return [false, objB];\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && !queue.d) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = 1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && (queue.d = 0);\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Exports all the constants.\n */\nexport * from './constants.js';\n// Index Classes\n/**\n * Exports all the indexes-related functions and classes.\n */\nexport * from './indexes/index.js';\n/**\n * Exports all the indexes-related functions and classes.\n */\nexport * from './indexes/sorted.js';\n/**\n * Exports all the indexes-related functions and classes.\n */\nexport * from './indexes/spatial.js';\n// Main Classes\n/**\n * Exports all the actions-related functions and classes.\n */\nexport * from './changes.js';\n/**\n * Exports all the context-related functions and classes.\n*/\nexport * from './context.js';\n/**\n * Exports all the actions-related functions and classes.\n */\nexport * from './emitter.js';\n/**\n * Exports all the handler-related functions and classes.\n */\nexport * from './handler.js';\n/**\n * Exports all the options-related functions and classes.\n */\nexport * from './options.js';\n/**\n * Exports all the actions-related functions and classes.\n */\nexport * from './ordered.js';\n/**\n * Exports all the pending-related functions and classes.\n */\nexport * from './pending.js';\n/**\n * Exports all the store-related functions and classes.\n */\nexport * from './storage.js';\n/**\n * Exports all the symbols-related functions and classes.\n */\nexport * from './symbols.js';\n/**\n * Exports all the types-related functions and classes.\n */\nexport * from './types.js';\n// Utils\n/**\n * Exports all the updater-related functions and classes.\n */\nexport * from './updater.js';\n/**\n * Exports all the utility functions.\n */\nexport * as utils from './utils.js';\n// Node Actions\n/**\n * Exports all the node-related functions and classes.\n */\nexport * as Node from './node.js';\n/**\n * Exports all the client-related functions and classes.\n */\nexport * as Client from './client.js';\n// Action Modules\n/**\n * Exports all the actions-related functions and classes.\n */\nexport * as Actor from './actions/actor.js';\n/**\n * Exports all the component-related functions and classes.\n */\nexport * as Component from './actions/component.js';\n/**\n * Exports all the core-related functions and classes.\n */\nexport * as Core from './actions/core.js';\n/**\n * Exports all the entity-related functions and classes.\n */\nexport * as Entitity from './actions/entity.js';\n/**\n * Exports all the entity-related functions and classes.\n */\nexport * as Symbol from './actions/symbol.js';\n// default export is the Handler class\nimport Handler from './handler.js';\nexport default Handler;\n"],"names":[],"sourceRoot":""}