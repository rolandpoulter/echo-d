{"version":3,"file":"runloop.echo-d.js","mappings":";;;;;;;;;;;;;;;AAAkC;AAC3B;AACP;AACA;AACA;AACA,CAAC;AACD,YAAY,6CAA6C;AACzD;AACA,mEAAmE,8CAAG,QAAQ,8CAAG;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,8CAAG;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,8CAAG;AACvE;AACA;AACA;AACA;AACA,uBAAuB;AACvB,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://echo-d/./lib/extra/runloop.js"],"sourcesContent":["import { now } from '../utils.js';\nexport function createRunLoop(props = {\n    updateFrequency: 1000 / 50,\n    setImmediate: typeof setImmediate === 'function' ? setImmediate : setTimeout,\n    clearImmediate: typeof clearImmediate === 'function' ? clearImmediate : clearTimeout,\n}) {\n    const { updateFrequency, setImmediate, events, fn, } = props;\n    let lastFrameTime = null;\n    function nextCycle(nf = nextFrame, state = getState(), start = now(), n = now()) {\n        if (lastFrameTime === null) {\n            lastFrameTime = n;\n        }\n        const delta = n - lastFrameTime;\n        lastFrameTime = n;\n        state.start = start;\n        if (typeof setImmediate === 'function') {\n            return setImmediate(() => nf(state, start, n - start, delta), 0);\n        }\n    }\n    let lastEmitDelta = null;\n    function nextFrame(state = getState(), start = now(), timestamp = 0, delta = 0) {\n        if (lastEmitDelta === null) {\n            lastEmitDelta = 0;\n        }\n        if (lastEmitDelta >= updateFrequency) {\n            if (fn) {\n                fn(timestamp, lastEmitDelta, delta, state);\n            }\n            if (state.events?.emit) {\n                state.events.emit('frame', timestamp, lastEmitDelta, delta, state);\n            }\n            lastEmitDelta = 0;\n        }\n        lastEmitDelta += delta;\n        if (!state.stop) {\n            state.pendingFrame = nextCycle(nextFrame, state, start, now());\n        }\n        return state;\n    }\n    let _state = {};\n    const stateRef = { current: _state };\n    function getState(subscriber = (_events) => { }, state = _state) {\n        state.events = state.events || events;\n        subscriber(state.events);\n        return state;\n    }\n    function setState(state) {\n        _state = state;\n        stateRef.current = _state;\n    }\n    function stop(state = _state) {\n        state.stop = true;\n        if (state.pendingFrame) {\n            clearImmediate(state.pendingFrame);\n        }\n    }\n    function start(state = _state, nc = nextCycle, nf = nextFrame) {\n        state.stop = false;\n        nc(nf, state);\n    }\n    return {\n        nextFrame,\n        nextCycle,\n        getState,\n        setState,\n        events,\n        stop,\n        start,\n        state: stateRef,\n    };\n}\n"],"names":[],"sourceRoot":""}