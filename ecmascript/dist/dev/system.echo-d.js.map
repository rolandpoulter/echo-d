{"version":3,"file":"system.echo-d.js","mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;;ACVwC;AACA;AACjC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8CAA8C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO,4BAA4B,gDAAO;AAC1C,sDAAsD,gDAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://echoD/webpack/universalModuleDefinition","webpack://echoD/./lib/extra/system.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"echoD\"] = factory();\n\telse\n\t\troot[\"echoD\"] = factory();\n})(typeof window !== \"undefined\" ? window : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : this, () => {\nreturn ","import { Handler } from '../handler.js';\nimport { Storage } from '../storage.js';\nexport class System {\n    static query(handler, query) {\n        return handler.queryComponents(query);\n    }\n    constructor(handler, components, exclude = new Set()) {\n        this.handler = handler;\n        this.exclude = exclude;\n        this.components = components;\n    }\n    query() {\n        this.entities = System.query(this.handler, { with: this.components, without: this.exclude });\n        return this.entities;\n    }\n    execute(fn) {\n        const entities = this.query();\n        const handler = this.handler;\n        for (const entity of entities) {\n            fn(handler, entity);\n        }\n    }\n}\nexport function executeSystems(systems, fn) {\n    for (const system of systems) {\n        system.execute(fn);\n    }\n}\nexport class SystemHandler extends Handler {\n    constructor(context, options, actions, _Storage = Storage) {\n        super(context, options, actions, _Storage);\n        this.systems = [];\n    }\n    createSystem(components, exclude = new Set(), _System = System) {\n        const system = new _System(this, components, exclude);\n        this.systems.push(system);\n        return system;\n    }\n    removeSystem(system) {\n        const index = this.systems.indexOf(system);\n        if (index !== -1) {\n            this.systems.splice(index, 1);\n        }\n    }\n    executeSystems(fn) {\n        executeSystems(this.systems, fn);\n    }\n}\n"],"names":[],"sourceRoot":""}